/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Trie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.apache.commons.collections4.trie.UnmodifiableTrie;
import org.junit.BeforeClass;

public class UnmodifiableTrieEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.size()I: root-Branch
   * 2 org.apache.commons.collections4.trie.UnmodifiableTrie.<init>(Lorg/apache/commons/collections4/Trie;)V: I7 Branch 1 IFNONNULL L66 - true
   */

  @Test
  public void test0()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1258,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test0");
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      UnmodifiableTrie<String, Integer> unmodifiableTrie0 = new UnmodifiableTrie<String, Integer>((Trie<String, Integer>) patriciaTrie0);
      int int0 = unmodifiableTrie0.size();
      assertEquals(0, int0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.clear()V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1259,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test1");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      UnmodifiableTrie<String, Object> unmodifiableTrie0 = new UnmodifiableTrie<String, Object>((Trie<String, Object>) patriciaTrie0);
      // Undeclared exception!
      try {
        unmodifiableTrie0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.mapIterator()Lorg/apache/commons/collections4/OrderedMapIterator;: root-Branch
   * 2 org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(Lorg/apache/commons/collections4/Trie;)Lorg/apache/commons/collections4/trie/UnmodifiableTrie;: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1270,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test2");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      UnmodifiableTrie<String, String> unmodifiableTrie0 = UnmodifiableTrie.unmodifiableTrie((Trie<String, String>) patriciaTrie0);
      OrderedMapIterator<String, String> orderedMapIterator0 = unmodifiableTrie0.mapIterator();
      assertEquals(false, orderedMapIterator0.hasNext());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.keySet()Ljava/util/Set;: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1274,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test3");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      UnmodifiableTrie<String, String> unmodifiableTrie0 = new UnmodifiableTrie<String, String>((Trie<String, String>) patriciaTrie0);
      Set<String> set0 = unmodifiableTrie0.keySet();
      assertEquals(0, set0.size());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.prefixMap(Ljava/lang/Object;)Ljava/util/SortedMap;: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1275,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test4");
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Integer>>();
      patriciaTrie0.toString();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      UnmodifiableTrie<String, String> unmodifiableTrie0 = new UnmodifiableTrie<String, String>((Trie<String, String>) patriciaTrie1);
      SortedMap<String, String> sortedMap0 = unmodifiableTrie0.prefixMap("Trie[0]={\n}\n");
      assertEquals(0, sortedMap0.size());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1276,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test5");
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      UnmodifiableTrie<String, Integer> unmodifiableTrie0 = new UnmodifiableTrie<String, Integer>((Trie<String, Integer>) patriciaTrie0);
      SortedMap<String, Integer> sortedMap0 = unmodifiableTrie0.headMap("ToKey is out of range: ");
      assertEquals(true, sortedMap0.isEmpty());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.values()Ljava/util/Collection;: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1277,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test6");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>((Map<? extends String, ?>) hashMap0);
      UnmodifiableTrie<String, Object> unmodifiableTrie0 = UnmodifiableTrie.unmodifiableTrie((Trie<String, Object>) patriciaTrie0);
      Collection<Object> collection0 = unmodifiableTrie0.values();
      assertEquals(0, collection0.size());
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.hashCode()I: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1278,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test7");
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      UnmodifiableTrie<String, Integer> unmodifiableTrie0 = new UnmodifiableTrie<String, Integer>((Trie<String, Integer>) patriciaTrie0);
      int int0 = unmodifiableTrie0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.remove(Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1279,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test8");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      UnmodifiableTrie<String, String> unmodifiableTrie0 = new UnmodifiableTrie<String, String>((Trie<String, String>) patriciaTrie0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.toString();
      // Undeclared exception!
      try {
        unmodifiableTrie0.remove((Object) "{}");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1280,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test9");
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>((Map<? extends String, ?>) patriciaTrie0);
      UnmodifiableTrie<String, Object> unmodifiableTrie0 = new UnmodifiableTrie<String, Object>((Trie<String, Object>) patriciaTrie1);
      // Undeclared exception!
      try {
        unmodifiableTrie0.putAll((Map<? extends String, ?>) unmodifiableTrie0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.previousKey(Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1260,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test10");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>((Map<? extends String, ?>) patriciaTrie0);
      UnmodifiableTrie<String, Object> unmodifiableTrie0 = UnmodifiableTrie.unmodifiableTrie((Trie<String, Object>) patriciaTrie1);
      String string0 = unmodifiableTrie0.previousKey("ToKey is out of range: ");
      assertNull(string0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.isEmpty()Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1261,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test11");
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      UnmodifiableTrie<String, Integer> unmodifiableTrie0 = new UnmodifiableTrie<String, Integer>((Trie<String, Integer>) patriciaTrie0);
      boolean boolean0 = unmodifiableTrie0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.containsKey(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1262,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test12");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      UnmodifiableTrie<String, String> unmodifiableTrie0 = UnmodifiableTrie.unmodifiableTrie((Trie<String, String>) patriciaTrie0);
      // Undeclared exception!
      try {
        unmodifiableTrie0.containsKey((Object) unmodifiableTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.UnmodifiableTrie cannot be cast to java.lang.String
         //
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1263,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test13");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>((Map<? extends String, ?>) hashMap0);
      UnmodifiableTrie<String, Object> unmodifiableTrie0 = UnmodifiableTrie.unmodifiableTrie((Trie<String, Object>) patriciaTrie0);
      HashMap<?, ?> hashMap1 = (HashMap<?, ?>)hashMap0.clone();
      // Undeclared exception!
      try {
        unmodifiableTrie0.put("1fc_8Oi@?|", (Object) hashMap1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1264,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test14");
      HashMap<String, AbstractMap.SimpleEntry<String, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<String, Object>>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>((Map<? extends String, ?>) hashMap0);
      UnmodifiableTrie<String, Object> unmodifiableTrie0 = new UnmodifiableTrie<String, Object>((Trie<String, Object>) patriciaTrie0);
      SortedMap<String, Object> sortedMap0 = unmodifiableTrie0.subMap("Trie must not be null", "Trie must not be null");
      assertEquals(0, sortedMap0.size());
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.firstKey()Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1265,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test15");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      UnmodifiableTrie<String, String> unmodifiableTrie0 = new UnmodifiableTrie<String, String>((Trie<String, String>) patriciaTrie0);
      // Undeclared exception!
      try {
        unmodifiableTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.lastKey()Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1266,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test16");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      UnmodifiableTrie<String, String> unmodifiableTrie0 = UnmodifiableTrie.unmodifiableTrie((Trie<String, String>) patriciaTrie0);
      // Undeclared exception!
      try {
        unmodifiableTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.comparator()Ljava/util/Comparator;: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1267,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test17");
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Integer>>();
      UnmodifiableTrie<String, AbstractMap.SimpleEntry<Integer, Integer>> unmodifiableTrie0 = new UnmodifiableTrie<String, AbstractMap.SimpleEntry<Integer, Integer>>((Trie<String, AbstractMap.SimpleEntry<Integer, Integer>>) patriciaTrie0);
      Comparator<? super String> comparator0 = unmodifiableTrie0.comparator();
      assertNotNull(comparator0);
  }

  //Test case number: 18
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.containsValue(Ljava/lang/Object;)Z: root-Branch
   * 2 org.apache.commons.collections4.trie.UnmodifiableTrie.unmodifiableTrie(Lorg/apache/commons/collections4/Trie;)Lorg/apache/commons/collections4/trie/UnmodifiableTrie;: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1268,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test18");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("ToKey is out of range: ", "ToKey is out of range: ");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>((Map<? extends String, ?>) patriciaTrie0);
      UnmodifiableTrie<String, Object> unmodifiableTrie0 = UnmodifiableTrie.unmodifiableTrie((Trie<String, Object>) patriciaTrie1);
      boolean boolean0 = unmodifiableTrie0.containsValue((Object) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1269,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test19");
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>((Map<? extends String, ?>) patriciaTrie0);
      UnmodifiableTrie<String, Object> unmodifiableTrie0 = new UnmodifiableTrie<String, Object>((Trie<String, Object>) patriciaTrie1);
      SortedMap<String, Object> sortedMap0 = unmodifiableTrie0.tailMap("");
      assertEquals(0, sortedMap0.size());
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.entrySet()Ljava/util/Set;: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1271,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test20");
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      UnmodifiableTrie<String, AbstractMap.SimpleImmutableEntry<String, Integer>> unmodifiableTrie0 = new UnmodifiableTrie<String, AbstractMap.SimpleImmutableEntry<String, Integer>>((Trie<String, AbstractMap.SimpleImmutableEntry<String, Integer>>) patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>((Map<? extends String, ?>) unmodifiableTrie0);
      assertEquals(true, patriciaTrie1.isEmpty());
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.toString()Ljava/lang/String;: root-Branch
   * 2 org.apache.commons.collections4.trie.UnmodifiableTrie.<init>(Lorg/apache/commons/collections4/Trie;)V: I7 Branch 1 IFNONNULL L66 - true
   */

  @Test
  public void test21()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1272,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test21");
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      UnmodifiableTrie<String, AbstractMap.SimpleImmutableEntry<Object, String>> unmodifiableTrie0 = new UnmodifiableTrie<String, AbstractMap.SimpleImmutableEntry<Object, String>>((Trie<String, AbstractMap.SimpleImmutableEntry<Object, String>>) patriciaTrie0);
      String string0 = unmodifiableTrie0.toString();
      assertEquals("Trie[0]={\n}\n", string0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.trie.UnmodifiableTrie.<init>(Lorg/apache/commons/collections4/Trie;)V: I7 Branch 1 IFNONNULL L66 - false
   */

  @Test
  public void test22()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1273,"org.apache.commons.collections4.trie.UnmodifiableTrieEvoSuiteTest.test22");
      UnmodifiableTrie<Object, AbstractMap.SimpleImmutableEntry<Object, String>> unmodifiableTrie0 = null;
      try {
        unmodifiableTrie0 = new UnmodifiableTrie<Object, AbstractMap.SimpleImmutableEntry<Object, String>>((Trie<Object, AbstractMap.SimpleImmutableEntry<Object, String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trie must not be null
         //
      }
  }
}
