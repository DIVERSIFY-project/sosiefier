/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.junit.BeforeClass;

public class EntrySetMapIteratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.iterators.EntrySetMapIterator.reset()V: root-Branch
   * 2 org.apache.commons.collections4.iterators.EntrySetMapIterator.<init>(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(498,"org.apache.commons.collections4.iterators.EntrySetMapIteratorEvoSuiteTest.test0");
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      EntrySetMapIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> entrySetMapIterator0 = new EntrySetMapIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>((Map<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>) hashMap0);
      entrySetMapIterator0.reset();
      assertEquals("MapIterator[]", entrySetMapIterator0.toString());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.iterators.EntrySetMapIterator.hasNext()Z: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(499,"org.apache.commons.collections4.iterators.EntrySetMapIteratorEvoSuiteTest.test1");
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      EntrySetMapIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> entrySetMapIterator0 = new EntrySetMapIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>((Map<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) hashMap0);
      boolean boolean0 = entrySetMapIterator0.hasNext();
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.iterators.EntrySetMapIterator.remove()V: I4 Branch 1 IFNE L92 - true
   * 2 org.apache.commons.collections4.iterators.EntrySetMapIterator.next()Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(500,"org.apache.commons.collections4.iterators.EntrySetMapIteratorEvoSuiteTest.test2");
      HashMap<AbstractMap.SimpleEntry<String, String>, String> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, String>, String>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("YZoRW", "YZoRW");
      hashMap0.put(abstractMap_SimpleEntry0, "YZoRW");
      EntrySetMapIterator<AbstractMap.SimpleEntry<String, String>, String> entrySetMapIterator0 = new EntrySetMapIterator<AbstractMap.SimpleEntry<String, String>, String>((Map<AbstractMap.SimpleEntry<String, String>, String>) hashMap0);
      entrySetMapIterator0.next();
      entrySetMapIterator0.remove();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.iterators.EntrySetMapIterator.remove()V: I4 Branch 1 IFNE L92 - false
   */

  @Test
  public void test3()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(501,"org.apache.commons.collections4.iterators.EntrySetMapIteratorEvoSuiteTest.test3");
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      EntrySetMapIterator<Integer, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Integer>((Map<Integer, Integer>) hashMap0);
      // Undeclared exception!
      try {
        entrySetMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.iterators.EntrySetMapIterator.getKey()Ljava/lang/Object;: I4 Branch 2 IFNONNULL L109 - false
   */

  @Test
  public void test4()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(502,"org.apache.commons.collections4.iterators.EntrySetMapIteratorEvoSuiteTest.test4");
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      EntrySetMapIterator<Object, Object> entrySetMapIterator0 = new EntrySetMapIterator<Object, Object>((Map<Object, Object>) hashMap0);
      // Undeclared exception!
      try {
        entrySetMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
      }
  }

  //Test case number: 5
  /*
   * 4 covered goals:
   * 1 org.apache.commons.collections4.iterators.EntrySetMapIterator.getValue()Ljava/lang/Object;: I4 Branch 3 IFNONNULL L123 - true
   * 2 org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()Ljava/lang/String;: I4 Branch 5 IFNULL L163 - false
   * 3 org.apache.commons.collections4.iterators.EntrySetMapIterator.next()Ljava/lang/Object;: root-Branch
   * 4 org.apache.commons.collections4.iterators.EntrySetMapIterator.getKey()Ljava/lang/Object;: I4 Branch 2 IFNONNULL L109 - true
   */

  @Test
  public void test5()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(503,"org.apache.commons.collections4.iterators.EntrySetMapIteratorEvoSuiteTest.test5");
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>((Object) hashMap0, "}e;g>k>e=u");
      AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>>("}e;g>k>e=u", abstractMap_SimpleImmutableEntry0);
      abstractMap_SimpleImmutableEntry1.toString();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Object, String>((Object) "}e;g>k>e=u={}=}e;g>k>e=u", "}e;g>k>e=u={}=}e;g>k>e=u");
      hashMap0.put(abstractMap_SimpleImmutableEntry2, (Integer) null);
      EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> entrySetMapIterator0 = new EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>((Map<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>) hashMap0);
      entrySetMapIterator0.next();
      String string0 = entrySetMapIterator0.toString();
      assertEquals("MapIterator[}e;g>k>e=u={}=}e;g>k>e=u=}e;g>k>e=u={}=}e;g>k>e=u=null]", entrySetMapIterator0.toString());
      assertEquals("MapIterator[}e;g>k>e=u={}=}e;g>k>e=u=}e;g>k>e=u={}=}e;g>k>e=u=null]", string0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.iterators.EntrySetMapIterator.getValue()Ljava/lang/Object;: I4 Branch 3 IFNONNULL L123 - false
   */

  @Test
  public void test6()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(504,"org.apache.commons.collections4.iterators.EntrySetMapIteratorEvoSuiteTest.test6");
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String>();
      EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String> entrySetMapIterator0 = new EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String>((Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String>) hashMap0);
      // Undeclared exception!
      try {
        entrySetMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getValue() can only be called after next() and before remove()
         //
      }
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.iterators.EntrySetMapIterator.setValue(Ljava/lang/Object;)Ljava/lang/Object;: I4 Branch 4 IFNONNULL L140 - false
   */

  @Test
  public void test7()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(505,"org.apache.commons.collections4.iterators.EntrySetMapIteratorEvoSuiteTest.test7");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EntrySetMapIterator<String, String> entrySetMapIterator0 = new EntrySetMapIterator<String, String>((Map<String, String>) hashMap0);
      // Undeclared exception!
      try {
        entrySetMapIterator0.setValue("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator setValue() can only be called after next() and before remove()
         //
      }
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.iterators.EntrySetMapIterator.toString()Ljava/lang/String;: I4 Branch 5 IFNULL L163 - true
   * 2 org.apache.commons.collections4.iterators.EntrySetMapIterator.<init>(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(506,"org.apache.commons.collections4.iterators.EntrySetMapIteratorEvoSuiteTest.test8");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      EntrySetMapIterator<String, Integer> entrySetMapIterator0 = new EntrySetMapIterator<String, Integer>((Map<String, Integer>) hashMap0);
      String string0 = entrySetMapIterator0.toString();
      assertNotNull(string0);
      assertEquals("MapIterator[]", string0);
  }
}
