/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.NoSuchElementException;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.junit.BeforeClass;

public class AbstractMapIteratorDecoratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator.remove()V: root-Branch
   * 2 org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator.<init>(Lorg/apache/commons/collections4/MapIterator;)V: I7 Branch 1 IFNONNULL L43 - true
   */

  @Test
  public void test0()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(465,"org.apache.commons.collections4.iterators.AbstractMapIteratorDecoratorEvoSuiteTest.test0");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EntrySetMapIterator<String, String> entrySetMapIterator0 = new EntrySetMapIterator<String, String>((Map<String, String>) hashMap0);
      AbstractMapIteratorDecorator<String, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, String>((MapIterator<String, String>) entrySetMapIterator0);
      // Undeclared exception!
      try {
        abstractMapIteratorDecorator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
      }
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator.setValue(Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(466,"org.apache.commons.collections4.iterators.AbstractMapIteratorDecoratorEvoSuiteTest.test1");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      EntrySetMapIterator<String, Object> entrySetMapIterator0 = new EntrySetMapIterator<String, Object>((Map<String, Object>) hashMap0);
      AbstractMapIteratorDecorator<String, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, Object>((MapIterator<String, Object>) entrySetMapIterator0);
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.toString();
      // Undeclared exception!
      try {
        abstractMapIteratorDecorator0.setValue((Object) "[]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator setValue() can only be called after next() and before remove()
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator.getValue()Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(467,"org.apache.commons.collections4.iterators.AbstractMapIteratorDecoratorEvoSuiteTest.test2");
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      EntrySetMapIterator<Integer, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Integer>((Map<Integer, Integer>) hashMap0);
      AbstractMapIteratorDecorator<Integer, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, Integer>((MapIterator<Integer, Integer>) entrySetMapIterator0);
      // Undeclared exception!
      try {
        abstractMapIteratorDecorator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getValue() can only be called after next() and before remove()
         //
      }
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator.next()Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(468,"org.apache.commons.collections4.iterators.AbstractMapIteratorDecoratorEvoSuiteTest.test3");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EntrySetMapIterator<String, String> entrySetMapIterator0 = new EntrySetMapIterator<String, String>((Map<String, String>) hashMap0);
      AbstractMapIteratorDecorator<String, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, String>((MapIterator<String, String>) entrySetMapIterator0);
      // Undeclared exception!
      try {
        abstractMapIteratorDecorator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator.getKey()Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(469,"org.apache.commons.collections4.iterators.AbstractMapIteratorDecoratorEvoSuiteTest.test4");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EntrySetMapIterator<String, String> entrySetMapIterator0 = new EntrySetMapIterator<String, String>((Map<String, String>) hashMap0);
      AbstractMapIteratorDecorator<String, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, String>((MapIterator<String, String>) entrySetMapIterator0);
      // Undeclared exception!
      try {
        abstractMapIteratorDecorator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
      }
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator.hasNext()Z: root-Branch
   * 2 org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator.<init>(Lorg/apache/commons/collections4/MapIterator;)V: I7 Branch 1 IFNONNULL L43 - true
   */

  @Test
  public void test5()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(470,"org.apache.commons.collections4.iterators.AbstractMapIteratorDecoratorEvoSuiteTest.test5");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EntrySetMapIterator<String, String> entrySetMapIterator0 = new EntrySetMapIterator<String, String>((Map<String, String>) hashMap0);
      AbstractMapIteratorDecorator<String, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, String>((MapIterator<String, String>) entrySetMapIterator0);
      boolean boolean0 = abstractMapIteratorDecorator0.hasNext();
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator.<init>(Lorg/apache/commons/collections4/MapIterator;)V: I7 Branch 1 IFNONNULL L43 - false
   */

  @Test
  public void test6()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(471,"org.apache.commons.collections4.iterators.AbstractMapIteratorDecoratorEvoSuiteTest.test6");
      AbstractMapIteratorDecorator<Integer, Object> abstractMapIteratorDecorator0 = null;
      try {
        abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, Object>((MapIterator<Integer, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
      }
  }
}
