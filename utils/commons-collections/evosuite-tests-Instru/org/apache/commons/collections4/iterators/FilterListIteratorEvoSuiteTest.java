/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.iterators.FilterListIterator;
import org.junit.BeforeClass;

public class FilterListIteratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.iterators.FilterListIterator.setListIterator(Ljava/util/ListIterator;)V: root-Branch
   * 2 org.apache.commons.collections4.iterators.FilterListIterator.<init>()V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(521,"org.apache.commons.collections4.iterators.FilterListIteratorEvoSuiteTest.test0");
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      assertEquals(false, filterListIterator0.hasNext());
      
      filterListIterator0.setListIterator((ListIterator<?>) filterListIterator0);
      assertEquals(-1, filterListIterator0.previousIndex());
      assertEquals(0, filterListIterator0.nextIndex());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.iterators.FilterListIterator.getListIterator()Ljava/util/ListIterator;: root-Branch
   * 2 org.apache.commons.collections4.iterators.FilterListIterator.<init>(Lorg/apache/commons/collections4/Predicate;)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(522,"org.apache.commons.collections4.iterators.FilterListIteratorEvoSuiteTest.test1");
      Predicate<Object> predicate0 = NotNullPredicate.INSTANCE;
      NullIsFalsePredicate<String> nullIsFalsePredicate0 = new NullIsFalsePredicate<String>(predicate0);
      FilterListIterator<String> filterListIterator0 = new FilterListIterator<String>((Predicate<? super String>) nullIsFalsePredicate0);
      assertEquals(false, filterListIterator0.hasNext());
      
      filterListIterator0.getListIterator();
      assertEquals(-1, filterListIterator0.previousIndex());
      assertEquals(0, filterListIterator0.nextIndex());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.iterators.FilterListIterator.remove()V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(524,"org.apache.commons.collections4.iterators.FilterListIteratorEvoSuiteTest.test2");
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      assertEquals(false, filterListIterator0.hasNext());
      
      // Undeclared exception!
      try {
        filterListIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.remove() is not supported.
         //
      }
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.iterators.FilterListIterator.set(Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(525,"org.apache.commons.collections4.iterators.FilterListIteratorEvoSuiteTest.test3");
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      assertEquals(false, filterListIterator0.hasNext());
      
      Object object0 = new Object();
      // Undeclared exception!
      try {
        filterListIterator0.set(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.set(Object) is not supported.
         //
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.iterators.FilterListIterator.add(Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(526,"org.apache.commons.collections4.iterators.FilterListIteratorEvoSuiteTest.test4");
      FilterListIterator<String> filterListIterator0 = new FilterListIterator<String>();
      assertEquals(false, filterListIterator0.hasNext());
      
      // Undeclared exception!
      try {
        filterListIterator0.add("Closure collection must not be null");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.add(Object) is not supported.
         //
      }
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.iterators.FilterListIterator.previousIndex()I: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(527,"org.apache.commons.collections4.iterators.FilterListIteratorEvoSuiteTest.test5");
      FilterListIterator<String> filterListIterator0 = new FilterListIterator<String>();
      assertEquals(false, filterListIterator0.hasNext());
      
      int int0 = filterListIterator0.previousIndex();
      assertEquals((-1), int0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.iterators.FilterListIterator.getPredicate()Lorg/apache/commons/collections4/Predicate;: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(528,"org.apache.commons.collections4.iterators.FilterListIteratorEvoSuiteTest.test6");
      FilterListIterator<String> filterListIterator0 = new FilterListIterator<String>();
      assertEquals(false, filterListIterator0.hasNext());
      
      filterListIterator0.getPredicate();
      assertEquals(-1, filterListIterator0.previousIndex());
      assertEquals(0, filterListIterator0.nextIndex());
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.iterators.FilterListIterator.nextIndex()I: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(529,"org.apache.commons.collections4.iterators.FilterListIteratorEvoSuiteTest.test7");
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      assertEquals(false, filterListIterator0.hasNext());
      
      int int0 = filterListIterator0.nextIndex();
      assertEquals(0, int0);
  }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 org.apache.commons.collections4.iterators.FilterListIterator.setPredicate(Lorg/apache/commons/collections4/Predicate;)V: root-Branch
   * 2 org.apache.commons.collections4.iterators.FilterListIterator.<init>(Lorg/apache/commons/collections4/Predicate;)V: root-Branch
   * 3 org.apache.commons.collections4.iterators.FilterListIterator.<init>(Ljava/util/ListIterator;Lorg/apache/commons/collections4/Predicate;)V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(530,"org.apache.commons.collections4.iterators.FilterListIteratorEvoSuiteTest.test8");
      Predicate<Object> predicate0 = NotNullPredicate.INSTANCE;
      NullIsFalsePredicate<String> nullIsFalsePredicate0 = new NullIsFalsePredicate<String>(predicate0);
      FilterListIterator<String> filterListIterator0 = new FilterListIterator<String>((Predicate<? super String>) nullIsFalsePredicate0);
      assertEquals(false, filterListIterator0.hasNext());
      
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>((ListIterator<?>) filterListIterator0, (Predicate<? super Object>) predicate0);
      assertEquals(false, filterListIterator1.hasNext());
      
      filterListIterator1.setPredicate(predicate0);
      assertEquals(0, filterListIterator1.nextIndex());
      assertEquals(0, filterListIterator0.nextIndex());
      assertEquals(-1, filterListIterator0.previousIndex());
  }

  //Test case number: 9
  /*
   * 9 covered goals:
   * 1 org.apache.commons.collections4.iterators.FilterListIterator.hasPrevious()Z: I4 Branch 3 IFNE L125 - false
   * 2 org.apache.commons.collections4.iterators.FilterListIterator.hasPrevious()Z: I7 Branch 4 IFEQ L125 - true
   * 3 org.apache.commons.collections4.iterators.FilterListIterator.previous()Ljava/lang/Object;: I4 Branch 7 IFNE L145 - false
   * 4 org.apache.commons.collections4.iterators.FilterListIterator.previous()Ljava/lang/Object;: I9 Branch 8 IFNE L146 - false
   * 5 org.apache.commons.collections4.iterators.FilterListIterator.setPreviousObject()Z: I4 Branch 14 IFEQ L252 - true
   * 6 org.apache.commons.collections4.iterators.FilterListIterator.setPreviousObject()Z: I26 Branch 16 IFNONNULL L260 - true
   * 7 org.apache.commons.collections4.iterators.FilterListIterator.setPreviousObject()Z: I26 Branch 16 IFNONNULL L260 - false
   * 8 org.apache.commons.collections4.iterators.FilterListIterator.setPreviousObject()Z: I36 Branch 17 IFEQ L263 - true
   * 9 org.apache.commons.collections4.iterators.FilterListIterator.<init>(Ljava/util/ListIterator;)V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(531,"org.apache.commons.collections4.iterators.FilterListIteratorEvoSuiteTest.test9");
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      assertEquals(false, filterListIterator0.hasNext());
      
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>((ListIterator<?>) filterListIterator0);
      assertEquals(false, filterListIterator1.hasNext());
      
      // Undeclared exception!
      try {
        filterListIterator1.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 10
  /*
   * 10 covered goals:
   * 1 org.apache.commons.collections4.iterators.FilterListIterator.next()Ljava/lang/Object;: I4 Branch 5 IFNE L129 - false
   * 2 org.apache.commons.collections4.iterators.FilterListIterator.next()Ljava/lang/Object;: I9 Branch 6 IFNE L130 - false
   * 3 org.apache.commons.collections4.iterators.FilterListIterator.setNextObject()Z: I26 Branch 11 IFNONNULL L228 - true
   * 4 org.apache.commons.collections4.iterators.FilterListIterator.setNextObject()Z: I36 Branch 12 IFEQ L231 - true
   * 5 org.apache.commons.collections4.iterators.FilterListIterator.<init>()V: root-Branch
   * 6 org.apache.commons.collections4.iterators.FilterListIterator.<init>(Ljava/util/ListIterator;)V: root-Branch
   * 7 org.apache.commons.collections4.iterators.FilterListIterator.hasNext()Z: I4 Branch 1 IFNE L121 - false
   * 8 org.apache.commons.collections4.iterators.FilterListIterator.hasNext()Z: I7 Branch 2 IFEQ L121 - true
   * 9 org.apache.commons.collections4.iterators.FilterListIterator.setNextObject()Z: I4 Branch 9 IFEQ L220 - true
   * 10 org.apache.commons.collections4.iterators.FilterListIterator.setNextObject()Z: I26 Branch 11 IFNONNULL L228 - false
   */

  @Test
  public void test10()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(523,"org.apache.commons.collections4.iterators.FilterListIteratorEvoSuiteTest.test10");
      FilterListIterator<String> filterListIterator0 = new FilterListIterator<String>();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>((ListIterator<?>) filterListIterator0);
      // Undeclared exception!
      try {
        filterListIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
