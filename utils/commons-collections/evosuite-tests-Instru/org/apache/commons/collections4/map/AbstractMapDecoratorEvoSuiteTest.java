/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Map;
import org.apache.commons.collections4.map.MultiKeyMap;
import org.apache.commons.collections4.map.MultiValueMap;
import org.apache.commons.collections4.map.PassiveExpiringMap;
import org.junit.BeforeClass;

public class AbstractMapDecoratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 org.apache.commons.collections4.map.AbstractMapDecorator.size()I: root-Branch
   * 2 org.apache.commons.collections4.map.AbstractMapDecorator.decorated()Ljava/util/Map;: root-Branch
   * 3 org.apache.commons.collections4.map.AbstractMapDecorator.<init>(Ljava/util/Map;)V: I7 Branch 1 IFNONNULL L61 - true
   */

  @Test
  public void test0()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(17,"org.apache.commons.collections4.map.AbstractMapDecoratorEvoSuiteTest.test0");
      PassiveExpiringMap<LinkedList<String>, LinkedList<String>> passiveExpiringMap0 = new PassiveExpiringMap<LinkedList<String>, LinkedList<String>>((-1407L));
      int int0 = passiveExpiringMap0.size();
      assertEquals(0, int0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.map.AbstractMapDecorator.values()Ljava/util/Collection;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(18,"org.apache.commons.collections4.map.AbstractMapDecoratorEvoSuiteTest.test1");
      PassiveExpiringMap<LinkedList<String>, LinkedList<String>> passiveExpiringMap0 = new PassiveExpiringMap<LinkedList<String>, LinkedList<String>>((-1407L));
      Collection<LinkedList<String>> collection0 = passiveExpiringMap0.values();
      assertEquals(0, collection0.size());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.map.AbstractMapDecorator.<init>(Ljava/util/Map;)V: I7 Branch 1 IFNONNULL L61 - false
   */

  @Test
  public void test2()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(19,"org.apache.commons.collections4.map.AbstractMapDecoratorEvoSuiteTest.test2");
      PassiveExpiringMap<LinkedList<AbstractMap.SimpleImmutableEntry<String, String>>, String> passiveExpiringMap0 = null;
      try {
        passiveExpiringMap0 = new PassiveExpiringMap<LinkedList<AbstractMap.SimpleImmutableEntry<String, String>>, String>((Map<LinkedList<AbstractMap.SimpleImmutableEntry<String, String>>, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Map must not be null
         //
      }
  }

  //Test case number: 3
  /*
   * 4 covered goals:
   * 1 org.apache.commons.collections4.map.AbstractMapDecorator.equals(Ljava/lang/Object;)Z: I4 Branch 2 IF_ACMPNE L127 - true
   * 2 org.apache.commons.collections4.map.AbstractMapDecorator.hashCode()I: root-Branch
   * 3 org.apache.commons.collections4.map.AbstractMapDecorator.decorated()Ljava/util/Map;: root-Branch
   * 4 org.apache.commons.collections4.map.AbstractMapDecorator.<init>(Ljava/util/Map;)V: I7 Branch 1 IFNONNULL L61 - true
   */

  @Test
  public void test3()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(20,"org.apache.commons.collections4.map.AbstractMapDecoratorEvoSuiteTest.test3");
      MultiValueMap<AbstractMap.SimpleImmutableEntry<LinkedList<String>, Integer>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<LinkedList<String>, Integer>, String>();
      multiValueMap0.hashCode();
      MultiKeyMap<Collection<AbstractMap.SimpleImmutableEntry<String, String>>, LinkedList<String>> multiKeyMap0 = new MultiKeyMap<Collection<AbstractMap.SimpleImmutableEntry<String, String>>, LinkedList<String>>();
      boolean boolean0 = multiKeyMap0.equals((Object) 0);
      assertEquals(false, boolean0);
  }
}
