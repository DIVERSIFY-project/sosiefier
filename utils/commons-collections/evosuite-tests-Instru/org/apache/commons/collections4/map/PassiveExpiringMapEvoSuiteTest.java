/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.map.PassiveExpiringMap;
import org.junit.BeforeClass;

public class PassiveExpiringMapEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
  } 


  //Test case number: 0
  /*
   * 6 covered goals:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap.keySet()Ljava/util/Set;: root-Branch
   * 2 org.apache.commons.collections4.map.PassiveExpiringMap.<init>(J)V: root-Branch
   * 3 org.apache.commons.collections4.map.PassiveExpiringMap.now()J: root-Branch
   * 4 org.apache.commons.collections4.map.PassiveExpiringMap.removeAllExpired(J)V: I11 Branch 9 IFEQ L472 - true
   * 5 org.apache.commons.collections4.map.PassiveExpiringMap.<init>(Lorg/apache/commons/collections4/map/PassiveExpiringMap$ExpirationPolicy;Ljava/util/Map;)V: I15 Branch 4 IFNONNULL L241 - true
   * 6 org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.<init>(J)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(182,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test0");
      PassiveExpiringMap<HashMap<String, String>, Object> passiveExpiringMap0 = new PassiveExpiringMap<HashMap<String, String>, Object>((-1480L));
      Set<HashMap<String, String>> set0 = passiveExpiringMap0.keySet();
      assertEquals(true, set0.isEmpty());
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap.containsValue(Ljava/lang/Object;)Z: root-Branch
   * 2 org.apache.commons.collections4.map.PassiveExpiringMap.<init>(Lorg/apache/commons/collections4/map/PassiveExpiringMap$ExpirationPolicy;)V: root-Branch
   * 3 org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.<init>(JLjava/util/concurrent/TimeUnit;)V: root-Branch
   * 4 org.apache.commons.collections4.map.PassiveExpiringMap.validateAndConvertToMillis(JLjava/util/concurrent/TimeUnit;)J: I3 Branch 3 IFNONNULL L196 - true
   */

  @Test
  public void test1()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(183,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test1");
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>((-1480L), timeUnit0);
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>((PassiveExpiringMap.ExpirationPolicy<Long, Long>) passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      Object object0 = new Object();
      boolean boolean0 = passiveExpiringMap0.containsValue(object0);
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap.values()Ljava/util/Collection;: root-Branch
   * 2 org.apache.commons.collections4.map.PassiveExpiringMap.<init>()V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(191,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test2");
      PassiveExpiringMap<AbstractMap.SimpleEntry<Long, Long>, AbstractMap.SimpleImmutableEntry<Long, Long>> passiveExpiringMap0 = new PassiveExpiringMap<AbstractMap.SimpleEntry<Long, Long>, AbstractMap.SimpleImmutableEntry<Long, Long>>();
      Collection<AbstractMap.SimpleImmutableEntry<Long, Long>> collection0 = passiveExpiringMap0.values();
      assertEquals(true, collection0.isEmpty());
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap.get(Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   * 2 org.apache.commons.collections4.map.PassiveExpiringMap.isExpired(JLjava/lang/Long;)Z: I3 Branch 5 IFNULL L404 - true
   * 3 org.apache.commons.collections4.map.PassiveExpiringMap.removeIfExpired(Ljava/lang/Object;J)V: I14 Branch 11 IFEQ L490 - true
   */

  @Test
  public void test3()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(192,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test3");
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>();
      PassiveExpiringMap<HashMap<String, Long>, Integer> passiveExpiringMap1 = new PassiveExpiringMap<HashMap<String, Long>, Integer>();
      passiveExpiringMap1.hashCode();
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleEntry<Integer, Long>, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleEntry<Integer, Long>, Long>((long) 0);
      PassiveExpiringMap<AbstractMap.SimpleEntry<Integer, Long>, Long> passiveExpiringMap2 = new PassiveExpiringMap<AbstractMap.SimpleEntry<Integer, Long>, Long>((PassiveExpiringMap.ExpirationPolicy<AbstractMap.SimpleEntry<Integer, Long>, Long>) passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      passiveExpiringMap2.get((Object) passiveExpiringMap0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap.size()I: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(193,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test4");
      PassiveExpiringMap<HashMap<String, String>, Object> passiveExpiringMap0 = new PassiveExpiringMap<HashMap<String, String>, Object>((-1480L));
      int int0 = passiveExpiringMap0.size();
      assertEquals(0, int0);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap.<init>(Ljava/util/Map;)V: root-Branch
   * 2 org.apache.commons.collections4.map.PassiveExpiringMap.<init>(JLjava/util/Map;)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(194,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test5");
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      PassiveExpiringMap<Long, Integer> passiveExpiringMap0 = new PassiveExpiringMap<Long, Integer>((Map<Long, Integer>) hashMap0);
      assertEquals(true, passiveExpiringMap0.isEmpty());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap.isEmpty()Z: root-Branch
   * 2 org.apache.commons.collections4.map.PassiveExpiringMap.<init>(JLjava/util/concurrent/TimeUnit;)V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(195,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test6");
      PassiveExpiringMap<HashMap<String, Long>, Integer> passiveExpiringMap0 = new PassiveExpiringMap<HashMap<String, Long>, Integer>();
      passiveExpiringMap0.hashCode();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      PassiveExpiringMap<AbstractMap.SimpleEntry<Integer, Long>, AbstractMap.SimpleEntry<String, Long>> passiveExpiringMap1 = new PassiveExpiringMap<AbstractMap.SimpleEntry<Integer, Long>, AbstractMap.SimpleEntry<String, Long>>((long) 0, timeUnit0);
      boolean boolean0 = passiveExpiringMap1.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap.remove(Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   * 2 org.apache.commons.collections4.map.PassiveExpiringMap.<init>(Lorg/apache/commons/collections4/map/PassiveExpiringMap$ExpirationPolicy;)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(196,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test7");
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Integer, Integer> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Integer, Integer>(210L);
      PassiveExpiringMap<Integer, Integer> passiveExpiringMap0 = new PassiveExpiringMap<Integer, Integer>((PassiveExpiringMap.ExpirationPolicy<Integer, Integer>) passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      Long.toString(210L);
      passiveExpiringMap0.remove((Object) "210");
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap.clear()V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(197,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test8");
      PassiveExpiringMap<HashMap<Long, Integer>, Integer> passiveExpiringMap0 = new PassiveExpiringMap<HashMap<Long, Integer>, Integer>();
      passiveExpiringMap0.clear();
      assertEquals("{}", passiveExpiringMap0.toString());
  }

  //Test case number: 9
  /*
   * 3 covered goals:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   * 2 org.apache.commons.collections4.map.PassiveExpiringMap.isExpired(JLjava/lang/Long;)Z: I3 Branch 5 IFNULL L404 - true
   * 3 org.apache.commons.collections4.map.PassiveExpiringMap.removeIfExpired(Ljava/lang/Object;J)V: I14 Branch 11 IFEQ L490 - true
   */

  @Test
  public void test9()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(198,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test9");
      PassiveExpiringMap<Integer, Integer> passiveExpiringMap0 = new PassiveExpiringMap<Integer, Integer>();
      boolean boolean0 = passiveExpiringMap0.containsKey((Object) passiveExpiringMap0);
      assertEquals(false, boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.<init>()V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(184,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test10");
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, AbstractMap.SimpleEntry<Integer, Long>> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, AbstractMap.SimpleEntry<Integer, Long>>();
  }

  //Test case number: 11
  /*
   * 13 covered goals:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(Ljava/lang/Object;Ljava/lang/Object;)J: I6 Branch 1 IFLT L138 - false
   * 2 org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(Ljava/lang/Object;Ljava/lang/Object;)J: I19 Branch 2 IFLE L141 - true
   * 3 org.apache.commons.collections4.map.PassiveExpiringMap.isExpired(JLjava/lang/Long;)Z: I3 Branch 5 IFNULL L404 - false
   * 4 org.apache.commons.collections4.map.PassiveExpiringMap.isExpired(JLjava/lang/Long;)Z: I14 Branch 6 IFLT L406 - true
   * 5 org.apache.commons.collections4.map.PassiveExpiringMap.putAll(Ljava/util/Map;)V: I9 Branch 8 IFEQ L447 - false
   * 6 org.apache.commons.collections4.map.PassiveExpiringMap.removeAllExpired(J)V: I11 Branch 9 IFEQ L472 - false
   * 7 org.apache.commons.collections4.map.PassiveExpiringMap.removeAllExpired(J)V: I26 Branch 10 IFEQ L474 - true
   * 8 org.apache.commons.collections4.map.PassiveExpiringMap.<init>(JLjava/util/Map;)V: root-Branch
   * 9 org.apache.commons.collections4.map.PassiveExpiringMap.putAll(Ljava/util/Map;)V: I9 Branch 8 IFEQ L447 - true
   * 10 org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(Ljava/lang/Object;Ljava/lang/Object;)J: I6 Branch 1 IFLT L138 - true
   * 11 org.apache.commons.collections4.map.PassiveExpiringMap.entrySet()Ljava/util/Set;: root-Branch
   * 12 org.apache.commons.collections4.map.PassiveExpiringMap.put(Ljava/lang/Object;Ljava/lang/Object;J)Ljava/lang/Object;: root-Branch
   * 13 org.apache.commons.collections4.map.PassiveExpiringMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(185,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test11");
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      HashMap<?, ?> hashMap1 = (HashMap<?, ?>)hashMap0.clone();
      Long.toString(210L);
      PassiveExpiringMap<String, Object> passiveExpiringMap0 = new PassiveExpiringMap<String, Object>();
      PassiveExpiringMap<String, Object> passiveExpiringMap1 = new PassiveExpiringMap<String, Object>(210L, (Map<String, Object>) passiveExpiringMap0);
      passiveExpiringMap0.put("210", (Object) hashMap1);
      passiveExpiringMap1.putAll((Map<? extends String, ?>) passiveExpiringMap0);
      assertEquals(false, passiveExpiringMap0.isEmpty());
      assertEquals("{210={}}", passiveExpiringMap1.toString());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(Ljava/lang/Object;Ljava/lang/Object;)J: I19 Branch 2 IFLE L141 - false
   */

  @Test
  public void test12()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(186,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test12");
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, HashMap<Long, Long>> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, HashMap<Long, Long>>(9223372036854775807L);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      long long0 = passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0.expirationTime("", hashMap0);
      assertEquals((-1L), long0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap.validateAndConvertToMillis(JLjava/util/concurrent/TimeUnit;)J: I3 Branch 3 IFNONNULL L196 - false
   */

  @Test
  public void test13()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(187,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test13");
      Long long0 = new Long((-1053L));
      PassiveExpiringMap<Long, Integer> passiveExpiringMap0 = null;
      try {
        passiveExpiringMap0 = new PassiveExpiringMap<Long, Integer>((long) long0, (TimeUnit) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time unit must not be null
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap.<init>(Lorg/apache/commons/collections4/map/PassiveExpiringMap$ExpirationPolicy;Ljava/util/Map;)V: I15 Branch 4 IFNONNULL L241 - false
   */

  @Test
  public void test14()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(188,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test14");
      PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Long, Integer>, AbstractMap.SimpleEntry<Integer, Long>> passiveExpiringMap0 = null;
      try {
        passiveExpiringMap0 = new PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Long, Integer>, AbstractMap.SimpleEntry<Integer, Long>>((PassiveExpiringMap.ExpirationPolicy<AbstractMap.SimpleImmutableEntry<Long, Integer>, AbstractMap.SimpleEntry<Integer, Long>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Policy must not be null.
         //
      }
  }

  //Test case number: 15
  /*
   * 3 covered goals:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap.isExpired(JLjava/lang/Long;)Z: I14 Branch 6 IFLT L406 - false
   * 2 org.apache.commons.collections4.map.PassiveExpiringMap.isExpired(JLjava/lang/Long;)Z: I18 Branch 7 IFLT L406 - true
   * 3 org.apache.commons.collections4.map.PassiveExpiringMap.removeAllExpired(J)V: I26 Branch 10 IFEQ L474 - true
   */

  @Test
  public void test15()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(189,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test15");
      PassiveExpiringMap<HashMap<String, Long>, Integer> passiveExpiringMap0 = new PassiveExpiringMap<HashMap<String, Long>, Integer>();
      passiveExpiringMap0.hashCode();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      PassiveExpiringMap<Integer, AbstractMap.SimpleEntry<Long, Integer>> passiveExpiringMap1 = new PassiveExpiringMap<Integer, AbstractMap.SimpleEntry<Long, Integer>>(1L, timeUnit0);
      AbstractMap.SimpleEntry<Long, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, Integer>((Long) 1L, (Integer) 0);
      passiveExpiringMap1.put((Integer) 0, abstractMap_SimpleEntry0);
      MapIterator<Integer, AbstractMap.SimpleEntry<Long, Integer>> mapIterator0 = passiveExpiringMap1.mapIterator();
      assertEquals("{0=1=0}", passiveExpiringMap1.toString());
      assertEquals(true, mapIterator0.hasNext());
  }

  //Test case number: 16
  /*
   * 18 covered goals:
   * 1 org.apache.commons.collections4.map.PassiveExpiringMap.isExpired(JLjava/lang/Long;)Z: I18 Branch 7 IFLT L406 - false
   * 2 org.apache.commons.collections4.map.PassiveExpiringMap.removeAllExpired(J)V: I26 Branch 10 IFEQ L474 - false
   * 3 org.apache.commons.collections4.map.PassiveExpiringMap.entrySet()Ljava/util/Set;: root-Branch
   * 4 org.apache.commons.collections4.map.PassiveExpiringMap.put(Ljava/lang/Object;Ljava/lang/Object;J)Ljava/lang/Object;: root-Branch
   * 5 org.apache.commons.collections4.map.PassiveExpiringMap.<init>()V: root-Branch
   * 6 org.apache.commons.collections4.map.PassiveExpiringMap.<init>(JLjava/util/concurrent/TimeUnit;)V: root-Branch
   * 7 org.apache.commons.collections4.map.PassiveExpiringMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   * 8 org.apache.commons.collections4.map.PassiveExpiringMap.<init>(J)V: root-Branch
   * 9 org.apache.commons.collections4.map.PassiveExpiringMap.now()J: root-Branch
   * 10 org.apache.commons.collections4.map.PassiveExpiringMap.isExpired(JLjava/lang/Long;)Z: I3 Branch 5 IFNULL L404 - false
   * 11 org.apache.commons.collections4.map.PassiveExpiringMap.isExpired(JLjava/lang/Long;)Z: I14 Branch 6 IFLT L406 - false
   * 12 org.apache.commons.collections4.map.PassiveExpiringMap.removeAllExpired(J)V: I11 Branch 9 IFEQ L472 - true
   * 13 org.apache.commons.collections4.map.PassiveExpiringMap.removeAllExpired(J)V: I11 Branch 9 IFEQ L472 - false
   * 14 org.apache.commons.collections4.map.PassiveExpiringMap.validateAndConvertToMillis(JLjava/util/concurrent/TimeUnit;)J: I3 Branch 3 IFNONNULL L196 - true
   * 15 org.apache.commons.collections4.map.PassiveExpiringMap.<init>(Lorg/apache/commons/collections4/map/PassiveExpiringMap$ExpirationPolicy;Ljava/util/Map;)V: I15 Branch 4 IFNONNULL L241 - true
   * 16 org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.<init>(J)V: root-Branch
   * 17 org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(Ljava/lang/Object;Ljava/lang/Object;)J: I6 Branch 1 IFLT L138 - false
   * 18 org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy.expirationTime(Ljava/lang/Object;Ljava/lang/Object;)J: I19 Branch 2 IFLE L141 - true
   */

  @Test
  public void test16()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(190,"org.apache.commons.collections4.map.PassiveExpiringMapEvoSuiteTest.test16");
      PassiveExpiringMap<HashMap<String, Long>, Integer> passiveExpiringMap0 = new PassiveExpiringMap<HashMap<String, Long>, Integer>();
      passiveExpiringMap0.hashCode();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PassiveExpiringMap<Integer, AbstractMap.SimpleEntry<Long, Integer>> passiveExpiringMap1 = new PassiveExpiringMap<Integer, AbstractMap.SimpleEntry<Long, Integer>>(1L, timeUnit0);
      AbstractMap.SimpleEntry<Long, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, Integer>((Long) 1L, (Integer) 0);
      passiveExpiringMap1.put((Integer) 0, abstractMap_SimpleEntry0);
      passiveExpiringMap1.mapIterator();
      assertEquals("{}", passiveExpiringMap1.toString());
      assertEquals(0, passiveExpiringMap1.size());
  }
}
