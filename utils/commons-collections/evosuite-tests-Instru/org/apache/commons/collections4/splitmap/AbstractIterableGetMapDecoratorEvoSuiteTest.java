/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.commons.collections4.splitmap;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator;
import org.junit.BeforeClass;

public class AbstractIterableGetMapDecoratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.remove(Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   * 2 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.decorated()Ljava/util/Map;: root-Branch
   * 3 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.<init>(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1207,"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecoratorEvoSuiteTest.test0");
      HashMap<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>>((Map<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) hashMap0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = abstractIterableGetMapDecorator0.remove((Object) "");
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.size()I: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1208,"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecoratorEvoSuiteTest.test1");
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>((Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>) hashMap0);
      int int0 = abstractIterableGetMapDecorator0.size();
      assertEquals(0, int0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.get(Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1212,"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecoratorEvoSuiteTest.test2");
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>((Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>) hashMap0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = abstractIterableGetMapDecorator0.get((Object) "");
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1213,"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecoratorEvoSuiteTest.test3");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, Object>((Map<String, Object>) hashMap0);
      String string0 = abstractIterableGetMapDecorator0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.isEmpty()Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1214,"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecoratorEvoSuiteTest.test4");
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      AbstractIterableGetMapDecorator<Object, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, Integer>((Map<Object, Integer>) hashMap0);
      boolean boolean0 = abstractIterableGetMapDecorator0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.containsKey(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1215,"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecoratorEvoSuiteTest.test5");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      AbstractIterableGetMapDecorator<Object, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, String>((Map<Object, String>) hashMap0);
      Object object0 = new Object();
      boolean boolean0 = abstractIterableGetMapDecorator0.containsKey(object0);
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.containsValue(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1216,"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecoratorEvoSuiteTest.test6");
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Object>, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Object>, Object>((Map<AbstractMap.SimpleEntry<String, Object>, Object>) null);
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      hashMap0.toString();
      // Undeclared exception!
      try {
        abstractIterableGetMapDecorator0.containsValue((Object) "{}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.values()Ljava/util/Collection;: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1217,"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecoratorEvoSuiteTest.test7");
      HashMap<Integer, AbstractMap.SimpleEntry<Integer, Object>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleEntry<Integer, Object>>();
      AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Integer, Object>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Integer, Object>>((Map<Integer, AbstractMap.SimpleEntry<Integer, Object>>) hashMap0);
      Collection<AbstractMap.SimpleEntry<Integer, Object>> collection0 = abstractIterableGetMapDecorator0.values();
      assertEquals(0, collection0.size());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.keySet()Ljava/util/Set;: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1218,"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecoratorEvoSuiteTest.test8");
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>((Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>) hashMap0);
      Set<AbstractMap.SimpleImmutableEntry<Object, Integer>> set0 = abstractIterableGetMapDecorator0.keySet();
      assertEquals(0, set0.size());
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.mapIterator()Lorg/apache/commons/collections4/MapIterator;: root-Branch
   * 2 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.entrySet()Ljava/util/Set;: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1219,"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecoratorEvoSuiteTest.test9");
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<String, Object>, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<String, Object>, String>((Map<AbstractMap.SimpleImmutableEntry<String, Object>, String>) hashMap0);
      MapIterator<AbstractMap.SimpleImmutableEntry<String, Object>, String> mapIterator0 = abstractIterableGetMapDecorator0.mapIterator();
      assertEquals(false, mapIterator0.hasNext());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.hashCode()I: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1209,"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecoratorEvoSuiteTest.test10");
      HashMap<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>> hashMap0 = new HashMap<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>();
      AbstractIterableGetMapDecorator<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>((Map<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>) hashMap0);
      int int0 = abstractIterableGetMapDecorator0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.equals(Ljava/lang/Object;)Z: I4 Branch 1 IF_ACMPNE L109 - true
   * 2 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.decorated()Ljava/util/Map;: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1210,"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecoratorEvoSuiteTest.test11");
      HashMap<AbstractMap.SimpleEntry<String, String>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, String>, Integer>();
      hashMap0.toString();
      HashMap<AbstractMap.SimpleEntry<Integer, Integer>, Integer> hashMap1 = new HashMap<AbstractMap.SimpleEntry<Integer, Integer>, Integer>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, Integer>, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, Integer>, Integer>((Map<AbstractMap.SimpleEntry<Integer, Integer>, Integer>) hashMap1);
      boolean boolean0 = abstractIterableGetMapDecorator0.equals((Object) "{}");
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.equals(Ljava/lang/Object;)Z: I4 Branch 1 IF_ACMPNE L109 - false
   * 2 org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator.<init>(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(1211,"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecoratorEvoSuiteTest.test12");
      HashMap<String, AbstractMap.SimpleEntry<String, Integer>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<String, Integer>>(1714, 1714);
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<String, Integer>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<String, Integer>>((Map<String, AbstractMap.SimpleEntry<String, Integer>>) hashMap0);
      boolean boolean0 = abstractIterableGetMapDecorator0.equals((Object) abstractIterableGetMapDecorator0);
      assertEquals(true, boolean0);
  }
}
