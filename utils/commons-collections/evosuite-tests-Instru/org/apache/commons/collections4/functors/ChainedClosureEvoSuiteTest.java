/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ForClosure;
import org.junit.BeforeClass;

public class ChainedClosureEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
  } 


  //Test case number: 0
  /*
   * 5 covered goals:
   * 1 org.apache.commons.collections4.functors.ChainedClosure.<init>([Lorg/apache/commons/collections4/Closure;)V: root-Branch
   * 2 org.apache.commons.collections4.functors.ChainedClosure.chainedClosure([Lorg/apache/commons/collections4/Closure;)Lorg/apache/commons/collections4/Closure;: I8 Branch 1 IFNE L49 - true
   * 3 org.apache.commons.collections4.functors.ChainedClosure.chainedClosure(Ljava/util/Collection;)Lorg/apache/commons/collections4/Closure;: I3 Branch 2 IFNONNULL L68 - true
   * 4 org.apache.commons.collections4.functors.ChainedClosure.chainedClosure(Ljava/util/Collection;)Lorg/apache/commons/collections4/Closure;: I15 Branch 3 IFNE L71 - false
   * 5 org.apache.commons.collections4.functors.ChainedClosure.<init>(Z[Lorg/apache/commons/collections4/Closure;)V: I8 Branch 5 IFEQ L92 - false
   */

  @Test
  public void test0()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(693,"org.apache.commons.collections4.functors.ChainedClosureEvoSuiteTest.test0");
      Closure<Integer>[] closureArray0 = (Closure<Integer>[]) Array.newInstance(Closure.class, 1);
      LinkedList<Closure<Integer>> linkedList0 = new LinkedList<Closure<Integer>>();
      Closure<Integer> closure0 = ChainedClosure.chainedClosure((Collection<Closure<Integer>>) linkedList0);
      assertNotNull(closure0);
      
      closureArray0[0] = closure0;
      Closure<Integer> closure1 = ChainedClosure.chainedClosure((Closure<? super Integer>[]) closureArray0);
      assertNotSame(closure1, closure0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.functors.ChainedClosure.getClosures()[Lorg/apache/commons/collections4/Closure;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(694,"org.apache.commons.collections4.functors.ChainedClosureEvoSuiteTest.test1");
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      ChainedClosure<ForClosure<Object>> chainedClosure0 = new ChainedClosure<ForClosure<Object>>(closureArray0);
      Closure<? super ForClosure<Object>>[] closureArray1 = chainedClosure0.getClosures();
      assertNotNull(closureArray1);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.functors.ChainedClosure.chainedClosure(Ljava/util/Collection;)Lorg/apache/commons/collections4/Closure;: I3 Branch 2 IFNONNULL L68 - false
   */

  @Test
  public void test2()  throws Throwable  {
      // Undeclared exception!
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(695,"org.apache.commons.collections4.functors.ChainedClosureEvoSuiteTest.test2");
      try {
        ChainedClosure.chainedClosure((Collection<Closure<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Closure collection must not be null
         //
      }
  }

  //Test case number: 3
  /*
   * 6 covered goals:
   * 1 org.apache.commons.collections4.functors.ChainedClosure.execute(Ljava/lang/Object;)V: I15 Branch 6 IF_ICMPGE L111 - true
   * 2 org.apache.commons.collections4.functors.ChainedClosure.execute(Ljava/lang/Object;)V: I15 Branch 6 IF_ICMPGE L111 - false
   * 3 org.apache.commons.collections4.functors.ChainedClosure.<init>([Lorg/apache/commons/collections4/Closure;)V: root-Branch
   * 4 org.apache.commons.collections4.functors.ChainedClosure.chainedClosure(Ljava/util/Collection;)Lorg/apache/commons/collections4/Closure;: I3 Branch 2 IFNONNULL L68 - true
   * 5 org.apache.commons.collections4.functors.ChainedClosure.chainedClosure(Ljava/util/Collection;)Lorg/apache/commons/collections4/Closure;: I15 Branch 3 IFNE L71 - false
   * 6 org.apache.commons.collections4.functors.ChainedClosure.<init>(Z[Lorg/apache/commons/collections4/Closure;)V: I8 Branch 5 IFEQ L92 - false
   */

  @Test
  public void test3()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(696,"org.apache.commons.collections4.functors.ChainedClosureEvoSuiteTest.test3");
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<Closure<Object>>) linkedList0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      closureArray0[0] = closure0;
      closureArray0[1] = closure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      Object object0 = new Object();
      chainedClosure0.execute(object0);
  }
}
