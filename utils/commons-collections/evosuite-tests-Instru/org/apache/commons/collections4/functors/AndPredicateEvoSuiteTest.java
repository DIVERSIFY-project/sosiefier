/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.junit.BeforeClass;

public class AndPredicateEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.functors.AndPredicate.getPredicates()[Lorg/apache/commons/collections4/Predicate;: root-Branch
   * 2 org.apache.commons.collections4.functors.AndPredicate.<init>(Lorg/apache/commons/collections4/Predicate;Lorg/apache/commons/collections4/Predicate;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(682,"org.apache.commons.collections4.functors.AndPredicateEvoSuiteTest.test0");
      Predicate<Object> predicate0 = NotNullPredicate.INSTANCE;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      AndPredicate<String> andPredicate0 = new AndPredicate<String>((Predicate<? super String>) predicate0, (Predicate<? super String>) onePredicate0);
      Predicate<? super String>[] predicateArray1 = andPredicate0.getPredicates();
      assertNotNull(predicateArray1);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.functors.AndPredicate.andPredicate(Lorg/apache/commons/collections4/Predicate;Lorg/apache/commons/collections4/Predicate;)Lorg/apache/commons/collections4/Predicate;: I3 Branch 1 IFNULL L50 - true
   */

  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(683,"org.apache.commons.collections4.functors.AndPredicateEvoSuiteTest.test1");
      try {
        AndPredicate.andPredicate((Predicate<? super Integer>) null, (Predicate<? super Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
      }
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.functors.AndPredicate.andPredicate(Lorg/apache/commons/collections4/Predicate;Lorg/apache/commons/collections4/Predicate;)Lorg/apache/commons/collections4/Predicate;: I3 Branch 1 IFNULL L50 - false
   * 2 org.apache.commons.collections4.functors.AndPredicate.andPredicate(Lorg/apache/commons/collections4/Predicate;Lorg/apache/commons/collections4/Predicate;)Lorg/apache/commons/collections4/Predicate;: I5 Branch 2 IFNONNULL L50 - true
   */

  @Test
  public void test2()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(684,"org.apache.commons.collections4.functors.AndPredicateEvoSuiteTest.test2");
      Predicate<Object> predicate0 = FalsePredicate.INSTANCE;
      Predicate<String> predicate1 = AndPredicate.andPredicate((Predicate<? super String>) predicate0, (Predicate<? super String>) predicate0);
      assertNotNull(predicate1);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.functors.AndPredicate.andPredicate(Lorg/apache/commons/collections4/Predicate;Lorg/apache/commons/collections4/Predicate;)Lorg/apache/commons/collections4/Predicate;: I5 Branch 2 IFNONNULL L50 - false
   * 2 org.apache.commons.collections4.functors.AndPredicate.andPredicate(Lorg/apache/commons/collections4/Predicate;Lorg/apache/commons/collections4/Predicate;)Lorg/apache/commons/collections4/Predicate;: I3 Branch 1 IFNULL L50 - false
   */

  @Test
  public void test3()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(685,"org.apache.commons.collections4.functors.AndPredicateEvoSuiteTest.test3");
      Predicate<Object> predicate0 = FalsePredicate.INSTANCE;
      // Undeclared exception!
      try {
        AndPredicate.andPredicate((Predicate<? super String>) predicate0, (Predicate<? super String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.functors.AndPredicate.evaluate(Ljava/lang/Object;)Z: I6 Branch 3 IFEQ L76 - true
   */

  @Test
  public void test4()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(686,"org.apache.commons.collections4.functors.AndPredicateEvoSuiteTest.test4");
      Predicate<Object> predicate0 = FalsePredicate.INSTANCE;
      AndPredicate<String> andPredicate0 = new AndPredicate<String>(predicate0, predicate0);
      boolean boolean0 = andPredicate0.evaluate("PWedicate must not be null");
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 4 covered goals:
   * 1 org.apache.commons.collections4.functors.AndPredicate.evaluate(Ljava/lang/Object;)Z: I11 Branch 4 IFEQ L76 - true
   * 2 org.apache.commons.collections4.functors.AndPredicate.evaluate(Ljava/lang/Object;)Z: I11 Branch 4 IFEQ L76 - false
   * 3 org.apache.commons.collections4.functors.AndPredicate.<init>(Lorg/apache/commons/collections4/Predicate;Lorg/apache/commons/collections4/Predicate;)V: root-Branch
   * 4 org.apache.commons.collections4.functors.AndPredicate.evaluate(Ljava/lang/Object;)Z: I6 Branch 3 IFEQ L76 - false
   */

  @Test
  public void test5()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(687,"org.apache.commons.collections4.functors.AndPredicateEvoSuiteTest.test5");
      Predicate<Object> predicate0 = NotNullPredicate.INSTANCE;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = (Predicate<Object>) andPredicate0;
      predicateArray0[1] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      AndPredicate<String> andPredicate1 = new AndPredicate<String>((Predicate<? super String>) predicate0, (Predicate<? super String>) onePredicate0);
      boolean boolean0 = andPredicate1.evaluate("BQk%srM]7XS");
      assertEquals(false, boolean0);
  }
}
