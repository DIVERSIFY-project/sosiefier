/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.junit.BeforeClass;

public class ClosureTransformerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.functors.ClosureTransformer.getClosure()Lorg/apache/commons/collections4/Closure;: root-Branch
   * 2 org.apache.commons.collections4.functors.ClosureTransformer.<init>(Lorg/apache/commons/collections4/Closure;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(701,"org.apache.commons.collections4.functors.ClosureTransformerEvoSuiteTest.test0");
      ClosureTransformer<Object> closureTransformer0 = new ClosureTransformer<Object>((Closure<? super Object>) null);
      Closure<? super Object> closure0 = closureTransformer0.getClosure();
      assertNull(closure0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.functors.ClosureTransformer.transform(Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(702,"org.apache.commons.collections4.functors.ClosureTransformerEvoSuiteTest.test1");
      Closure<Integer>[] closureArray0 = (Closure<Integer>[]) Array.newInstance(Closure.class, 5);
      ChainedClosure<Integer> chainedClosure0 = new ChainedClosure<Integer>(closureArray0);
      ClosureTransformer<Integer> closureTransformer0 = new ClosureTransformer<Integer>((Closure<? super Integer>) chainedClosure0);
      // Undeclared exception!
      try {
        closureTransformer0.transform((Integer) (-557));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.functors.ClosureTransformer.closureTransformer(Lorg/apache/commons/collections4/Closure;)Lorg/apache/commons/collections4/Transformer;: I3 Branch 1 IFNONNULL L48 - true
   * 2 org.apache.commons.collections4.functors.ClosureTransformer.<init>(Lorg/apache/commons/collections4/Closure;)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(703,"org.apache.commons.collections4.functors.ClosureTransformerEvoSuiteTest.test2");
      Transformer<Object, Object> transformer0 = CloneTransformer.INSTANCE;
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      Transformer<Object, Object> transformer1 = ClosureTransformer.closureTransformer((Closure<? super Object>) transformerClosure0);
      assertFalse(transformer0.equals(transformer1));
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.functors.ClosureTransformer.closureTransformer(Lorg/apache/commons/collections4/Closure;)Lorg/apache/commons/collections4/Transformer;: I3 Branch 1 IFNONNULL L48 - false
   */

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(704,"org.apache.commons.collections4.functors.ClosureTransformerEvoSuiteTest.test3");
      try {
        ClosureTransformer.closureTransformer((Closure<? super Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Closure must not be null
         //
      }
  }
}
