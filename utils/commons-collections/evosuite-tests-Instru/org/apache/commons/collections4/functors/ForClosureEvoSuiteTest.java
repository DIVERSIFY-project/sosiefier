/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.FunctorException;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.NOPClosure;
import org.junit.BeforeClass;

public class ForClosureEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.functors.ForClosure.getClosure()Lorg/apache/commons/collections4/Closure;: root-Branch
   * 2 org.apache.commons.collections4.functors.ForClosure.<init>(ILorg/apache/commons/collections4/Closure;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(730,"org.apache.commons.collections4.functors.ForClosureEvoSuiteTest.test0");
      ForClosure<Object> forClosure0 = new ForClosure<Object>(1, (Closure<? super Object>) null);
      forClosure0.getClosure();
      assertEquals(1, forClosure0.getCount());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.functors.ForClosure.getCount()I: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(731,"org.apache.commons.collections4.functors.ForClosureEvoSuiteTest.test1");
      Closure<Object> closure0 = ExceptionClosure.INSTANCE;
      ForClosure<Integer> forClosure0 = new ForClosure<Integer>((-1615), (Closure<? super Integer>) closure0);
      int int0 = forClosure0.getCount();
      assertEquals((-1615), int0);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.functors.ForClosure.forClosure(ILorg/apache/commons/collections4/Closure;)Lorg/apache/commons/collections4/Closure;: I3 Branch 1 IFLE L52 - false
   * 2 org.apache.commons.collections4.functors.ForClosure.forClosure(ILorg/apache/commons/collections4/Closure;)Lorg/apache/commons/collections4/Closure;: I5 Branch 2 IFNONNULL L52 - false
   */

  @Test
  public void test2()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(732,"org.apache.commons.collections4.functors.ForClosureEvoSuiteTest.test2");
      Closure<Object> closure0 = ForClosure.forClosure(1, (Closure<? super Object>) null);
      assertNotNull(closure0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.functors.ForClosure.forClosure(ILorg/apache/commons/collections4/Closure;)Lorg/apache/commons/collections4/Closure;: I5 Branch 2 IFNONNULL L52 - true
   * 2 org.apache.commons.collections4.functors.ForClosure.forClosure(ILorg/apache/commons/collections4/Closure;)Lorg/apache/commons/collections4/Closure;: I14 Branch 3 IF_ICMPNE L55 - false
   */

  @Test
  public void test3()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(733,"org.apache.commons.collections4.functors.ForClosureEvoSuiteTest.test3");
      ForClosure<Object> forClosure0 = new ForClosure<Object>(1, (Closure<? super Object>) null);
      ForClosure.forClosure(1, (Closure<? super Object>) forClosure0);
      assertEquals(1, forClosure0.getCount());
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 org.apache.commons.collections4.functors.ForClosure.forClosure(ILorg/apache/commons/collections4/Closure;)Lorg/apache/commons/collections4/Closure;: I14 Branch 3 IF_ICMPNE L55 - true
   * 2 org.apache.commons.collections4.functors.ForClosure.forClosure(ILorg/apache/commons/collections4/Closure;)Lorg/apache/commons/collections4/Closure;: I3 Branch 1 IFLE L52 - false
   * 3 org.apache.commons.collections4.functors.ForClosure.forClosure(ILorg/apache/commons/collections4/Closure;)Lorg/apache/commons/collections4/Closure;: I5 Branch 2 IFNONNULL L52 - true
   */

  @Test
  public void test4()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(734,"org.apache.commons.collections4.functors.ForClosureEvoSuiteTest.test4");
      Closure<Object> closure0 = NOPClosure.INSTANCE;
      Closure<Integer> closure1 = ForClosure.forClosure(887, (Closure<? super Integer>) closure0);
      assertNotNull(closure1);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.functors.ForClosure.execute(Ljava/lang/Object;)V: I8 Branch 4 IF_ICMPGE L80 - true
   * 2 org.apache.commons.collections4.functors.ForClosure.forClosure(ILorg/apache/commons/collections4/Closure;)Lorg/apache/commons/collections4/Closure;: I3 Branch 1 IFLE L52 - true
   */

  @Test
  public void test5()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(735,"org.apache.commons.collections4.functors.ForClosureEvoSuiteTest.test5");
      Closure<Object> closure0 = ExceptionClosure.INSTANCE;
      Closure<Integer> closure1 = ForClosure.forClosure((-1615), (Closure<? super Integer>) closure0);
      assertNotNull(closure1);
      
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-1615), (Closure<? super Object>) closure0);
      forClosure0.execute((Object) closure1);
      assertEquals(-1615, forClosure0.getCount());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.functors.ForClosure.execute(Ljava/lang/Object;)V: I8 Branch 4 IF_ICMPGE L80 - false
   * 2 org.apache.commons.collections4.functors.ForClosure.<init>(ILorg/apache/commons/collections4/Closure;)V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(736,"org.apache.commons.collections4.functors.ForClosureEvoSuiteTest.test6");
      Closure<Object> closure0 = ExceptionClosure.INSTANCE;
      ForClosure<Integer> forClosure0 = new ForClosure<Integer>(1184, (Closure<? super Integer>) closure0);
      // Undeclared exception!
      try {
        forClosure0.execute((Integer) (-1615));
        fail("Expecting exception: FunctorException");
      
      } catch(FunctorException e) {
         //
         // ExceptionClosure invoked
         //
      }
  }
}
