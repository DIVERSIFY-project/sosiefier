/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.junit.BeforeClass;

public class FactoryTransformerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.functors.FactoryTransformer.getFactory()Lorg/apache/commons/collections4/Factory;: root-Branch
   * 2 org.apache.commons.collections4.functors.FactoryTransformer.<init>(Lorg/apache/commons/collections4/Factory;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(725,"org.apache.commons.collections4.functors.FactoryTransformerEvoSuiteTest.test0");
      FactoryTransformer<String, Object> factoryTransformer0 = new FactoryTransformer<String, Object>((Factory<?>) null);
      Factory<?> factory0 = factoryTransformer0.getFactory();
      assertNull(factory0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.functors.FactoryTransformer.transform(Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(726,"org.apache.commons.collections4.functors.FactoryTransformerEvoSuiteTest.test1");
      Class<String> class0 = String.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, (Class<?>[]) classArray0, (Object[]) classArray0);
      FactoryTransformer<String, String> factoryTransformer0 = new FactoryTransformer<String, String>((Factory<? extends String>) instantiateFactory0);
      // Undeclared exception!
      try {
        factoryTransformer0.transform("~q6@1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.ClassCastException@3748f867
         //
      }
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.functors.FactoryTransformer.factoryTransformer(Lorg/apache/commons/collections4/Factory;)Lorg/apache/commons/collections4/Transformer;: I3 Branch 1 IFNONNULL L48 - true
   * 2 org.apache.commons.collections4.functors.FactoryTransformer.<init>(Lorg/apache/commons/collections4/Factory;)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(727,"org.apache.commons.collections4.functors.FactoryTransformerEvoSuiteTest.test2");
      Factory<Object> factory0 = ExceptionFactory.INSTANCE;
      Transformer<String, Object> transformer0 = FactoryTransformer.factoryTransformer((Factory<?>) factory0);
      assertNotNull(transformer0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.functors.FactoryTransformer.factoryTransformer(Lorg/apache/commons/collections4/Factory;)Lorg/apache/commons/collections4/Transformer;: I3 Branch 1 IFNONNULL L48 - false
   */

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(728,"org.apache.commons.collections4.functors.FactoryTransformerEvoSuiteTest.test3");
      try {
        FactoryTransformer.factoryTransformer((Factory<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factory must not be null
         //
      }
  }
}
