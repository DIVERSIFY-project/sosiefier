/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.junit.BeforeClass;

public class NonePredicateEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 org.apache.commons.collections4.functors.NonePredicate.nonePredicate([Lorg/apache/commons/collections4/Predicate;)Lorg/apache/commons/collections4/Predicate;: I8 Branch 1 IFNE L53 - true
   * 2 org.apache.commons.collections4.functors.NonePredicate.<init>([Lorg/apache/commons/collections4/Predicate;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(782,"org.apache.commons.collections4.functors.NonePredicateEvoSuiteTest.test0");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      Predicate<IdentityPredicate<Object>> predicate0 = NonePredicate.nonePredicate((Predicate<? super IdentityPredicate<Object>>[]) predicateArray0);
      assertNotNull(predicate0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.apache.commons.collections4.functors.NonePredicate.nonePredicate(Ljava/util/Collection;)Lorg/apache/commons/collections4/Predicate;: I9 Branch 2 IFNE L72 - false
   */

  @Test
  public void test1()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(783,"org.apache.commons.collections4.functors.NonePredicateEvoSuiteTest.test1");
      LinkedList<NullIsFalsePredicate<InstanceofPredicate>> linkedList0 = new LinkedList<NullIsFalsePredicate<InstanceofPredicate>>();
      Predicate<InstanceofPredicate> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<InstanceofPredicate>>) linkedList0);
      assertNotNull(predicate0);
  }

  //Test case number: 2
  /*
   * 5 covered goals:
   * 1 org.apache.commons.collections4.functors.NonePredicate.evaluate(Ljava/lang/Object;)Z: I15 Branch 3 IF_ICMPGE L95 - true
   * 2 org.apache.commons.collections4.functors.NonePredicate.evaluate(Ljava/lang/Object;)Z: I15 Branch 3 IF_ICMPGE L95 - false
   * 3 org.apache.commons.collections4.functors.NonePredicate.evaluate(Ljava/lang/Object;)Z: I25 Branch 4 IFEQ L96 - true
   * 4 org.apache.commons.collections4.functors.NonePredicate.evaluate(Ljava/lang/Object;)Z: I25 Branch 4 IFEQ L96 - false
   * 5 org.apache.commons.collections4.functors.NonePredicate.<init>([Lorg/apache/commons/collections4/Predicate;)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
		fr.inria.diversify.sosie.logger.LogWriter.writeTestStart(784,"org.apache.commons.collections4.functors.NonePredicateEvoSuiteTest.test2");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      NonePredicate<NonePredicate<Object>> nonePredicate0 = new NonePredicate<NonePredicate<Object>>(predicateArray0);
      NonePredicate<Object> nonePredicate1 = new NonePredicate<Object>(predicateArray0);
      boolean boolean0 = nonePredicate0.evaluate(nonePredicate1);
      assertEquals(false, boolean0);
      
      boolean boolean1 = nonePredicate0.evaluate(nonePredicate1);
      assertEquals(true, boolean1);
  }
}
