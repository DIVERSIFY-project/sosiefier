/*
 * This file was automatically generated by EvoSuite
 */

package org.jbehave.core.reporters;

import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;

import org.junit.Test;

import freemarker.template.Configuration;


public class FreemarkerProcessorEvoSuiteTest {


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 org.jbehave.core.reporters.FreemarkerProcessor.<init>()V: root-Branch
   * 2 org.jbehave.core.reporters.FreemarkerProcessor.<init>(Ljava/lang/Class;)V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      FreemarkerProcessor freemarkerProcessor0 = new FreemarkerProcessor();
      String string0 = "";
      Configuration configuration0 = Configuration.getDefaultConfiguration();
      Map<?, ?> map0 = configuration0.getSettings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(37);
      String string1 = configuration0.getDateFormat();
      // Undeclared exception!
      try {
        charArrayWriter0.append("", 37, 37);
      }catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: 37
         */
        /*
      %%%<ex><className val="StringIndexOutOfBoundsException"/><stackDepth val="17"/><causeDepth val="0"/><source val="java.lang.String.substring(String.java:1946)"/></ex>%%%
         */
      }
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.jbehave.core.reporters.FreemarkerProcessor$FreemarkerProcessingFailed.<init>(Lfreemarker/template/Configuration;Ljava/lang/String;Ljava/util/Map;Ljava/lang/Exception;)V: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      Configuration configuration0 = Configuration.getDefaultConfiguration();
      String string0 = "INSTANCE";
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Exception exception0 = new Exception("INSTANCE");
      FreemarkerProcessor.FreemarkerProcessingFailed freemarkerProcessor_FreemarkerProcessingFailed0 = new FreemarkerProcessor.FreemarkerProcessingFailed(configuration0, "INSTANCE", hashMap0, exception0);
      PrintWriter printWriter0 = null;
      try {
        printWriter0 = new PrintWriter("INSTANCE", "INSTANCE");
      }catch(Throwable e) {
        /*
         * Security manager blocks (java.io.FilePermission INSTANCE write)
         * java.lang.Thread.getStackTrace(Thread.java:1495)
         * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
         * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
         * java.io.FileOutputStream.<init>(FileOutputStream.java:198)
         * java.io.FileOutputStream.<init>(FileOutputStream.java:99)
         * java.io.PrintWriter.<init>(PrintWriter.java:203)
         * sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
         * sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
         * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
         * java.lang.reflect.Constructor.newInstance(Constructor.java:532)
         * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
         * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
         * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
         * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
         * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
         * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
         * java.util.concurrent.FutureTask.run(FutureTask.java:166)
         * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1146)
         * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
         * java.lang.Thread.run(Thread.java:679)
         */
        /*
      %%%<ex><className val="SecurityException"/><stackDepth val="19"/><causeDepth val="0"/><source val="org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:307)"/></ex>%%%
         */
      }
  }

  //Test case number: 2  @Test
  public void test2()  throws Throwable  {
      Class<?> class0 = FreemarkerProcessor.class;
      Configuration configuration0 = new Configuration();
      String string0 = " ";
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Exception exception0 = new Exception();
      FreemarkerProcessor.FreemarkerProcessingFailed freemarkerProcessor_FreemarkerProcessingFailed0 = new FreemarkerProcessor.FreemarkerProcessingFailed(configuration0, " ", hashMap0, exception0);
      PrintWriter printWriter0 = null;
      try {
        printWriter0 = new PrintWriter(" ", " ");
      }catch(SecurityException e) {
        /*
         * Security manager blocks (java.io.FilePermission   write)
         * java.lang.Thread.getStackTrace(Thread.java:1495)
         * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
         * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
         * java.io.FileOutputStream.<init>(FileOutputStream.java:198)
         * java.io.FileOutputStream.<init>(FileOutputStream.java:99)
         * java.io.PrintWriter.<init>(PrintWriter.java:203)
         * sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
         * sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
         * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
         * java.lang.reflect.Constructor.newInstance(Constructor.java:532)
         * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
         * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
         * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
         * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
         * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
         * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
         * java.util.concurrent.FutureTask.run(FutureTask.java:166)
         * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1146)
         * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
         * java.lang.Thread.run(Thread.java:679)
         */
        /*
      %%%<ex><className val="SecurityException"/><stackDepth val="19"/><causeDepth val="0"/><source val="org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:307)"/></ex>%%%
         */
      }
  }

  //Test case number: 3  @Test
  public void test3()  throws Throwable  {
      Configuration configuration0 = null;
      String string0 = "'tkCZ.(2Q!";
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FreemarkerProcessor freemarkerProcessor0 = new FreemarkerProcessor();
      File file0 = new File("'tkCZ.(2Q!", "'tkCZ.(2Q!");
      File file1 = file0.getCanonicalFile();
      File file2 = file1.getParentFile();
      FileWriter fileWriter0 = null;
      try {
        fileWriter0 = new FileWriter(file2);
      }catch(SecurityException e) {
        /*
         * Security manager blocks (java.io.FilePermission /home/martin/workspace/jbehave-core-spooned/'tkCZ.(2Q! write)
         * java.lang.Thread.getStackTrace(Thread.java:1495)
         * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
         * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
         * java.io.FileOutputStream.<init>(FileOutputStream.java:198)
         * java.io.FileOutputStream.<init>(FileOutputStream.java:160)
         * java.io.FileWriter.<init>(FileWriter.java:90)
         * sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
         * sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
         * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
         * java.lang.reflect.Constructor.newInstance(Constructor.java:532)
         * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
         * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
         * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
         * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
         * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
         * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
         * java.util.concurrent.FutureTask.run(FutureTask.java:166)
         * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1146)
         * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
         * java.lang.Thread.run(Thread.java:679)
         */
        /*
      %%%<ex><className val="SecurityException"/><stackDepth val="19"/><causeDepth val="0"/><source val="org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:307)"/></ex>%%%
         */
      }
  }

  //Test case number: 4  @Test
  public void test4()  throws Throwable  {
      String string0 = "";
      Configuration configuration0 = Configuration.getDefaultConfiguration();
      Map<?, ?> map0 = configuration0.getSettings();
      boolean boolean0 = configuration0.isClassicCompatible();
      Exception exception0 = new Exception();
      Exception exception1 = (Exception)exception0.fillInStackTrace();
      Exception exception2 = new Exception("", exception1);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 org.jbehave.core.reporters.FreemarkerProcessor.configuration()Lfreemarker/template/Configuration;: root-Branch
   */
  @Test
  public void test5()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      FreemarkerProcessor freemarkerProcessor0 = new FreemarkerProcessor();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FreemarkerProcessor.FreemarkerProcessingFailed freemarkerProcessor_FreemarkerProcessingFailed0 = new FreemarkerProcessor.FreemarkerProcessingFailed(configuration0, "mt", hashMap0, (Exception) null);
      FreemarkerProcessor freemarkerProcessor1 = new FreemarkerProcessor();
      Configuration configuration1 = freemarkerProcessor1.configuration();
      String string0 = "zh_TW";
      Map<String, Object> map0 = null;
      String string1 = hashMap0.toString();
      String string2 = freemarkerProcessor_FreemarkerProcessingFailed0.getLocalizedMessage();
      Exception exception0 = new Exception("zh_TW", (Throwable) null);
      Writer writer0 = null;
      PrintWriter printWriter0 = null;
      try {
        printWriter0 = new PrintWriter((Writer) null, false);
      }catch(NullPointerException e) {
        /*
         * no message in exception (getMessage() returned null)
         */
        /*
      %%%<ex><className val="NullPointerException"/><stackDepth val="16"/><causeDepth val="0"/><source val="java.io.Writer.&lt;init&gt;(Writer.java:88)"/></ex>%%%
         */
      }
  }

  //Test case number: 6  @Test
  public void test6()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      String string0 = "\"=eWNy+'t+I_Yr\\5L";
      HashMap<String, Object> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, Object>((-979));
      }catch(IllegalArgumentException e) {
        /*
         * Illegal initial capacity: -979
         */
        /*
      %%%<ex><className val="IllegalArgumentException"/><stackDepth val="16"/><causeDepth val="0"/><source val="java.util.HashMap.&lt;init&gt;(HashMap.java:189)"/></ex>%%%
         */
      }
  }

  //Test case number: 7  @Test
  public void test7()  throws Throwable  {
      FreemarkerProcessor freemarkerProcessor0 = new FreemarkerProcessor();
      Configuration configuration0 = Configuration.getDefaultConfiguration();
      Configuration configuration1 = freemarkerProcessor0.configuration();
      String string0 = "";
      Map<?, ?> map0 = configuration0.getSettings();
      Exception exception0 = new Exception("");
  }

  //Test case number: 8  @Test
  public void test8()  throws Throwable  {
      Configuration configuration0 = Configuration.getDefaultConfiguration();
      Map<?, ?> map0 = configuration0.getSettings();
      Exception exception0 = new Exception("");
  }

  //Test case number: 9  @Test
  public void test9()  throws Throwable  {
      Configuration configuration0 = null;
      String string0 = null;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Exception exception0 = new Exception((String) null);
      FreemarkerProcessor.FreemarkerProcessingFailed freemarkerProcessor_FreemarkerProcessingFailed0 = new FreemarkerProcessor.FreemarkerProcessingFailed((Configuration) null, (String) null, hashMap0, exception0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[10];
      int int0 = 126;
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, (String) null, (String) null, 126);
      }catch(NullPointerException e) {
        /*
         * Declaring class is null
         */
        /*
      %%%<ex><className val="NullPointerException"/><stackDepth val="15"/><causeDepth val="0"/><source val="java.lang.StackTraceElement.&lt;init&gt;(StackTraceElement.java:70)"/></ex>%%%
         */
      }
  }
}
