/*
 * This file was automatically generated by EvoSuite
 */

package org.jbehave.core.parsers;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.util.regex.PatternSyntaxException;
import org.jbehave.core.parsers.RegexPrefixCapturingPatternParser;
import org.jbehave.core.parsers.RegexStepMatcher;
import org.jbehave.core.parsers.StepMatcher;
import org.jbehave.core.steps.StepType;


public class RegexPrefixCapturingPatternParserEvoSuiteTest {


  //Test case number: 0
  /*
   * 16 covered goals:
   * 1 org.jbehave.core.parsers.RegexPrefixCapturingPatternParser.anyWhitespaceWillDo(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * 2 org.jbehave.core.parsers.RegexPrefixCapturingPatternParser$Parameter.<init>(Lorg/jbehave/core/parsers/RegexPrefixCapturingPatternParser;Ljava/lang/String;IILjava/lang/String;)V: root-Branch
   * 3 org.jbehave.core.parsers.RegexPrefixCapturingPatternParser.parseStep(Lorg/jbehave/core/steps/StepType;Ljava/lang/String;)Lorg/jbehave/core/parsers/StepMatcher;: root-Branch
   * 4 org.jbehave.core.parsers.RegexPrefixCapturingPatternParser.getPrefix()Ljava/lang/String;: root-Branch
   * 5 org.jbehave.core.parsers.RegexPrefixCapturingPatternParser.<init>(Ljava/lang/String;)V: root-Branch
   * 6 org.jbehave.core.parsers.RegexPrefixCapturingPatternParser.buildPattern(Ljava/lang/String;)Ljava/util/regex/Pattern;: root-Branch
   * 7 org.jbehave.core.parsers.RegexPrefixCapturingPatternParser.toString()Ljava/lang/String;: root-Branch
   * 8 org.jbehave.core.parsers.RegexPrefixCapturingPatternParser.<init>()V: root-Branch
   * 9 org.jbehave.core.parsers.RegexPrefixCapturingPatternParser.findAllPrefixedWords()Ljava/util/regex/Pattern;: root-Branch
   * 10 org.jbehave.core.parsers.RegexPrefixCapturingPatternParser.escapeRegexPunctuation(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * 11 org.jbehave.core.parsers.RegexPrefixCapturingPatternParser.extractParameterNames(Ljava/lang/String;)[Ljava/lang/String;: I30 Branch 1 IFNE L57 - true
   * 12 org.jbehave.core.parsers.RegexPrefixCapturingPatternParser.findParametersToReplace(Ljava/lang/String;)Ljava/util/List;: I37 Branch 2 IFNE L66 - true
   * 13 org.jbehave.core.parsers.RegexPrefixCapturingPatternParser.replaceParametersWithCapture(Ljava/lang/String;Ljava/util/List;)Ljava/lang/String;: I66 Branch 3 IFGT L78 - true
   * 14 org.jbehave.core.parsers.RegexPrefixCapturingPatternParser.extractParameterNames(Ljava/lang/String;)[Ljava/lang/String;: I30 Branch 1 IFNE L57 - false
   * 15 org.jbehave.core.parsers.RegexPrefixCapturingPatternParser.findParametersToReplace(Ljava/lang/String;)Ljava/util/List;: I37 Branch 2 IFNE L66 - false
   * 16 org.jbehave.core.parsers.RegexPrefixCapturingPatternParser.replaceParametersWithCapture(Ljava/lang/String;Ljava/util/List;)Ljava/lang/String;: I66 Branch 3 IFGT L78 - false
   */
  @Test
  public void test0()  throws Throwable  {
      RegexPrefixCapturingPatternParser regexPrefixCapturingPatternParser0 = new RegexPrefixCapturingPatternParser();
      StepType stepType0 = StepType.WHEN;
      RegexStepMatcher regexStepMatcher0 = (RegexStepMatcher)regexPrefixCapturingPatternParser0.parseStep(stepType0, "(");
      StepType stepType1 = StepType.GIVEN;
      RegexStepMatcher regexStepMatcher1 = (RegexStepMatcher)regexPrefixCapturingPatternParser0.parseStep(stepType1, "w7kC8y>>xi}I'-6k->");
      String string0 = regexPrefixCapturingPatternParser0.toString();
      String string1 = regexPrefixCapturingPatternParser0.toString();
      StepType stepType2 = StepType.WHEN;
      RegexStepMatcher regexStepMatcher2 = (RegexStepMatcher)regexPrefixCapturingPatternParser0.parseStep(stepType2, "RegexPrefixCapturingPatternParser[prefix=$]");
      RegexStepMatcher regexStepMatcher3 = (RegexStepMatcher)regexPrefixCapturingPatternParser0.parseStep(stepType2, "RegexPrefixCapturingPatternParser[prefix=$]");
      String string2 = regexPrefixCapturingPatternParser0.getPrefix();
      String string3 = regexPrefixCapturingPatternParser0.getPrefix();
      RegexPrefixCapturingPatternParser regexPrefixCapturingPatternParser1 = new RegexPrefixCapturingPatternParser("RegexPrefixCapturingPatternParser[prefix=$]");
      String string4 = regexPrefixCapturingPatternParser0.getPrefix();
      RegexPrefixCapturingPatternParser regexPrefixCapturingPatternParser2 = new RegexPrefixCapturingPatternParser();
      StepType stepType3 = StepType.AND;
      // Undeclared exception!
      try {
        regexPrefixCapturingPatternParser1.parseStep(stepType3, "RegexPrefixCapturingPatternParser[prefix=$]");
      }catch(PatternSyntaxException e) {
        /*
         * Illegal/unsupported escape sequence near index 2
         * (\\RegexPrefixCapturingPatternParser[prefix=$]\\w*)(\\W|\\Z)
         *   ^
         */
        /*
      %%%<ex><className val="PatternSyntaxException"/><stackDepth val="28"/><causeDepth val="0"/><source val="java.util.regex.Pattern.error(Pattern.java:1730)"/></ex>%%%
         */
      }
  }
}
