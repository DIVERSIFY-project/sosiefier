/*
 * This file was automatically generated by EvoSuite
 */

package org.jbehave.core.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import org.jbehave.core.model.Story;
import org.jbehave.core.model.StoryMap;
import org.jbehave.core.model.StoryMaps;


public class StoryMapsEvoSuiteTest {


  //Test case number: 1
  /*
   * 7 covered goals:
   * 1 org.jbehave.core.model.StoryMaps.getMetaFilters()Ljava/util/List;: root-Branch
   * 2 org.jbehave.core.model.StoryMaps.toString()Ljava/lang/String;: root-Branch
   * 3 org.jbehave.core.model.StoryMaps.<init>(Ljava/util/List;)V: root-Branch
   * 4 org.jbehave.core.model.StoryMaps.getMap(Ljava/lang/String;)Lorg/jbehave/core/model/StoryMap;: root-Branch
   * 5 org.jbehave.core.model.StoryMaps.getMaps()Ljava/util/List;: root-Branch
   * 6 org.jbehave.core.model.StoryMaps.index(Ljava/util/List;)V: I24 Branch 1 IFNE L15 - true
   * 7 org.jbehave.core.model.StoryMaps.index(Ljava/util/List;)V: I24 Branch 1 IFNE L15 - false
   */
  @Test
  public void test1()  throws Throwable  {
      LinkedList<StoryMap> linkedList0 = new LinkedList<StoryMap>();
      StoryMaps storyMaps0 = new StoryMaps((List<StoryMap>) linkedList0);
      String string0 = storyMaps0.toString();
      List<String> list0 = storyMaps0.getMetaFilters();
      StoryMap storyMap0 = storyMaps0.getMap("StoryMaps[metaFilters=[]]");
      List<String> list1 = storyMaps0.getMetaFilters();
      linkedList0.clear();
      List<StoryMap> list2 = storyMaps0.getMaps();
      boolean boolean0 = linkedList0.add((StoryMap) null);
      List<StoryMap> list3 = storyMaps0.getMaps();
      int int0 = linkedList0.size();
      StoryMaps storyMaps1 = null;
      try {
        storyMaps1 = new StoryMaps((List<StoryMap>) linkedList0);
      }catch(NullPointerException e) {
        /*
         * no message in exception (getMessage() returned null)
         */
        /*
      %%%<ex><className val="NullPointerException"/><stackDepth val="15"/><causeDepth val="0"/><source val="org.jbehave.core.model.StoryMaps.index(StoryMaps.java:16)"/></ex>%%%
         */
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 org.jbehave.core.model.StoryMaps.<init>(Ljava/util/List;)V: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      List<StoryMap> list0 = null;
      StoryMaps storyMaps0 = null;
      try {
        storyMaps0 = new StoryMaps((List<StoryMap>) null);
      }catch(NullPointerException e) {
        /*
         * no message in exception (getMessage() returned null)
         */
        /*
      %%%<ex><className val="NullPointerException"/><stackDepth val="15"/><causeDepth val="0"/><source val="org.jbehave.core.model.StoryMaps.index(StoryMaps.java:15)"/></ex>%%%
         */
      }
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 org.jbehave.core.model.StoryMaps.<init>(Ljava/util/List;)V: root-Branch
   * 2 org.jbehave.core.model.StoryMaps.getMap(Ljava/lang/String;)Lorg/jbehave/core/model/StoryMap;: root-Branch
   * 3 org.jbehave.core.model.StoryMaps.index(Ljava/util/List;)V: I24 Branch 1 IFNE L15 - false
   */
  @Test
  public void test3()  throws Throwable  {
      LinkedList<StoryMap> linkedList0 = new LinkedList<StoryMap>();
      StoryMaps storyMaps0 = new StoryMaps((List<StoryMap>) linkedList0);
      StoryMap storyMap0 = storyMaps0.getMap("description");
      LinkedList<StoryMap> linkedList1 = new LinkedList<StoryMap>();
      String string0 = "";
      HashSet<Story> hashSet0 = new HashSet<Story>();
      // Undeclared exception!
      try {
        linkedList0.listIterator(768);
      }catch(IndexOutOfBoundsException e) {
        /*
         * Index: 768, Size: 0
         */
        /*
      %%%<ex><className val="IndexOutOfBoundsException"/><stackDepth val="16"/><causeDepth val="0"/><source val="java.util.LinkedList$ListItr.&lt;init&gt;(LinkedList.java:695)"/></ex>%%%
         */
      }
  }
}
