./main/java/fr/inria/diversify/Main.java:		List<File> files = new ArrayList<File>();
./main/java/fr/inria/diversify/Main.java:		files.add(new File(srcfolderstatic));
./main/java/fr/inria/diversify/Main.java:		Main app = new Main(files, new File(srcgenfolderstatic));
./main/java/fr/inria/diversify/Main.java:		StandardEnvironment env = new StandardEnvironment();
./main/java/fr/inria/diversify/Main.java:		DefaultCoreFactory f = new DefaultCoreFactory();
./main/java/fr/inria/diversify/Main.java:		Factory factory = new Factory(f, env);
./main/java/fr/inria/diversify/Main.java:		SpoonBuildingManager builder = new SpoonBuildingManager(factory);
./main/java/fr/inria/diversify/Main.java:		ProcessingManager pm = new QueueProcessingManager(factory);
./main/java/fr/inria/diversify/Main.java:		StatementProcessor processor = new StatementProcessor(true);
./main/java/fr/inria/diversify/Main.java://		 TestProcessor processor = new TestProcessor();//*******************************
./main/java/fr/inria/diversify/Main.java:		Statistic stat = new Statistic(statements);
./main/java/fr/inria/diversify/Main.java:		Random r = new Random();
./main/java/fr/inria/diversify/Main.java:		Statement[] stmt = statements.toArray(new Statement[statements.size()]);
./main/java/fr/inria/diversify/statement/InputContext.java:		Set<String> set = new HashSet<String>();
./main/java/fr/inria/diversify/statement/JavaPrettyPrinter.java:	public Printingcontext context = new Printingcontext();
./main/java/fr/inria/diversify/statement/JavaPrettyPrinter.java:		Stack<CtTypeReference<?>> currentThis = new Stack<CtTypeReference<?>>();
./main/java/fr/inria/diversify/statement/JavaPrettyPrinter.java:		Stack<CtExpression<?>> parenthesedExpression = new Stack<CtExpression<?>>();
./main/java/fr/inria/diversify/statement/Statement.java:		VariableVisitor visitor = new VariableVisitor();
./main/java/fr/inria/diversify/statement/Statement.java:		JavaPrettyPrinter pp = new JavaPrettyPrinter(stmt.getFactory().getEnvironment());
./main/java/fr/inria/diversify/statement/Statement.java:		return new Context(inputContext,ouputContext);
./main/java/fr/inria/diversify/statement/VariableVisitor.java:	protected Set<CtVariableReference<?>> localVariableReferences = new HashSet<CtVariableReference<?>>();
./main/java/fr/inria/diversify/statement/VariableVisitor.java:	protected Set<CtVariableReference<?>> fieldReferences = new HashSet<CtVariableReference<?>>();
./main/java/fr/inria/diversify/statement/VariableVisitor.java:	protected Set<CtVariableReference<?>> localVariableCreate = new HashSet<CtVariableReference<?>>();
./main/java/fr/inria/diversify/statement/VariableVisitor.java:		Set<CtVariableReference<?>> ref = new HashSet<CtVariableReference<?>>(localVariableReferences);
./main/java/fr/inria/diversify/statement/VariableVisitor.java:		return new InputContext(ref);
./main/java/fr/inria/diversify/statement/VariableVisitor.java:		CtVariableReference thisVariable = new CtLocalVariableReferenceImpl();
./main/java/fr/inria/diversify/statementProcessor/StatementProcessor.java:		statements = new LinkedList<Statement>();
./main/java/fr/inria/diversify/statementProcessor/StatementProcessor.java:				Statement stmt = new Statement(element);
./main/java/fr/inria/diversify/statementProcessor/StatementProcessor.java:		ValidStatementVisitor valid = new ValidStatementVisitor(element); 
./main/java/fr/inria/diversify/statistic/ComputeStatistic.java:		uniqueInputContext = new HashMap<InputContext, Integer>();
./main/java/fr/inria/diversify/statistic/ComputeStatistic.java:		uniqueOutputContext = new HashMap<CtTypeReference<?>, Integer>();
./main/java/fr/inria/diversify/statistic/ComputeStatistic.java:		uniqueContext = new HashMap<Context, Integer>();
./main/java/fr/inria/diversify/statistic/ComputeStatistic.java:		uniqueStatment = new HashMap<Integer, Integer>();
./main/java/fr/inria/diversify/statistic/ComputeStatistic.java:		idToStatement = new HashMap<Integer,Statement>();
./main/java/fr/inria/diversify/statistic/CSVWriter.java:		FileWriter fw = new FileWriter(file.getAbsoluteFile());
./main/java/fr/inria/diversify/statistic/CSVWriter.java:		BufferedWriter bw = new BufferedWriter(fw);
./main/java/fr/inria/diversify/statistic/Statistic.java:		CSVWriter write = new CSVWriter(new File(directory+fileName+"_statements.csv"), statisticByStatement());
./main/java/fr/inria/diversify/statistic/Statistic.java:		write = new CSVWriter(new File(directory+fileName+"classes.csv"), statisticByClass());
./main/java/fr/inria/diversify/statistic/Statistic.java:		Map<String,ComputeStatistic> map = new HashMap<String, ComputeStatistic>();
./main/java/fr/inria/diversify/statistic/Statistic.java:				map.put(stmtType,new ComputeStatistic());
./main/java/fr/inria/diversify/statistic/Statistic.java:		Map<String,ComputeStatistic> map = new HashMap<String, ComputeStatistic>();
./main/java/fr/inria/diversify/statistic/Statistic.java:				map.put(stmtType,new ComputeStatistic());
./main/java/fr/inria/diversify/statistic/Statistic.java:		Map<String,ComputeStatistic> map = new HashMap<String, ComputeStatistic>();
./main/java/fr/inria/diversify/statistic/Statistic.java:				map.put(stmtType,new ComputeStatistic());
./main/java/fr/inria/diversify/statistic/Statistic.java:			allStat = new ComputeStatistic(statements);
