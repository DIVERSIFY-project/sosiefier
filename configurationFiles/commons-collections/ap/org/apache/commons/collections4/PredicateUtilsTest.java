package org.apache.commons.collections4;

import org.apache.commons.collections4.functors.AbstractPredicateTest;
import java.util.ArrayList;
import java.util.Collection;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.junit.Test;
import org.apache.commons.collections4.functors.TruePredicate;

/** 
 * Tests the PredicateUtils class.
 * 
 * @version $Id$
 * @since 3.0
 */
@SuppressWarnings(value = "boxing")
public class PredicateUtilsTest extends AbstractPredicateTest {
    /** 
     * Set up instance variables required by this test case.
     */
public void setUp() {
    }

    /** 
     * Tear down instance variables required by this test case.
     */
public void tearDown() {
    }

    @Test(timeout = 1000)
    public void testExceptionPredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testExceptionPredicate");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8027,null,8026,org.apache.commons.collections4.PredicateUtils.exceptionPredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8029,null,8028,org.apache.commons.collections4.PredicateUtils.exceptionPredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8029,null,8028,org.apache.commons.collections4.PredicateUtils.exceptionPredicate());
        try {
            org.apache.commons.collections4.PredicateUtils.exceptionPredicate().evaluate(null);
            org.apache.commons.collections4.PredicateUtils.exceptionPredicate().evaluate(null);
        } catch (final FunctorException ex) {
            try {
                org.apache.commons.collections4.PredicateUtils.exceptionPredicate().evaluate(cString);
            } catch (final FunctorException ex2) {
                return ;
            }
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testExceptionPredicate_add2837() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testExceptionPredicate_add2837");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8027,null,8026,org.apache.commons.collections4.PredicateUtils.exceptionPredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8029,null,8028,org.apache.commons.collections4.PredicateUtils.exceptionPredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8029,null,8028,org.apache.commons.collections4.PredicateUtils.exceptionPredicate());
        try {
            org.apache.commons.collections4.PredicateUtils.exceptionPredicate().evaluate(null);
        } catch (final FunctorException ex) {
            try {
                org.apache.commons.collections4.PredicateUtils.exceptionPredicate().evaluate(cString);
                org.apache.commons.collections4.PredicateUtils.exceptionPredicate().evaluate(cString);
            } catch (final FunctorException ex2) {
                return ;
            }
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsNotNullPredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsNotNullPredicate");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8077,null,8076,org.apache.commons.collections4.PredicateUtils.notNullPredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8079,null,8078,org.apache.commons.collections4.PredicateUtils.notNullPredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8079,null,8078,org.apache.commons.collections4.PredicateUtils.notNullPredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8081,org.apache.commons.collections4.PredicateUtils.notNullPredicate(),8080,org.apache.commons.collections4.PredicateUtils.notNullPredicate().evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8083,org.apache.commons.collections4.PredicateUtils.notNullPredicate(),8082,org.apache.commons.collections4.PredicateUtils.notNullPredicate().evaluate(cObject));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8085,org.apache.commons.collections4.PredicateUtils.notNullPredicate(),8084,org.apache.commons.collections4.PredicateUtils.notNullPredicate().evaluate(cString));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8087,org.apache.commons.collections4.PredicateUtils.notNullPredicate(),8086,org.apache.commons.collections4.PredicateUtils.notNullPredicate().evaluate(cInteger));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIdentityPredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIdentityPredicate");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8043,null,8042,org.apache.commons.collections4.functors.NullPredicate.nullPredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8045,null,8044,org.apache.commons.collections4.PredicateUtils.identityPredicate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8047,null,8046,org.apache.commons.collections4.PredicateUtils.identityPredicate(java.lang.Integer.valueOf(6)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8049,org.apache.commons.collections4.PredicateUtils.identityPredicate(java.lang.Integer.valueOf(6)),8048,org.apache.commons.collections4.PredicateUtils.identityPredicate(java.lang.Integer.valueOf(6)).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8051,org.apache.commons.collections4.PredicateUtils.<java.lang.Object>identityPredicate(java.lang.Integer.valueOf(6)),8050,org.apache.commons.collections4.PredicateUtils.<java.lang.Object>identityPredicate(java.lang.Integer.valueOf(6)).evaluate(cObject));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8053,org.apache.commons.collections4.PredicateUtils.<java.lang.Object>identityPredicate(java.lang.Integer.valueOf(6)),8052,org.apache.commons.collections4.PredicateUtils.<java.lang.Object>identityPredicate(java.lang.Integer.valueOf(6)).evaluate(cString));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8055,org.apache.commons.collections4.PredicateUtils.identityPredicate(new java.lang.Integer(6)),8054,org.apache.commons.collections4.PredicateUtils.identityPredicate(new java.lang.Integer(6)).evaluate(cInteger));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8057,org.apache.commons.collections4.PredicateUtils.identityPredicate(cInteger),8056,org.apache.commons.collections4.PredicateUtils.identityPredicate(cInteger).evaluate(cInteger));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testTruePredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTruePredicate");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8133,null,8132,org.apache.commons.collections4.functors.TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8135,null,8134,org.apache.commons.collections4.functors.TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8135,null,8134,org.apache.commons.collections4.functors.TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8137,org.apache.commons.collections4.functors.TruePredicate.truePredicate(),8136,org.apache.commons.collections4.functors.TruePredicate.truePredicate().evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8139,org.apache.commons.collections4.functors.TruePredicate.truePredicate(),8138,org.apache.commons.collections4.functors.TruePredicate.truePredicate().evaluate(cObject));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8141,org.apache.commons.collections4.functors.TruePredicate.truePredicate(),8140,org.apache.commons.collections4.functors.TruePredicate.truePredicate().evaluate(cString));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8143,org.apache.commons.collections4.functors.TruePredicate.truePredicate(),8142,org.apache.commons.collections4.functors.TruePredicate.truePredicate().evaluate(cInteger));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testFalsePredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFalsePredicate");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8031,null,8030,org.apache.commons.collections4.functors.FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8033,null,8032,org.apache.commons.collections4.functors.FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8033,null,8032,org.apache.commons.collections4.functors.FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8035,org.apache.commons.collections4.functors.FalsePredicate.falsePredicate(),8034,org.apache.commons.collections4.functors.FalsePredicate.falsePredicate().evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8037,org.apache.commons.collections4.functors.FalsePredicate.falsePredicate(),8036,org.apache.commons.collections4.functors.FalsePredicate.falsePredicate().evaluate(cObject));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8039,org.apache.commons.collections4.functors.FalsePredicate.falsePredicate(),8038,org.apache.commons.collections4.functors.FalsePredicate.falsePredicate().evaluate(cString));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8041,org.apache.commons.collections4.functors.FalsePredicate.falsePredicate(),8040,org.apache.commons.collections4.functors.FalsePredicate.falsePredicate().evaluate(cInteger));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNotPredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNotPredicate");
        org.apache.commons.collections4.PredicateUtils.notPredicate(null);
        org.apache.commons.collections4.PredicateUtils.notPredicate(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNotPredicateEx() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNotPredicateEx");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAndPredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAndPredicate");
        org.apache.commons.collections4.PredicateUtils.andPredicate(null, null);
        org.apache.commons.collections4.PredicateUtils.andPredicate(null, null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAndPredicateEx() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAndPredicateEx");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2768() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2768");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2769() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2769");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2770() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2770");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2771() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2771");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2772() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2772");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2773() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2773");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2774() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2774");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2775() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2775");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2776() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2776");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2777() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2777");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2778() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2778");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2779() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2779");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2780() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2780");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2781() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2781");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2782() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2782");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2783() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2783");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2784() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2784");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2785() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2785");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2786() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2786");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2787() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2787");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2788() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2788");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2789() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2789");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2790() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2790");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_add2791() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_add2791");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test
    public void testAllPredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2204() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2204");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2205() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2205");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2206() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2206");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2207() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2207");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2208() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2208");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2209() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2209");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2210() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2210");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2211() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2211");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2212() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2212");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2213() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2213");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2214() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2214");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2215() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2215");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2216() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2216");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2217() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2217");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2218() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2218");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2219() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2219");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2220() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2220");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2221() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2221");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2222() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2222");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2223() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2223");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2224() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2224");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2225() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2225");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2226() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2226");
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAllPredicate_remove2227() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicate_remove2227");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7995,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7994,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7997,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7996,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7999,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),7998,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8001,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8000,org.apache.commons.collections4.functors.AllPredicate.allPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8003,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8002,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8005,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8004,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8007,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8006,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8009,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll),8008,org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAllPredicateEx1() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx1");
        org.apache.commons.collections4.functors.AllPredicate.allPredicate(((Predicate<java.lang.Object>[])(null)));
        org.apache.commons.collections4.functors.AllPredicate.allPredicate(((Predicate<java.lang.Object>[])(null)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAllPredicateEx1_remove2228() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx1_remove2228");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAllPredicateEx2_add2793() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx2_add2793");
        org.apache.commons.collections4.functors.AllPredicate.<Object>allPredicate(new Predicate[]{ null });
        org.apache.commons.collections4.functors.AllPredicate.<Object>allPredicate(new Predicate[]{ null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class)
    public void testAllPredicateEx2() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx2");
        org.apache.commons.collections4.functors.AllPredicate.<Object>allPredicate(new Predicate[]{ null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAllPredicateEx2_remove2229() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx2_remove2229");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAllPredicateEx3_add2794() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx3_add2794");
        org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{ null , null });
        org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{ null , null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class)
    public void testAllPredicateEx3() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx3");
        org.apache.commons.collections4.functors.AllPredicate.allPredicate(new Predicate[]{ null , null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAllPredicateEx3_remove2230() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx3_remove2230");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAllPredicateEx4() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx4");
        org.apache.commons.collections4.functors.AllPredicate.allPredicate(((Collection<org.apache.commons.collections4.Predicate<java.lang.Object>>)(null)));
        org.apache.commons.collections4.functors.AllPredicate.allPredicate(((Collection<org.apache.commons.collections4.Predicate<java.lang.Object>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAllPredicateEx4_remove2231() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx4_remove2231");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testAllPredicateEx5() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx5");
        org.apache.commons.collections4.functors.AllPredicate.allPredicate(java.util.Collections.<Predicate<java.lang.Object>>emptyList());
        org.apache.commons.collections4.functors.AllPredicate.allPredicate(java.util.Collections.<Predicate<java.lang.Object>>emptyList());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testAllPredicateEx5_remove2232() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx5_remove2232");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAllPredicateEx6() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx6");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        coll.add(null);
        org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAllPredicateEx6_add2798() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx6_add2798");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        coll.add(null);
        org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAllPredicateEx6_add2799() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx6_add2799");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll);
        org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAllPredicateEx6_remove2233() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx6_remove2233");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAllPredicateEx6_remove2234() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx6_remove2234");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        org.apache.commons.collections4.functors.AllPredicate.allPredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAllPredicateEx6_remove2235() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAllPredicateEx6_remove2235");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testOrPredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOrPredicate");
        org.apache.commons.collections4.PredicateUtils.orPredicate(null, null);
        org.apache.commons.collections4.PredicateUtils.orPredicate(null, null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testOrPredicateEx() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOrPredicateEx");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2801() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2801");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2802() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2802");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2803() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2803");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2804() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2804");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2805() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2805");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2806() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2806");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2807() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2807");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2808() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2808");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2809() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2809");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2810() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2810");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2811() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2811");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2812() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2812");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2813() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2813");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2814() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2814");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2815() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2815");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2816() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2816");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2817() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2817");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2818() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2818");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2819() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2819");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2820() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2820");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2821() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2821");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2822() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2822");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2823() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2823");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_add2824() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_add2824");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test
    public void testAnyPredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2237() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2237");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2238() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2238");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2239() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2239");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2240() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2240");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2241() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2241");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2242() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2242");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2243() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2243");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2244() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2244");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2245() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2245");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2246() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2246");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2247() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2247");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2248() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2248");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2249() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2249");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2250() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2250");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2251() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2251");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2252() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2252");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2253() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2253");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2254() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2254");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2255() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2255");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2256() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2256");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2257() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2257");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2258() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2258");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2259() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2259");
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testAnyPredicate_remove2260() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicate_remove2260");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8011,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8010,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8013,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8012,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8015,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8014,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8017,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8016,org.apache.commons.collections4.PredicateUtils.anyPredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8019,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8018,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8021,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8020,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8023,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8022,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8025,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll),8024,org.apache.commons.collections4.PredicateUtils.anyPredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.anyPredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAnyPredicateEx1() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx1");
        org.apache.commons.collections4.PredicateUtils.anyPredicate(((Predicate<java.lang.Object>[])(null)));
        org.apache.commons.collections4.PredicateUtils.anyPredicate(((Predicate<java.lang.Object>[])(null)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAnyPredicateEx1_remove2261() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx1_remove2261");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAnyPredicateEx2_add2826() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx2_add2826");
        org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{ null });
        org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{ null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class)
    public void testAnyPredicateEx2() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx2");
        org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{ null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAnyPredicateEx2_remove2262() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx2_remove2262");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class)
    public void testAnyPredicateEx3() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx3");
        org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{ null , null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAnyPredicateEx3_add2827() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx3_add2827");
        org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{ null , null });
        org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{ null , null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class)
    public void testAnyPredicateEx3_literalMutation2973() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx3_literalMutation2973");
        org.apache.commons.collections4.PredicateUtils.anyPredicate(new Predicate[]{ null , null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAnyPredicateEx3_remove2263() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx3_remove2263");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testAnyPredicateEx4() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx4");
        org.apache.commons.collections4.PredicateUtils.anyPredicate(((Collection<org.apache.commons.collections4.Predicate<java.lang.Object>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAnyPredicateEx4_add2828() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx4_add2828");
        org.apache.commons.collections4.PredicateUtils.anyPredicate(((Collection<org.apache.commons.collections4.Predicate<java.lang.Object>>)(null)));
        org.apache.commons.collections4.PredicateUtils.anyPredicate(((Collection<org.apache.commons.collections4.Predicate<java.lang.Object>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAnyPredicateEx4_remove2264() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx4_remove2264");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testAnyPredicateEx5() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx5");
        org.apache.commons.collections4.PredicateUtils.anyPredicate(java.util.Collections.<Predicate<java.lang.Object>>emptyList());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testAnyPredicateEx5_add2829() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx5_add2829");
        org.apache.commons.collections4.PredicateUtils.anyPredicate(java.util.Collections.<Predicate<java.lang.Object>>emptyList());
        org.apache.commons.collections4.PredicateUtils.anyPredicate(java.util.Collections.<Predicate<java.lang.Object>>emptyList());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testAnyPredicateEx5_remove2265() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx5_remove2265");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testAnyPredicateEx6() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx6");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        org.apache.commons.collections4.PredicateUtils.anyPredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAnyPredicateEx6_add2830() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx6_add2830");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        coll.add(null);
        org.apache.commons.collections4.PredicateUtils.anyPredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAnyPredicateEx6_add2831() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx6_add2831");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        coll.add(null);
        org.apache.commons.collections4.PredicateUtils.anyPredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAnyPredicateEx6_add2832() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx6_add2832");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        org.apache.commons.collections4.PredicateUtils.anyPredicate(coll);
        org.apache.commons.collections4.PredicateUtils.anyPredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAnyPredicateEx6_remove2266() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx6_remove2266");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        org.apache.commons.collections4.PredicateUtils.anyPredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAnyPredicateEx6_remove2267() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx6_remove2267");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        org.apache.commons.collections4.PredicateUtils.anyPredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAnyPredicateEx6_remove2268() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnyPredicateEx6_remove2268");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testEitherPredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEitherPredicate");
        org.apache.commons.collections4.PredicateUtils.eitherPredicate(null, null);
        org.apache.commons.collections4.PredicateUtils.eitherPredicate(null, null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testEitherPredicateEx() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEitherPredicateEx");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2884() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2884");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2885() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2885");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2886() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2886");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2887() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2887");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2888() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2888");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2889() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2889");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2890() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2890");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2891() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2891");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2892() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2892");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2893() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2893");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2894() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2894");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2895() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2895");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2896() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2896");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2897() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2897");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2898() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2898");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2899() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2899");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2900() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2900");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2901() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2901");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2902() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2902");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2903() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2903");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2904() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2904");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2905() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2905");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2906() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2906");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_add2907() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_add2907");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test
    public void testOnePredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2318() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2318");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2319() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2319");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2320() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2320");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2321() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2321");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2322() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2322");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2323() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2323");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2324() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2324");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2325() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2325");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2326() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2326");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2327() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2327");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2328() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2328");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2329() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2329");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2330() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2330");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2331() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2331");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2332() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2332");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2333() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2333");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2334() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2334");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2335() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2335");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2336() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2336");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2337() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2337");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2338() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2338");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2339() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2339");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2340() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2340");
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(new Predicate[]{  }))), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicate_remove2341() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicate_remove2341");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8107,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8106,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8109,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8108,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8111,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8110,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8113,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8112,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8115,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8114,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8117,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8116,org.apache.commons.collections4.PredicateUtils.onePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8119,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8118,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8121,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8120,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8123,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8122,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8125,org.apache.commons.collections4.PredicateUtils.onePredicate(coll),8124,org.apache.commons.collections4.PredicateUtils.onePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        coll.clear();
        assertFalse(org.apache.commons.collections4.PredicateUtils.onePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testOnePredicateEx1() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx1");
        org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(null)));
        org.apache.commons.collections4.PredicateUtils.onePredicate(((Predicate<java.lang.Object>[])(null)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testOnePredicateEx1_remove2342() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx1_remove2342");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testOnePredicateEx2_add2909() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx2_add2909");
        org.apache.commons.collections4.PredicateUtils.onePredicate(new Predicate[]{ null });
        org.apache.commons.collections4.PredicateUtils.onePredicate(new Predicate[]{ null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class)
    public void testOnePredicateEx2() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx2");
        org.apache.commons.collections4.PredicateUtils.onePredicate(new Predicate[]{ null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testOnePredicateEx2_remove2343() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx2_remove2343");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testOnePredicateEx3_add2910() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx3_add2910");
        org.apache.commons.collections4.PredicateUtils.onePredicate(new Predicate[]{ null , null });
        org.apache.commons.collections4.PredicateUtils.onePredicate(new Predicate[]{ null , null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class)
    public void testOnePredicateEx3() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx3");
        org.apache.commons.collections4.PredicateUtils.onePredicate(new Predicate[]{ null , null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testOnePredicateEx3_remove2344() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx3_remove2344");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testOnePredicateEx4() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx4");
        org.apache.commons.collections4.PredicateUtils.onePredicate(((Collection<org.apache.commons.collections4.Predicate<java.lang.Object>>)(null)));
        org.apache.commons.collections4.PredicateUtils.onePredicate(((Collection<org.apache.commons.collections4.Predicate<java.lang.Object>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testOnePredicateEx4_remove2345() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx4_remove2345");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicateEx5_add2912() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx5_add2912");
        org.apache.commons.collections4.PredicateUtils.onePredicate(java.util.Collections.EMPTY_LIST);
        org.apache.commons.collections4.PredicateUtils.onePredicate(java.util.Collections.EMPTY_LIST);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test
    public void testOnePredicateEx5() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx5");
        org.apache.commons.collections4.PredicateUtils.onePredicate(java.util.Collections.EMPTY_LIST);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testOnePredicateEx5_remove2346() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx5_remove2346");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testOnePredicateEx6() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx6");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        coll.add(null);
        org.apache.commons.collections4.PredicateUtils.onePredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testOnePredicateEx6_add2914() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx6_add2914");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        coll.add(null);
        org.apache.commons.collections4.PredicateUtils.onePredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testOnePredicateEx6_add2915() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx6_add2915");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        org.apache.commons.collections4.PredicateUtils.onePredicate(coll);
        org.apache.commons.collections4.PredicateUtils.onePredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testOnePredicateEx6_remove2347() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx6_remove2347");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        org.apache.commons.collections4.PredicateUtils.onePredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testOnePredicateEx6_remove2348() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx6_remove2348");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        org.apache.commons.collections4.PredicateUtils.onePredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testOnePredicateEx6_remove2349() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOnePredicateEx6_remove2349");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNeitherPredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNeitherPredicate");
        org.apache.commons.collections4.PredicateUtils.neitherPredicate(null, null);
        org.apache.commons.collections4.PredicateUtils.neitherPredicate(null, null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNeitherPredicateEx() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNeitherPredicateEx");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2847() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2847");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2848() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2848");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2849() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2849");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2850() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2850");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2851() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2851");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2852() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2852");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2853() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2853");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2854() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2854");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2855() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2855");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2856() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2856");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2857() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2857");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2858() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2858");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2859() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2859");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2860() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2860");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2861() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2861");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2862() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2862");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2863() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2863");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2864() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2864");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2865() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2865");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2866() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2866");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2867() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2867");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2868() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2868");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2869() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2869");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_add2870() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_add2870");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test
    public void testNonePredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2281() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2281");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2282() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2282");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2283() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2283");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2284() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2284");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2285() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2285");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2286() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2286");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2287() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2287");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2288() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2288");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2289() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2289");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2290() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2290");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2291() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2291");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2292() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2292");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2293() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2293");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2294() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2294");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2295() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2295");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2296() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2296");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2297() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2297");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2298() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2298");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2299() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2299");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2300() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2300");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2301() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2301");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2302() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2302");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2303() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2303");
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{  }), null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(timeout = 1000)
    public void testNonePredicate_remove2304() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicate_remove2304");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8089,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8088,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8091,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8090,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.TruePredicate.truePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8093,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }),8092,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.TruePredicate.truePredicate() }).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8095,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }),8094,org.apache.commons.collections4.PredicateUtils.nonePredicate(new org.apache.commons.collections4.Predicate[]{ org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() , org.apache.commons.collections4.functors.FalsePredicate.falsePredicate() }).evaluate(null));
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8097,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8096,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8099,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8098,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(TruePredicate.truePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8101,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8100,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        coll.add(FalsePredicate.falsePredicate());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8103,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll),8102,org.apache.commons.collections4.PredicateUtils.nonePredicate(coll).evaluate(null));
        coll.clear();
        coll.add(FalsePredicate.falsePredicate());
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        coll.add(TruePredicate.truePredicate());
        assertFalse(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        coll.clear();
        assertTrue(org.apache.commons.collections4.PredicateUtils.nonePredicate(coll), null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNonePredicateEx1() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx1");
        org.apache.commons.collections4.PredicateUtils.nonePredicate(((Predicate<java.lang.Object>[])(null)));
        org.apache.commons.collections4.PredicateUtils.nonePredicate(((Predicate<java.lang.Object>[])(null)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNonePredicateEx1_remove2305() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx1_remove2305");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNonePredicateEx2_add2872() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx2_add2872");
        org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{ null });
        org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{ null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class)
    public void testNonePredicateEx2() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx2");
        org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{ null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNonePredicateEx2_remove2306() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx2_remove2306");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNonePredicateEx3_add2873() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx3_add2873");
        org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{ null , null });
        org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{ null , null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class)
    public void testNonePredicateEx3() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx3");
        org.apache.commons.collections4.PredicateUtils.nonePredicate(new Predicate[]{ null , null });
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = "unchecked")
    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNonePredicateEx3_remove2307() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx3_remove2307");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNonePredicateEx4() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx4");
        org.apache.commons.collections4.PredicateUtils.nonePredicate(((Collection<org.apache.commons.collections4.Predicate<java.lang.Object>>)(null)));
        org.apache.commons.collections4.PredicateUtils.nonePredicate(((Collection<org.apache.commons.collections4.Predicate<java.lang.Object>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNonePredicateEx4_remove2308() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx4_remove2308");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNonePredicateEx5() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx5");
        org.apache.commons.collections4.PredicateUtils.nonePredicate(java.util.Collections.<Predicate<java.lang.Object>>emptyList());
        org.apache.commons.collections4.PredicateUtils.nonePredicate(java.util.Collections.<Predicate<java.lang.Object>>emptyList());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNonePredicateEx5_remove2309() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx5_remove2309");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNonePredicateEx6() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx6");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        coll.add(null);
        org.apache.commons.collections4.PredicateUtils.nonePredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNonePredicateEx6_add2877() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx6_add2877");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        coll.add(null);
        org.apache.commons.collections4.PredicateUtils.nonePredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNonePredicateEx6_add2878() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx6_add2878");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        org.apache.commons.collections4.PredicateUtils.nonePredicate(coll);
        org.apache.commons.collections4.PredicateUtils.nonePredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNonePredicateEx6_remove2310() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx6_remove2310");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        org.apache.commons.collections4.PredicateUtils.nonePredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNonePredicateEx6_remove2311() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx6_remove2311");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        org.apache.commons.collections4.PredicateUtils.nonePredicate(coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNonePredicateEx6_remove2312() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNonePredicateEx6_remove2312");
        final Collection<org.apache.commons.collections4.Predicate<java.lang.Object>> coll = new ArrayList<org.apache.commons.collections4.Predicate<java.lang.Object>>();
        coll.add(null);
        coll.add(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testInstanceOfPredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInstanceOfPredicate");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8059,null,8058,org.apache.commons.collections4.PredicateUtils.instanceofPredicate(java.lang.String.class));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8061,org.apache.commons.collections4.PredicateUtils.instanceofPredicate(java.lang.String.class),8060,org.apache.commons.collections4.PredicateUtils.instanceofPredicate(java.lang.String.class).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8063,org.apache.commons.collections4.PredicateUtils.instanceofPredicate(java.lang.String.class),8062,org.apache.commons.collections4.PredicateUtils.instanceofPredicate(java.lang.String.class).evaluate(cObject));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8065,org.apache.commons.collections4.PredicateUtils.instanceofPredicate(java.lang.String.class),8064,org.apache.commons.collections4.PredicateUtils.instanceofPredicate(java.lang.String.class).evaluate(cString));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8067,org.apache.commons.collections4.PredicateUtils.instanceofPredicate(java.lang.String.class),8066,org.apache.commons.collections4.PredicateUtils.instanceofPredicate(java.lang.String.class).evaluate(cInteger));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testUniquePredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUniquePredicate");
        final Predicate<java.lang.Object> p = org.apache.commons.collections4.PredicateUtils.uniquePredicate();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8145,p,8144,p.evaluate(new java.lang.Object()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8147,p,8146,p.evaluate(new java.lang.Object()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8149,p,8148,p.evaluate(new java.lang.Object()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8151,p,8150,p.evaluate(cString));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8153,p,8152,p.evaluate(cString));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8155,p,8154,p.evaluate(cString));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAsPredicateTransformer() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAsPredicateTransformer");
        org.apache.commons.collections4.PredicateUtils.asPredicate(null);
        org.apache.commons.collections4.PredicateUtils.asPredicate(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testAsPredicateTransformerEx1() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAsPredicateTransformerEx1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class, timeout = 1000)
    public void testAsPredicateTransformerEx2() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAsPredicateTransformerEx2");
        org.apache.commons.collections4.PredicateUtils.asPredicate(org.apache.commons.collections4.TransformerUtils.<java.lang.Boolean>nopTransformer()).evaluate(null);
        org.apache.commons.collections4.PredicateUtils.asPredicate(org.apache.commons.collections4.TransformerUtils.<java.lang.Boolean>nopTransformer()).evaluate(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class, timeout = 1000)
    public void testAsPredicateTransformerEx2_remove2270() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAsPredicateTransformerEx2_remove2270");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testInvokerPredicate_add2838() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicate_add2838");
        final List<java.lang.Object> list = new ArrayList<java.lang.Object>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8073,org.apache.commons.collections4.PredicateUtils.invokerPredicate("isEmpty"),8072,org.apache.commons.collections4.PredicateUtils.invokerPredicate("isEmpty").evaluate(list));
        list.add(new Object());
        list.add(new Object());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8075,org.apache.commons.collections4.PredicateUtils.invokerPredicate("isEmpty"),8074,org.apache.commons.collections4.PredicateUtils.invokerPredicate("isEmpty").evaluate(list));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testInvokerPredicate_remove2272() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicate_remove2272");
        final List<java.lang.Object> list = new ArrayList<java.lang.Object>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8073,org.apache.commons.collections4.PredicateUtils.invokerPredicate("isEmpty"),8072,org.apache.commons.collections4.PredicateUtils.invokerPredicate("isEmpty").evaluate(list));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8075,org.apache.commons.collections4.PredicateUtils.invokerPredicate("isEmpty"),8074,org.apache.commons.collections4.PredicateUtils.invokerPredicate("isEmpty").evaluate(list));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testInvokerPredicateEx1() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicateEx1");
        org.apache.commons.collections4.PredicateUtils.invokerPredicate(null);
        org.apache.commons.collections4.PredicateUtils.invokerPredicate(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testInvokerPredicateEx1_remove2277() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicateEx1_remove2277");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class, timeout = 1000)
    public void testInvokerPredicateEx2_add2844() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicateEx2_add2844");
        org.apache.commons.collections4.PredicateUtils.invokerPredicate("isEmpty").evaluate(null);
        org.apache.commons.collections4.PredicateUtils.invokerPredicate("isEmpty").evaluate(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class)
    public void testInvokerPredicateEx2() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicateEx2");
        org.apache.commons.collections4.PredicateUtils.invokerPredicate("foo").evaluate(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class, timeout = 1000)
    public void testInvokerPredicateEx2_remove2278() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicateEx2_remove2278");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class, timeout = 1000)
    public void testInvokerPredicateEx3_add2845() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicateEx3_add2845");
        org.apache.commons.collections4.PredicateUtils.invokerPredicate("noSuchMethod").evaluate(new Object());
        org.apache.commons.collections4.PredicateUtils.invokerPredicate("noSuchMethod").evaluate(new Object());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class)
    public void testInvokerPredicateEx3() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicateEx3");
        org.apache.commons.collections4.PredicateUtils.invokerPredicate("foo").evaluate(new Object());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class, timeout = 1000)
    public void testInvokerPredicateEx3_remove2279() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicateEx3_remove2279");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testInvokerPredicate2_add2839() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicate2_add2839");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8069,org.apache.commons.collections4.PredicateUtils.invokerPredicate("contains", new java.lang.Class[]{ java.lang.Object.class }, new java.lang.Object[]{ cString }),8068,org.apache.commons.collections4.PredicateUtils.invokerPredicate("contains", new java.lang.Class[]{ java.lang.Object.class }, new java.lang.Object[]{ cString }).evaluate(list));
        list.add(cString);
        list.add(cString);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8071,org.apache.commons.collections4.PredicateUtils.invokerPredicate("contains", new java.lang.Class[]{ java.lang.Object.class }, new java.lang.Object[]{ cString }),8070,org.apache.commons.collections4.PredicateUtils.invokerPredicate("contains", new java.lang.Class[]{ java.lang.Object.class }, new java.lang.Object[]{ cString }).evaluate(list));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testInvokerPredicate2_remove2273() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicate2_remove2273");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8069,org.apache.commons.collections4.PredicateUtils.invokerPredicate("contains", new java.lang.Class[]{ java.lang.Object.class }, new java.lang.Object[]{ cString }),8068,org.apache.commons.collections4.PredicateUtils.invokerPredicate("contains", new java.lang.Class[]{ java.lang.Object.class }, new java.lang.Object[]{ cString }).evaluate(list));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8071,org.apache.commons.collections4.PredicateUtils.invokerPredicate("contains", new java.lang.Class[]{ java.lang.Object.class }, new java.lang.Object[]{ cString }),8070,org.apache.commons.collections4.PredicateUtils.invokerPredicate("contains", new java.lang.Class[]{ java.lang.Object.class }, new java.lang.Object[]{ cString }).evaluate(list));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testInvokerPredicate2Ex1() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicate2Ex1");
        org.apache.commons.collections4.PredicateUtils.invokerPredicate(null, null, null);
        org.apache.commons.collections4.PredicateUtils.invokerPredicate(null, null, null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testInvokerPredicate2Ex1_remove2274() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicate2Ex1_remove2274");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class, timeout = 1000)
    public void testInvokerPredicate2Ex2() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicate2Ex2");
        org.apache.commons.collections4.PredicateUtils.invokerPredicate("contains", new java.lang.Class[]{ Object.class }, new Object[]{ cString }).evaluate(null);
        org.apache.commons.collections4.PredicateUtils.invokerPredicate("contains", new java.lang.Class[]{ Object.class }, new Object[]{ cString }).evaluate(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class)
    public void testInvokerPredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicate");
        org.apache.commons.collections4.PredicateUtils.invokerPredicate("foo", new java.lang.Class[]{ Object.class }, new Object[]{ cString }).evaluate(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class, timeout = 1000)
    public void testInvokerPredicate2Ex2_remove2275() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicate2Ex2_remove2275");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class, timeout = 1000)
    public void testInvokerPredicate2Ex3() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicate2Ex3");
        org.apache.commons.collections4.PredicateUtils.invokerPredicate("noSuchMethod", new java.lang.Class[]{ Object.class }, new Object[]{ cString }).evaluate(new Object());
        org.apache.commons.collections4.PredicateUtils.invokerPredicate("noSuchMethod", new java.lang.Class[]{ Object.class }, new Object[]{ cString }).evaluate(new Object());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class)
    public void testInvokerPredicate2() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicate2");
        org.apache.commons.collections4.PredicateUtils.invokerPredicate("foo", new java.lang.Class[]{ Object.class }, new Object[]{ cString }).evaluate(new Object());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class, timeout = 1000)
    public void testInvokerPredicate2Ex3_remove2276() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvokerPredicate2Ex3_remove2276");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class, timeout = 1000)
    public void testNullIsExceptionPredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNullIsExceptionPredicate");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8105,org.apache.commons.collections4.PredicateUtils.nullIsExceptionPredicate(org.apache.commons.collections4.functors.TruePredicate.truePredicate()),8104,org.apache.commons.collections4.PredicateUtils.nullIsExceptionPredicate(org.apache.commons.collections4.functors.TruePredicate.truePredicate()).evaluate(new java.lang.Object()));
        org.apache.commons.collections4.PredicateUtils.nullIsExceptionPredicate(TruePredicate.truePredicate()).evaluate(null);
        org.apache.commons.collections4.PredicateUtils.nullIsExceptionPredicate(TruePredicate.truePredicate()).evaluate(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class, timeout = 1000)
    public void testNullIsExceptionPredicate_remove2314() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNullIsExceptionPredicate_remove2314");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8105,org.apache.commons.collections4.PredicateUtils.nullIsExceptionPredicate(org.apache.commons.collections4.functors.TruePredicate.truePredicate()),8104,org.apache.commons.collections4.PredicateUtils.nullIsExceptionPredicate(org.apache.commons.collections4.functors.TruePredicate.truePredicate()).evaluate(new java.lang.Object()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNullIsExceptionPredicateEx1() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNullIsExceptionPredicateEx1");
        org.apache.commons.collections4.PredicateUtils.nullIsExceptionPredicate(null);
        org.apache.commons.collections4.PredicateUtils.nullIsExceptionPredicate(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNullIsExceptionPredicateEx1_remove2315() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNullIsExceptionPredicateEx1_remove2315");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNullIsTruePredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNullIsTruePredicate");
        org.apache.commons.collections4.PredicateUtils.nullIsTruePredicate(null);
        org.apache.commons.collections4.PredicateUtils.nullIsTruePredicate(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNullIsTruePredicateEx1() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNullIsTruePredicateEx1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNullIsFalsePredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNullIsFalsePredicate");
        org.apache.commons.collections4.PredicateUtils.nullIsFalsePredicate(null);
        org.apache.commons.collections4.PredicateUtils.nullIsFalsePredicate(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testNullIsFalsePredicateEx1() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNullIsFalsePredicateEx1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testTransformedPredicate_add2918() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedPredicate_add2918");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8127,org.apache.commons.collections4.PredicateUtils.transformedPredicate(org.apache.commons.collections4.TransformerUtils.nopTransformer(), org.apache.commons.collections4.functors.TruePredicate.truePredicate()),8126,org.apache.commons.collections4.PredicateUtils.transformedPredicate(org.apache.commons.collections4.TransformerUtils.nopTransformer(), org.apache.commons.collections4.functors.TruePredicate.truePredicate()).evaluate(new java.lang.Object()));
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(java.lang.Boolean.TRUE, "Hello");
        map.put(java.lang.Boolean.TRUE, "Hello");
        final Transformer<java.lang.Object, java.lang.Object> t = org.apache.commons.collections4.TransformerUtils.mapTransformer(map);
        final Predicate<java.lang.Object> p = org.apache.commons.collections4.functors.EqualPredicate.<Object>equalPredicate("Hello");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8129,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p),8128,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8131,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p),8130,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p).evaluate(java.lang.Boolean.TRUE));
        try {
            org.apache.commons.collections4.PredicateUtils.transformedPredicate(null, null);
        } catch (final IllegalArgumentException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testTransformedPredicate_add2919() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedPredicate_add2919");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8127,org.apache.commons.collections4.PredicateUtils.transformedPredicate(org.apache.commons.collections4.TransformerUtils.nopTransformer(), org.apache.commons.collections4.functors.TruePredicate.truePredicate()),8126,org.apache.commons.collections4.PredicateUtils.transformedPredicate(org.apache.commons.collections4.TransformerUtils.nopTransformer(), org.apache.commons.collections4.functors.TruePredicate.truePredicate()).evaluate(new java.lang.Object()));
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(java.lang.Boolean.TRUE, "Hello");
        final Transformer<java.lang.Object, java.lang.Object> t = org.apache.commons.collections4.TransformerUtils.mapTransformer(map);
        final Predicate<java.lang.Object> p = org.apache.commons.collections4.functors.EqualPredicate.<Object>equalPredicate("Hello");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8129,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p),8128,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8131,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p),8130,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p).evaluate(java.lang.Boolean.TRUE));
        try {
            org.apache.commons.collections4.PredicateUtils.transformedPredicate(null, null);
            org.apache.commons.collections4.PredicateUtils.transformedPredicate(null, null);
        } catch (final IllegalArgumentException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testTransformedPredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedPredicate");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8127,org.apache.commons.collections4.PredicateUtils.transformedPredicate(org.apache.commons.collections4.TransformerUtils.nopTransformer(), org.apache.commons.collections4.functors.TruePredicate.truePredicate()),8126,org.apache.commons.collections4.PredicateUtils.transformedPredicate(org.apache.commons.collections4.TransformerUtils.nopTransformer(), org.apache.commons.collections4.functors.TruePredicate.truePredicate()).evaluate(new java.lang.Object()));
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(java.lang.Boolean.TRUE, "foo");
        final Transformer<java.lang.Object, java.lang.Object> t = org.apache.commons.collections4.TransformerUtils.mapTransformer(map);
        final Predicate<java.lang.Object> p = org.apache.commons.collections4.functors.EqualPredicate.<Object>equalPredicate("Hello");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8129,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p),8128,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8131,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p),8130,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p).evaluate(java.lang.Boolean.TRUE));
        try {
            org.apache.commons.collections4.PredicateUtils.transformedPredicate(null, null);
        } catch (final IllegalArgumentException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testTransformedPredicate_literalMutation3034() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedPredicate_literalMutation3034");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8127,org.apache.commons.collections4.PredicateUtils.transformedPredicate(org.apache.commons.collections4.TransformerUtils.nopTransformer(), org.apache.commons.collections4.functors.TruePredicate.truePredicate()),8126,org.apache.commons.collections4.PredicateUtils.transformedPredicate(org.apache.commons.collections4.TransformerUtils.nopTransformer(), org.apache.commons.collections4.functors.TruePredicate.truePredicate()).evaluate(new java.lang.Object()));
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(java.lang.Boolean.TRUE, "Hello");
        final Transformer<java.lang.Object, java.lang.Object> t = org.apache.commons.collections4.TransformerUtils.mapTransformer(map);
        final Predicate<java.lang.Object> p = org.apache.commons.collections4.functors.EqualPredicate.<Object>equalPredicate("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8129,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p),8128,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8131,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p),8130,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p).evaluate(java.lang.Boolean.TRUE));
        try {
            org.apache.commons.collections4.PredicateUtils.transformedPredicate(null, null);
        } catch (final IllegalArgumentException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testTransformedPredicate_remove2352() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedPredicate_remove2352");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8127,org.apache.commons.collections4.PredicateUtils.transformedPredicate(org.apache.commons.collections4.TransformerUtils.nopTransformer(), org.apache.commons.collections4.functors.TruePredicate.truePredicate()),8126,org.apache.commons.collections4.PredicateUtils.transformedPredicate(org.apache.commons.collections4.TransformerUtils.nopTransformer(), org.apache.commons.collections4.functors.TruePredicate.truePredicate()).evaluate(new java.lang.Object()));
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Transformer<java.lang.Object, java.lang.Object> t = org.apache.commons.collections4.TransformerUtils.mapTransformer(map);
        final Predicate<java.lang.Object> p = org.apache.commons.collections4.functors.EqualPredicate.<Object>equalPredicate("Hello");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8129,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p),8128,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p).evaluate(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),8131,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p),8130,org.apache.commons.collections4.PredicateUtils.transformedPredicate(t, p).evaluate(java.lang.Boolean.TRUE));
        try {
            org.apache.commons.collections4.PredicateUtils.transformedPredicate(null, null);
        } catch (final IllegalArgumentException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Test that all Predicate singletones hold singleton pattern in
     * serialization/deserialization process.
     */
@Test
    public void testSingletonPatternInSerialization() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSingletonPatternInSerialization");
        final Object[] singletones = new Object[]{ ExceptionPredicate.INSTANCE , FalsePredicate.INSTANCE , NotNullPredicate.INSTANCE , NullPredicate.INSTANCE , TruePredicate.INSTANCE };
        for (final Object original : singletones) {
            org.apache.commons.collections4.TestUtils.assertSameAfterSerialization(("Singletone patern broken for " + (original.getClass())), original);
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Test that all Predicate singletones hold singleton pattern in
     * serialization/deserialization process.
     */
@Test(timeout = 1000)
    public void testSingletonPatternInSerialization_add2917() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSingletonPatternInSerialization_add2917");
        final Object[] singletones = new Object[]{ ExceptionPredicate.INSTANCE , FalsePredicate.INSTANCE , NotNullPredicate.INSTANCE , NullPredicate.INSTANCE , TruePredicate.INSTANCE };
        for (final Object original : singletones) {
            org.apache.commons.collections4.TestUtils.assertSameAfterSerialization(("Singletone patern broken for " + (original.getClass())), original);
            org.apache.commons.collections4.TestUtils.assertSameAfterSerialization(("Singletone patern broken for " + (original.getClass())), original);
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Test that all Predicate singletones hold singleton pattern in
     * serialization/deserialization process.
     */
@Test
    public void testSingletonPatternInSerialization_literalMutation3032() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSingletonPatternInSerialization_literalMutation3032");
        final Object[] singletones = new Object[]{ ExceptionPredicate.INSTANCE , FalsePredicate.INSTANCE , NotNullPredicate.INSTANCE , NullPredicate.INSTANCE , TruePredicate.INSTANCE };
        for (final Object original : singletones) {
            org.apache.commons.collections4.TestUtils.assertSameAfterSerialization(("foo" + (original.getClass())), original);
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Test that all Predicate singletones hold singleton pattern in
     * serialization/deserialization process.
     */
@Test(timeout = 1000)
    public void testSingletonPatternInSerialization_remove2351() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSingletonPatternInSerialization_remove2351");
        final Object[] singletones = new Object[]{ ExceptionPredicate.INSTANCE , FalsePredicate.INSTANCE , NotNullPredicate.INSTANCE , NullPredicate.INSTANCE , TruePredicate.INSTANCE };
        for (final Object original : singletones) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Override
    protected Predicate<?> generatePredicate() {
        return TruePredicate.truePredicate();
    }
}

