package org.apache.commons.collections4;

import java.util.ArrayList;
import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.HashSet;
import org.apache.commons.collections4.map.HashedMap;
import java.util.Iterator;
import java.util.List;
import java.util.ListResourceBundle;
import java.util.Map;
import org.apache.commons.collections4.map.MultiValueMap;
import java.io.PrintStream;
import java.util.ResourceBundle;
import java.util.Set;
import junit.framework.Test;
import java.util.TreeMap;

/** 
 * Tests for MapUtils.
 * 
 * @version $Id$
 */
@SuppressWarnings(value = "boxing")
public class MapUtilsTest extends BulkTest {
    public MapUtilsTest(final String name) {
        super(name);
    }

    public static Test suite() {
        return BulkTest.makeSuite(MapUtilsTest.class);
    }

    public Predicate<java.lang.Object> getPredicate() {
        return new Predicate<java.lang.Object>() {
            public boolean evaluate(final Object o) {
                return o instanceof String;
            }
        };
    }

    @org.junit.Test(timeout = 1000)
    public void testPredicatedMap() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPredicatedMap");
        final Predicate<java.lang.Object> p = getPredicate();
        Map<java.lang.Object, java.lang.Object> map = org.apache.commons.collections4.MapUtils.predicatedMap(new HashMap<java.lang.Object, java.lang.Object>(), p, p);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7900,(map instanceof org.apache.commons.collections4.map.PredicatedMap));
        try {
            org.apache.commons.collections4.MapUtils.predicatedMap(null, p, p);
            org.apache.commons.collections4.MapUtils.predicatedMap(null, p, p);
        } catch (final IllegalArgumentException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLazyMapFactory() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLazyMapFactory");
        final Factory<java.lang.Integer> factory = org.apache.commons.collections4.FactoryUtils.constantFactory(Integer.valueOf(6));
        Map<java.lang.Object, java.lang.Object> map = org.apache.commons.collections4.MapUtils.lazyMap(new HashMap<java.lang.Object, java.lang.Object>(), factory);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7850,(map instanceof org.apache.commons.collections4.map.LazyMap));
        try {
            map = org.apache.commons.collections4.MapUtils.lazyMap(new HashMap<java.lang.Object, java.lang.Object>(), ((Factory<java.lang.Object>)(null)));
        } catch (final IllegalArgumentException e) {
        }
        try {
            map = org.apache.commons.collections4.MapUtils.lazyMap(((Map<java.lang.Object, java.lang.Object>)(null)), factory);
        } catch (final IllegalArgumentException e) {
        }
        final Transformer<java.lang.Object, java.lang.Integer> transformer = org.apache.commons.collections4.TransformerUtils.asTransformer(factory);
        map = org.apache.commons.collections4.MapUtils.lazyMap(new HashMap<java.lang.Object, java.lang.Object>(), transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7851,(map instanceof org.apache.commons.collections4.map.LazyMap));
        try {
            map = org.apache.commons.collections4.MapUtils.lazyMap(new HashMap<java.lang.Object, java.lang.Object>(), ((Transformer<java.lang.Object, java.lang.Object>)(null)));
        } catch (final IllegalArgumentException e) {
        }
        try {
            map = org.apache.commons.collections4.MapUtils.lazyMap(((Map<java.lang.Object, java.lang.Object>)(null)), transformer);
        } catch (final IllegalArgumentException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testLazyMapTransformer_add2667() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLazyMapTransformer_add2667");
        final Map<java.lang.Object, java.lang.Object> map = org.apache.commons.collections4.MapUtils.lazyMap(new HashMap<java.lang.Object, java.lang.Object>(), new Transformer<java.lang.Object, java.lang.Object>() {
            public Object transform(final Object mapKey) {
                if (mapKey instanceof String) {
                    return Integer.valueOf(((String)(mapKey)));
                } 
                return null;
            }
        });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7853,map,7852,map.size());
        final Integer i1 = ((Integer)(map.get("5")));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7855,null,7854,java.lang.Integer.valueOf(5));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7856,i1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),569,map,568,map.size());
        final Integer i2 = ((Integer)(map.get(new String(new char[]{ '5' }))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7858,null,7857,java.lang.Integer.valueOf(5));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7859,i2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7861,map,7860,map.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7862,i1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7863,i2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLazyMapTransformer() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLazyMapTransformer");
        final Map<java.lang.Object, java.lang.Object> map = org.apache.commons.collections4.MapUtils.lazyMap(new HashMap<java.lang.Object, java.lang.Object>(), new Transformer<java.lang.Object, java.lang.Object>() {
            public Object transform(final Object mapKey) {
                if (mapKey instanceof String) {
                    return Integer.valueOf(((String)(mapKey)));
                } 
                return null;
            }
        });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7853,map,7852,map.size());
        final Integer i1 = ((Integer)(map.get("foo")));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7855,null,7854,java.lang.Integer.valueOf(5));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7856,i1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),569,map,568,map.size());
        final Integer i2 = ((Integer)(map.get(new String(new char[]{ '5' }))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7858,null,7857,java.lang.Integer.valueOf(5));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7859,i2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7861,map,7860,map.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7862,i1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7863,i2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testLazyMapTransformer_remove2110() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLazyMapTransformer_remove2110");
        final Map<java.lang.Object, java.lang.Object> map = org.apache.commons.collections4.MapUtils.lazyMap(new HashMap<java.lang.Object, java.lang.Object>(), new Transformer<java.lang.Object, java.lang.Object>() {
            public Object transform(final Object mapKey) {
                if (mapKey instanceof String) {
                    return Integer.valueOf(((String)(mapKey)));
                } 
                return null;
            }
        });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7853,map,7852,map.size());
        final Integer i1 = ((Integer)(map.get("5")));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7855,null,7854,java.lang.Integer.valueOf(5));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7856,i1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),569,map,568,map.size());
        final Integer i2 = ((Integer)(map.get(new String(new char[]{ '5' }))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7858,null,7857,java.lang.Integer.valueOf(5));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7859,i2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7861,map,7860,map.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7862,i1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7863,i2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testInvertMap_add2652() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_add2652");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testInvertMap_add2653() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_add2653");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testInvertMap_add2654() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_add2654");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testInvertMap_add2655() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_add2655");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testInvertMap_add2656() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_add2656");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testInvertMap() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(6 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testInvertMap_literalMutation2746() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_literalMutation2746");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 0);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testInvertMap_literalMutation2747() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_literalMutation2747");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("foo", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testInvertMap_literalMutation2748() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_literalMutation2748");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "foo");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testInvertMap_literalMutation2749() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_literalMutation2749");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("foo", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testInvertMap_literalMutation2750() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_literalMutation2750");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "foo");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testInvertMap_literalMutation2751() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_literalMutation2751");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("foo", "C");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testInvertMap_literalMutation2752() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_literalMutation2752");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "foo");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testInvertMap_literalMutation2753() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_literalMutation2753");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("foo", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testInvertMap_literalMutation2754() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_literalMutation2754");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "foo");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testInvertMap_literalMutation2755() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_literalMutation2755");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("foo", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testInvertMap_literalMutation2756() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_literalMutation2756");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "foo");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testInvertMap_remove2097() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_remove2097");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testInvertMap_remove2098() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_remove2098");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testInvertMap_remove2099() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_remove2099");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testInvertMap_remove2100() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_remove2100");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testInvertMap_remove2101() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testInvertMap_remove2101");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final Set<java.lang.String> inKeySet = new HashSet<java.lang.String>(in.keySet());
        final Set<java.lang.String> inValSet = new HashSet<java.lang.String>(in.values());
        final Map<java.lang.String, java.lang.String> out = org.apache.commons.collections4.MapUtils.invertMap(in);
        final Set<java.lang.String> outKeySet = new HashSet<java.lang.String>(out.keySet());
        final Set<java.lang.String> outValSet = new HashSet<java.lang.String>(out.values());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7811,inKeySet,7810,inKeySet.equals(outValSet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7813,inValSet,7812,inValSet.equals(outKeySet));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7815,out,7814,out.get("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7817,out,7816,out.get("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7819,out,7818,out.get("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7821,out,7820,out.get("D"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7823,out,7822,out.get("E"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPutAll_Map_array_add2685() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_add2685");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPutAll_Map_array_add2686() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_add2686");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPutAll_Map_array_add2687() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_add2687");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPutAll_Map_array_add2688() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_add2688");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPutAll_Map_array_add2689() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_add2689");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[-1]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2811() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2811");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[1]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2812() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2812");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "foo" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2813() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2813");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "foo" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2814() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2814");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "foo" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2815() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2815");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "foo" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2816() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2816");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "foo" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2817() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2817");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "foo" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2818() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2818");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "foo" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2819() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2819");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "foo" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2821() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2821");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "foo" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2822() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2822");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "foo" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2823() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2823");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "foo" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2824() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2824");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "foo" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2825() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2825");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "foo" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2826() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2826");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "foo" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2827() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2827");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "foo" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2828() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2828");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "foo" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2829() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2829");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "foo" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2830() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2830");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "foo" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2831() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2831");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "foo" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2832() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2832");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "foo" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2833() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2833");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "foo" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2834() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2834");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "foo" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2835() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2835");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "foo" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2836() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2836");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "foo" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2837() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2837");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "foo" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2838() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2838");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "foo" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2839() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2839");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "foo" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2840() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2840");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "foo" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2841() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2841");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "foo" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2842() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2842");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "foo" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2843() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2843");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "foo" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2844() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2844");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "foo" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2845() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2845");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("foo" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2846() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2846");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "foo") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2847() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2847");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("foo" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2848() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2848");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "foo") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2849() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2849");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("foo" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2850() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2850");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "foo") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2851() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2851");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("foo" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2852() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2852");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "foo") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2853() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2853");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("foo" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2854() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2854");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "foo") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2855() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2855");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("foo" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPutAll_Map_array_literalMutation2856() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPutAll_Map_array_literalMutation2856");
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, null);
        } catch (final NullPointerException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(null, new Object[0]);
        } catch (final NullPointerException ex) {
        }
        Map<java.lang.String, java.lang.String> test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[0]);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7902,test,7901,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" , "#00FF00" } , new String[]{ "BLUE" , "#0000FF" } });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7904,test,7903,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7906,test,7905,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7908,test,7907,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7910,test,7909,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7912,test,7911,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7914,test,7913,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7916,test,7915,test.size());
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , null , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{ "GREEN" } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[][]{ new String[]{ "RED" , "#FF0000" } , new String[]{  } , new String[]{ "BLUE" , "#0000FF" } });
        } catch (final IllegalArgumentException ex) {
        }
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7918,test,7917,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7920,test,7919,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7922,test,7921,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7924,test,7923,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7926,test,7925,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7928,test,7927,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7930,test,7929,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new String[]{ "RED" , "#FF0000" , "GREEN" , "#00FF00" , "BLUE" , "#0000FF" , "PURPLE" });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7932,test,7931,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7934,test,7933,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7936,test,7935,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7938,test,7937,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7940,test,7939,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7942,test,7941,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7944,test,7943,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultMapEntry<java.lang.String, java.lang.String>("BLUE" , "#0000FF") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7946,test,7945,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7948,test,7947,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7950,test,7949,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7952,test,7951,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7954,test,7953,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7956,test,7955,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7958,test,7957,test.size());
        test = org.apache.commons.collections4.MapUtils.putAll(new HashMap<java.lang.String, java.lang.String>(), new Object[]{ new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("RED" , "#FF0000") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("GREEN" , "#00FF00") , new org.apache.commons.collections4.keyvalue.DefaultKeyValue<java.lang.String, java.lang.String>("BLUE" , "foo") });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7960,test,7959,test.containsKey("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7962,test,7961,test.get("RED"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7964,test,7963,test.containsKey("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7966,test,7965,test.get("GREEN"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7968,test,7967,test.containsKey("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7970,test,7969,test.get("BLUE"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7972,test,7971,test.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testConvertResourceBundle_add2558() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_add2558");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testConvertResourceBundle_add2559() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_add2559");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testConvertResourceBundle_add2560() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_add2560");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testConvertResourceBundle_add2561() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_add2561");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testConvertResourceBundle_add2562() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_add2562");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testConvertResourceBundle_add2563() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_add2563");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testConvertResourceBundle() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(4 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testConvertResourceBundle_literalMutation2621() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_literalMutation2621");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 0);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testConvertResourceBundle_literalMutation2622() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_literalMutation2622");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("foo", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testConvertResourceBundle_literalMutation2623() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_literalMutation2623");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "foo");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testConvertResourceBundle_literalMutation2624() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_literalMutation2624");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("foo", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testConvertResourceBundle_literalMutation2625() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_literalMutation2625");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "foo");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testConvertResourceBundle_literalMutation2626() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_literalMutation2626");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("foo", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testConvertResourceBundle_literalMutation2627() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_literalMutation2627");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "foo");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testConvertResourceBundle_literalMutation2628() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_literalMutation2628");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("foo", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testConvertResourceBundle_literalMutation2629() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_literalMutation2629");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "foo");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testConvertResourceBundle_literalMutation2630() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_literalMutation2630");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("foo", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testConvertResourceBundle_literalMutation2631() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_literalMutation2631");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "foo");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testConvertResourceBundle_literalMutation2632() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_literalMutation2632");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][3];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testConvertResourceBundle_literalMutation2633() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_literalMutation2633");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = -1;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testConvertResourceBundle_literalMutation2634() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_literalMutation2634");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][-1] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testConvertResourceBundle_literalMutation2635() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_literalMutation2635");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][0] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testConvertResourceBundle_remove2005() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_remove2005");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testConvertResourceBundle_remove2006() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_remove2006");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testConvertResourceBundle_remove2007() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_remove2007");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testConvertResourceBundle_remove2008() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_remove2008");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testConvertResourceBundle_remove2009() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_remove2009");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testConvertResourceBundle_remove2010() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testConvertResourceBundle_remove2010");
        final Map<java.lang.String, java.lang.String> in = new HashMap<java.lang.String, java.lang.String>(5 , 1);
        in.put("1", "A");
        in.put("2", "B");
        in.put("3", "C");
        in.put("4", "D");
        in.put("5", "E");
        final ResourceBundle b = new ListResourceBundle() {
            @Override
            public Object[][] getContents() {
                final Object[][] contents = new Object[in.size()][2];
                final Iterator<java.lang.String> i = in.keySet().iterator();
                int n = 0;
                while (i.hasNext()) {
                    final Object key = i.next();
                    final Object val = in.get(key);
                    contents[n][0] = key;
                    contents[n][1] = val;
                    ++n;
                }
                return contents;
            }
        };
        final Map<java.lang.String, java.lang.Object> out = org.apache.commons.collections4.MapUtils.toMap(b);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7777,in,7776,in.equals(out));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintCasting_add2564() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_add2564");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(2, "B");
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintCasting_add2565() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_add2565");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(2, "B");
        inner.put(3, "C");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintCasting_add2566() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_add2566");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintCasting_add2567() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_add2567");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(1, "A");
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintCasting_add2568() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_add2568");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugAndVerbosePrintCasting() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(1 , 1);
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugAndVerbosePrintCasting_literalMutation2637() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_literalMutation2637");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 0);
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugAndVerbosePrintCasting_literalMutation2638() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_literalMutation2638");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(3, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugAndVerbosePrintCasting_literalMutation2639() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_literalMutation2639");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(2, "foo");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugAndVerbosePrintCasting_literalMutation2640() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_literalMutation2640");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(2, "B");
        inner.put(2, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugAndVerbosePrintCasting_literalMutation2641() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_literalMutation2641");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(2, "B");
        inner.put(3, "foo");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugAndVerbosePrintCasting_literalMutation2642() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_literalMutation2642");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(3 , 1);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugAndVerbosePrintCasting_literalMutation2643() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_literalMutation2643");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 0);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugAndVerbosePrintCasting_literalMutation2644() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_literalMutation2644");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(-1, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugAndVerbosePrintCasting_literalMutation2645() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_literalMutation2645");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(2, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugAndVerbosePrintCasting_literalMutation2646() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_literalMutation2646");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(1, "foo");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugAndVerbosePrintCasting_literalMutation2647() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_literalMutation2647");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "foo", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintCasting_remove2011() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_remove2011");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintCasting_remove2012() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_remove2012");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintCasting_remove2013() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_remove2013");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintCasting_remove2014() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintCasting_remove2014");
        final Map<java.lang.Integer, java.lang.String> inner = new HashMap<java.lang.Integer, java.lang.String>(2 , 1);
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new HashMap<java.lang.Integer, java.lang.Object>(2 , 1);
        outer.put(0, inner);
        outer.put(1, "A");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        } catch (final ClassCastException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintNullMap_add2569() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintNullMap_add2569");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        outPrint.println(((LABEL + " = ") + (String.valueOf(((Object)(null))))));
        outPrint.println(((LABEL + " = ") + (String.valueOf(((Object)(null))))));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7778,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7780,out,7779,out.toString());
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7781,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7783,out,7782,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintNullMap_add2570() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintNullMap_add2570");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        outPrint.println(((LABEL + " = ") + (String.valueOf(((Object)(null))))));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7778,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7780,out,7779,out.toString());
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7781,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7783,out,7782,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintNullMap_add2571() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintNullMap_add2571");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        outPrint.println(((LABEL + " = ") + (String.valueOf(((Object)(null))))));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, LABEL, null);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7778,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7780,out,7779,out.toString());
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7781,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7783,out,7782,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintNullMap_add2572() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintNullMap_add2572");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        outPrint.println(((LABEL + " = ") + (String.valueOf(((Object)(null))))));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7778,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7780,out,7779,out.toString());
        out.reset();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7781,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7783,out,7782,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintNullMap_add2573() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintNullMap_add2573");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        outPrint.println(((LABEL + " = ") + (String.valueOf(((Object)(null))))));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7778,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7780,out,7779,out.toString());
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, LABEL, null);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7781,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7783,out,7782,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugAndVerbosePrintNullMap() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintNullMap");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "foo";
        outPrint.println(((LABEL + " = ") + (String.valueOf(((Object)(null))))));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7778,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7780,out,7779,out.toString());
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7781,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7783,out,7782,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugAndVerbosePrintNullMap_literalMutation2649() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintNullMap_literalMutation2649");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        outPrint.println(((LABEL + "foo") + (String.valueOf(((Object)(null))))));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7778,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7780,out,7779,out.toString());
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7781,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7783,out,7782,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintNullMap_remove2015() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintNullMap_remove2015");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7778,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7780,out,7779,out.toString());
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7781,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7783,out,7782,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintNullMap_remove2016() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintNullMap_remove2016");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        outPrint.println(((LABEL + " = ") + (String.valueOf(((Object)(null))))));
        final String EXPECTED_OUT = out.toString();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7778,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7780,out,7779,out.toString());
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7781,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7783,out,7782,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintNullMap_remove2017() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintNullMap_remove2017");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        outPrint.println(((LABEL + " = ") + (String.valueOf(((Object)(null))))));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7778,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7780,out,7779,out.toString());
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7781,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7783,out,7782,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintNullMap_remove2018() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintNullMap_remove2018");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        outPrint.println(((LABEL + " = ") + (String.valueOf(((Object)(null))))));
        final String EXPECTED_OUT = out.toString();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7778,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7780,out,7779,out.toString());
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7781,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7783,out,7782,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugAndVerbosePrintNullMap_remove2019() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugAndVerbosePrintNullMap_remove2019");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        outPrint.println(((LABEL + " = ") + (String.valueOf(((Object)(null))))));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, LABEL, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7778,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7780,out,7779,out.toString());
        out.reset();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7781,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7783,out,7782,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_add2729() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_add2729");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_add2730() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_add2730");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_add2731() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_add2731");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_add2732() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_add2732");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_add2733() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_add2733");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_add2734() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_add2734");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_add2735() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_add2735");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_add2736() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_add2736");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_add2737() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_add2737");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_add2738() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_add2738");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullLabel() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "foo";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullLabel_literalMutation2903() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_literalMutation2903");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(1, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullLabel_literalMutation2904() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_literalMutation2904");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "foo");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullLabel_literalMutation2905() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_literalMutation2905");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(4, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullLabel_literalMutation2906() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_literalMutation2906");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "foo");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullLabel_literalMutation2907() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_literalMutation2907");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(3, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullLabel_literalMutation2909() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_literalMutation2909");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("foo");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullLabel_literalMutation2910() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_literalMutation2910");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "foo"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullLabel_literalMutation2911() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_literalMutation2911");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "foo"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullLabel_literalMutation2912() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_literalMutation2912");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "foo"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullLabel_literalMutation2913() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_literalMutation2913");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("foo");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_remove2166() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_remove2166");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_remove2167() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_remove2167");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_remove2168() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_remove2168");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_remove2169() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_remove2169");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_remove2170() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_remove2170");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_remove2171() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_remove2171");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_remove2172() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_remove2172");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_remove2173() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_remove2173");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_remove2174() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_remove2174");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabel_remove2175() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabel_remove2175");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println((INDENT + "2 = B"));
        outPrint.println((INDENT + "3 = C"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7985,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7987,out,7986,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullLabel() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_add2613() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_add2613");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_add2614() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_add2614");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_add2615() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_add2615");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_add2616() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_add2616");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_add2617() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_add2617");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_add2618() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_add2618");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_add2619() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_add2619");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_add2620() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_add2620");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_add2621() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_add2621");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_add2622() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_add2622");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullLabel_literalMutation2698() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_literalMutation2698");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "foo";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullLabel_literalMutation2699() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_literalMutation2699");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(3, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullLabel_literalMutation2700() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_literalMutation2700");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "foo");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullLabel_literalMutation2701() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_literalMutation2701");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(4, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullLabel_literalMutation2702() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_literalMutation2702");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "foo");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullLabel_literalMutation2703() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_literalMutation2703");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(3, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullLabel_literalMutation2705() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_literalMutation2705");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("foo");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullLabel_literalMutation2706() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_literalMutation2706");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "foo") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullLabel_literalMutation2707() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_literalMutation2707");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "foo") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullLabel_literalMutation2708() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_literalMutation2708");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "foo"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullLabel_literalMutation2709() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_literalMutation2709");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("foo" + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_remove2059() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_remove2059");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_remove2060() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_remove2060");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_remove2061() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_remove2061");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_remove2062() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_remove2062");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_remove2063() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_remove2063");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_remove2064() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_remove2064");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_remove2065() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_remove2065");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_remove2066() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_remove2066");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_remove2067() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_remove2067");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabel_remove2068() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabel_remove2068");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.String> map = new TreeMap<java.lang.Integer, java.lang.String>();
        map.put(2, "B");
        map.put(3, "C");
        map.put(4, null);
        outPrint.println("{");
        outPrint.println(((INDENT + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "3 = C ") + (String.class.getName())));
        outPrint.println((INDENT + "4 = null"));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7793,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7795,out,7794,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabelAndMap_add2739() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabelAndMap_add2739");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        outPrint.println("null");
        outPrint.println("null");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7982,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7984,out,7983,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabelAndMap_add2740() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabelAndMap_add2740");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        outPrint.println("null");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7982,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7984,out,7983,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabelAndMap_add2741() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabelAndMap_add2741");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        outPrint.println("null");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, null);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7982,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7984,out,7983,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullLabelAndMap() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabelAndMap");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        outPrint.println("foo");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7982,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7984,out,7983,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabelAndMap_remove2176() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabelAndMap_remove2176");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7982,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7984,out,7983,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabelAndMap_remove2177() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabelAndMap_remove2177");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        outPrint.println("null");
        final String EXPECTED_OUT = out.toString();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7982,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7984,out,7983,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullLabelAndMap_remove2178() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullLabelAndMap_remove2178");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        outPrint.println("null");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7982,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7984,out,7983,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullLabelAndMap() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabelAndMap");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        outPrint.println("null");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7796,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7798,out,7797,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabelAndMap_add2623() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabelAndMap_add2623");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        outPrint.println("null");
        outPrint.println("null");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7796,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7798,out,7797,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabelAndMap_add2624() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabelAndMap_add2624");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        outPrint.println("null");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7796,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7798,out,7797,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabelAndMap_add2625() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabelAndMap_add2625");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        outPrint.println("null");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, null);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7796,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7798,out,7797,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullLabelAndMap_literalMutation2711() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabelAndMap_literalMutation2711");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        outPrint.println("foo");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7796,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7798,out,7797,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabelAndMap_remove2069() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabelAndMap_remove2069");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7796,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7798,out,7797,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabelAndMap_remove2070() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabelAndMap_remove2070");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        outPrint.println("null");
        final String EXPECTED_OUT = out.toString();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7796,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7798,out,7797,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullLabelAndMap_remove2071() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullLabelAndMap_remove2071");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        outPrint.println("null");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7796,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7798,out,7797,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullStream_add2742() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullStream_add2742");
        try {
            org.apache.commons.collections4.MapUtils.verbosePrint(null, "Map", new HashMap<java.lang.Object, java.lang.Object>());
            org.apache.commons.collections4.MapUtils.verbosePrint(null, "Map", new HashMap<java.lang.Object, java.lang.Object>());
        } catch (final NullPointerException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullStream() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullStream");
        try {
            org.apache.commons.collections4.MapUtils.verbosePrint(null, "foo", new HashMap<java.lang.Object, java.lang.Object>());
        } catch (final NullPointerException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullStream() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullStream");
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(null, "Map", new HashMap<java.lang.Object, java.lang.Object>());
        } catch (final NullPointerException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullStream_add2626() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullStream_add2626");
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(null, "Map", new HashMap<java.lang.Object, java.lang.Object>());
            org.apache.commons.collections4.MapUtils.debugPrint(null, "Map", new HashMap<java.lang.Object, java.lang.Object>());
        } catch (final NullPointerException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullStream_literalMutation2715() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullStream_literalMutation2715");
        try {
            org.apache.commons.collections4.MapUtils.debugPrint(null, "foo", new HashMap<java.lang.Object, java.lang.Object>());
        } catch (final NullPointerException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKey() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKey_add2591() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_add2591");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKey_add2592() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_add2592");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println("{");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKey_add2593() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_add2593");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKey_add2594() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_add2594");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKey_add2595() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_add2595");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKey_add2596() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_add2596");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKey_literalMutation2674() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_literalMutation2674");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "foo";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKey_literalMutation2676() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_literalMutation2676");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "foo");
        outPrint.println("{");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKey_literalMutation2677() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_literalMutation2677");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("foo");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKey_literalMutation2678() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_literalMutation2678");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println(((INDENT + "foo") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKey_literalMutation2679() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_literalMutation2679");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("foo" + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKey_remove2037() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_remove2037");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        outPrint.println("{");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKey_remove2038() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_remove2038");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKey_remove2039() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_remove2039");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKey_remove2040() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_remove2040");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKey_remove2041() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_remove2041");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKey_remove2042() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKey_remove2042");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println(((INDENT + "null = A ") + (String.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7784,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7786,out,7785,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKey_add2707() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey_add2707");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println((INDENT + "null = A"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKey_add2708() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey_add2708");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println("{");
        outPrint.println((INDENT + "null = A"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKey_add2709() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey_add2709");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println((INDENT + "null = A"));
        outPrint.println((INDENT + "null = A"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKey_add2710() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey_add2710");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println((INDENT + "null = A"));
        outPrint.println("}");
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKey_add2711() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey_add2711");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println((INDENT + "null = A"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKey_add2712() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey_add2712");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println((INDENT + "null = A"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKey() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "foo";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println((INDENT + "null = A"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKey_literalMutation2880() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey_literalMutation2880");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "foo");
        outPrint.println("{");
        outPrint.println((INDENT + "null = A"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKey_literalMutation2881() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey_literalMutation2881");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("foo");
        outPrint.println((INDENT + "null = A"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKey_literalMutation2882() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey_literalMutation2882");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println((INDENT + "foo"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKey_literalMutation2883() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey_literalMutation2883");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println((INDENT + "null = A"));
        outPrint.println("foo");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKey_remove2144() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey_remove2144");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        outPrint.println("{");
        outPrint.println((INDENT + "null = A"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKey_remove2145() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey_remove2145");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println((INDENT + "null = A"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKey_remove2146() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey_remove2146");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println((INDENT + "null = A"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKey_remove2147() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey_remove2147");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println((INDENT + "null = A"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKey_remove2148() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey_remove2148");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println((INDENT + "null = A"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKey_remove2149() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKey_remove2149");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.String> map = new HashMap<java.lang.Object, java.lang.String>();
        map.put(null, "A");
        outPrint.println("{");
        outPrint.println((INDENT + "null = A"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7979,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7981,out,7980,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKeyToMap1() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap1_add2597() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1_add2597");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        map.put(null, map);
        outPrint.println("{");
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap1_add2598() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1_add2598");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println("{");
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap1_add2599() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1_add2599");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap1_add2600() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1_add2600");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap1_add2601() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1_add2601");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap1_add2602() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1_add2602");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKeyToMap1_literalMutation2681() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1_literalMutation2681");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "foo";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKeyToMap1_literalMutation2683() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1_literalMutation2683");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("foo");
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKeyToMap1_literalMutation2684() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1_literalMutation2684");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println(((INDENT + "foo") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKeyToMap1_literalMutation2685() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1_literalMutation2685");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(("foo" + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap1_remove2043() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1_remove2043");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        outPrint.println("{");
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap1_remove2044() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1_remove2044");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap1_remove2045() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1_remove2045");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap1_remove2046() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1_remove2046");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap1_remove2047() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1_remove2047");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap1_remove2048() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap1_remove2048");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println(((INDENT + "null = (this Map) ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7787,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7789,out,7788,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap1_add2713() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap1_add2713");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        map.put(null, map);
        outPrint.println("{");
        outPrint.println((INDENT + "null = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7973,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7975,out,7974,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap1_add2714() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap1_add2714");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println("{");
        outPrint.println((INDENT + "null = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7973,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7975,out,7974,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap1_add2715() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap1_add2715");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println((INDENT + "null = (this Map)"));
        outPrint.println((INDENT + "null = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7973,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7975,out,7974,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap1_add2716() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap1_add2716");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println((INDENT + "null = (this Map)"));
        outPrint.println("}");
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7973,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7975,out,7974,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap1_add2717() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap1_add2717");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println((INDENT + "null = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7973,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7975,out,7974,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap1_add2718() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap1_add2718");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println((INDENT + "null = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7973,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7975,out,7974,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKeyToMap1() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap1");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "foo";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println((INDENT + "null = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7973,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7975,out,7974,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKeyToMap1_literalMutation2887() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap1_literalMutation2887");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("foo");
        outPrint.println((INDENT + "null = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7973,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7975,out,7974,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKeyToMap1_literalMutation2888() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap1_literalMutation2888");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println((INDENT + "foo"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7973,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7975,out,7974,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKeyToMap1_literalMutation2889() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap1_literalMutation2889");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println((INDENT + "null = (this Map)"));
        outPrint.println("foo");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7973,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7975,out,7974,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap1_remove2150() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap1_remove2150");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        outPrint.println("{");
        outPrint.println((INDENT + "null = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7973,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7975,out,7974,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap1_remove2151() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap1_remove2151");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println((INDENT + "null = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7973,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7975,out,7974,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap1_remove2152() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap1_remove2152");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println((INDENT + "null = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7973,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7975,out,7974,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap1_remove2153() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap1_remove2153");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println((INDENT + "null = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7973,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7975,out,7974,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap1_remove2154() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap1_remove2154");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println((INDENT + "null = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7973,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7975,out,7974,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap1_remove2155() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap1_remove2155");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.util.Map<?, ?>> map = new HashMap<java.lang.Object, java.util.Map<?, ?>>();
        map.put(null, map);
        outPrint.println("{");
        outPrint.println((INDENT + "null = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7973,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7975,out,7974,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKeyToMap2() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_add2603() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_add2603");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_add2604() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_add2604");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_add2605() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_add2605");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_add2606() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_add2606");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_add2607() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_add2607");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_add2608() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_add2608");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_add2609() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_add2609");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_add2610() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_add2610");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_add2611() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_add2611");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_add2612() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_add2612");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKeyToMap2_literalMutation2687() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_literalMutation2687");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "foo";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKeyToMap2_literalMutation2689() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_literalMutation2689");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("foo", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKeyToMap2_literalMutation2690() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_literalMutation2690");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "foo");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKeyToMap2_literalMutation2691() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_literalMutation2691");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("foo");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKeyToMap2_literalMutation2692() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_literalMutation2692");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "foo"));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKeyToMap2_literalMutation2693() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_literalMutation2693");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "foo"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKeyToMap2_literalMutation2694() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_literalMutation2694");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "foo") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKeyToMap2_literalMutation2695() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_literalMutation2695");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "foo") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintNullKeyToMap2_literalMutation2696() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_literalMutation2696");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("foo" + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_remove2049() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_remove2049");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_remove2050() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_remove2050");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_remove2051() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_remove2051");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_remove2052() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_remove2052");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_remove2053() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_remove2053");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_remove2054() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_remove2054");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_remove2055() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_remove2055");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_remove2056() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_remove2056");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_remove2057() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_remove2057");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintNullKeyToMap2_remove2058() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintNullKeyToMap2_remove2058");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (HashMap.class.getName())));
        outPrint.println(("} " + (HashMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7790,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7792,out,7791,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_add2719() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_add2719");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_add2720() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_add2720");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_add2721() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_add2721");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_add2722() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_add2722");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_add2723() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_add2723");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_add2724() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_add2724");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_add2725() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_add2725");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_add2726() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_add2726");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_add2727() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_add2727");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_add2728() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_add2728");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKeyToMap2() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "foo";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKeyToMap2_literalMutation2893() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_literalMutation2893");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("foo", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKeyToMap2_literalMutation2894() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_literalMutation2894");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "foo");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKeyToMap2_literalMutation2895() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_literalMutation2895");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("foo");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKeyToMap2_literalMutation2896() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_literalMutation2896");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "foo"));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKeyToMap2_literalMutation2897() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_literalMutation2897");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "foo"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKeyToMap2_literalMutation2898() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_literalMutation2898");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "foo"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKeyToMap2_literalMutation2899() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_literalMutation2899");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "foo"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintNullKeyToMap2_literalMutation2900() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_literalMutation2900");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("foo");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_remove2156() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_remove2156");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_remove2157() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_remove2157");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_remove2158() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_remove2158");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_remove2159() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_remove2159");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_remove2160() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_remove2160");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_remove2161() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_remove2161");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_remove2162() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_remove2162");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_remove2163() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_remove2163");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_remove2164() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_remove2164");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, null, map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintNullKeyToMap2_remove2165() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintNullKeyToMap2_remove2165");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String INDENT = "    ";
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        final Map<java.lang.Object, java.lang.Object> map2 = new HashMap<java.lang.Object, java.lang.Object>();
        map.put(null, map2);
        map2.put("2", "B");
        outPrint.println("{");
        outPrint.println((INDENT + "null = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7976,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7978,out,7977,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2690() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2690");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2691() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2691");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2692() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2692");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2693() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2693");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2694() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2694");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2695() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2695");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2696() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2696");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2697() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2697");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2698() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2698");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2699() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2699");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2700() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2700");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2701() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2701");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2702() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2702");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2703() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2703");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2704() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2704");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2705() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2705");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_add2706() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_add2706");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "foo";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2858() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2858");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "foo";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2859() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2859");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + "foo"));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2860() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2860");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("foo");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2861() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2861");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "foo"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2862() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2862");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "foo"));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2863() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2863");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "foo"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2864() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2864");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "foo"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2865() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2865");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "foo"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2866() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2866");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "foo"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2867() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2867");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "foo"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2868() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2868");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("foo");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2869() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2869");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(1, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2870() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2870");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "foo");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2871() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2871");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(2, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2872() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2872");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "foo");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2873() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2873");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(0, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2874() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2874");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(-1, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2875() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2875");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "foo");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2876() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2876");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(6, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrint_literalMutation2877() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_literalMutation2877");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "foo", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2127() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2127");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2128() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2128");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2129() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2129");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2130() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2130");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2131() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2131");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2132() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2132");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2133() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2133");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2134() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2134");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2135() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2135");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2136() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2136");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2137() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2137");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2138() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2138");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2139() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2139");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2140() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2140");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2141() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2141");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2142() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2142");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrint_remove2143() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrint_remove2143");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = C"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "7 = (this Map)"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7991,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7993,out,7992,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2574() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2574");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2575() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2575");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2576() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2576");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2577() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2577");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2578() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2578");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2579() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2579");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2580() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2580");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2581() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2581");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2582() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2582");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2583() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2583");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2584() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2584");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2585() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2585");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2586() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2586");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2587() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2587");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2588() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2588");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2589() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2589");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_add2590() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_add2590");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "foo";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2654() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2654");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "foo";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2655() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2655");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + "foo"));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2656() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2656");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("foo");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2657() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2657");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "foo") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2658() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2658");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "foo"));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2659() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2659");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "foo"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2660() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2660");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "foo") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2661() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2661");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "foo") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2662() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2662");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "foo") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2663() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2663");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "foo") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2664() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2664");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("foo" + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2665() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2665");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(1, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2666() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2666");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "foo");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2667() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2667");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(4, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2668() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2668");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "foo");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2669() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2669");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(2, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2670() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2670");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(-1, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2671() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2671");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "foo");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2672() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2672");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(8, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrint_literalMutation2673() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_literalMutation2673");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "foo", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2020() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2020");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2021() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2021");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2022() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2022");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2023() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2023");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2024() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2024");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2025() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2025");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2026() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2026");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2027() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2027");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2028() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2028");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2029() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2029");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2030() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2030");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2031() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2031");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2032() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2032");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2033() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2033");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2034() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2034");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2035() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2035");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrint_remove2036() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrint_remove2036");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = C ") + (String.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "7 = (this Map) ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        final Map<java.lang.Integer, java.lang.String> inner = new TreeMap<java.lang.Integer, java.lang.String>();
        inner.put(2, "B");
        inner.put(3, "C");
        final Map<java.lang.Integer, java.lang.Object> outer = new TreeMap<java.lang.Integer, java.lang.Object>();
        outer.put(1, inner);
        outer.put(0, "A");
        outer.put(7, outer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7802,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7804,out,7803,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2743() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2743");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2744() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2744");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2745() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2745");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2746() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2746");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2747() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2747");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2748() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2748");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2749() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2749");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2750() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2750");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2751() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2751");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2752() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2752");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2753() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2753");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2754() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2754");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2755() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2755");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2756() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2756");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2757() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2757");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2758() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2758");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2759() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2759");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2760() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2760");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2761() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2761");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2762() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2762");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2763() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2763");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2764() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2764");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2765() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2765");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2766() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2766");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_add2767() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_add2767");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "foo";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2921() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2921");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "foo";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2922() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2922");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2923() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2923");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "foo");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2924() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2924");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(2, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2925() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2925");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(3, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2926() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2926");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "foo");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2927() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2927");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(4, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2928() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2928");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(3, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2929() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2929");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(4, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2930() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2930");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "foo");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2931() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2931");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(5, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2932() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2932");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(8, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2933() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2933");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + "foo"));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2934() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2934");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("foo");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2935() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2935");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "foo"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2936() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2936");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "foo"));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2937() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2937");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "foo"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2938() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2938");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "foo"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2939() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2939");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "foo"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2940() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2940");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "foo"));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2941() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2941");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "foo"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2942() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2942");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "foo"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2943() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2943");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "foo"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2944() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2944");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "foo"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2945() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2945");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "foo"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2946() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2946");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "foo"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2947() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2947");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("foo");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVerbosePrintSelfReference_literalMutation2948() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_literalMutation2948");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "foo", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2179() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2179");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2180() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2180");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2181() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2181");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2182() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2182");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2183() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2183");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2184() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2184");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2185() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2185");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2186() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2186");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2187() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2187");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2188() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2188");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2189() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2189");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2190() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2190");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2191() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2191");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2192() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2192");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2193() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2193");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2194() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2194");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2195() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2195");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2196() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2196");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2197() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2197");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2198() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2198");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2199() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2199");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2200() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2200");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2201() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2201");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2202() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2202");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        org.apache.commons.collections4.MapUtils.verbosePrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testVerbosePrintSelfReference_remove2203() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVerbosePrintSelfReference_remove2203");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println((INDENT + "0 = A"));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println(((INDENT + INDENT) + "2 = B"));
        outPrint.println(((INDENT + INDENT) + "3 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "5 = C"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map)"));
        outPrint.println((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map)"));
        outPrint.println(((INDENT + INDENT) + "}"));
        outPrint.println((INDENT + "}"));
        outPrint.println("}");
        final String EXPECTED_OUT = out.toString();
        out.reset();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7988,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7990,out,7989,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2627() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2627");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2628() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2628");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2629() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2629");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2630() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2630");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2631() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2631");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2632() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2632");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2633() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2633");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2634() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2634");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2635() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2635");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2636() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2636");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2637() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2637");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2638() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2638");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2639() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2639");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2640() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2640");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2641() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2641");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2642() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2642");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2643() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2643");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2644() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2644");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2645() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2645");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2646() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2646");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2647() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2647");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2648() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2648");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2649() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2649");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2650() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2650");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_add2651() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_add2651");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2716() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2716");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "foo";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2717() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2717");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "foo";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2718() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2718");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(-1, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2719() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2719");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "foo");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2720() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2720");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(2, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2721() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2721");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(1, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2722() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2722");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "foo");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2723() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2723");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(2, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2724() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2724");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(3, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2725() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2725");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(6, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2726() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2726");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "foo");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2727() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2727");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(5, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2728() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2728");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(6, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2729() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2729");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + "foo"));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2730() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2730");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("foo");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2731() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2731");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "foo") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2732() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2732");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "foo"));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2733() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2733");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "foo"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2734() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2734");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "foo") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2735() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2735");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "foo") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2736() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2736");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "foo"));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2737() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2737");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "foo"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2738() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2738");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "foo") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2739() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2739");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "foo") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2740() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2740");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "foo") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2741() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2741");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "foo") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2742() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2742");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "foo") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2743() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2743");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("foo" + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDebugPrintSelfReference_literalMutation2744() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_literalMutation2744");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "foo", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2072() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2072");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2073() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2073");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2074() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2074");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2075() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2075");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2076() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2076");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2077() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2077");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2078() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2078");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2079() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2079");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2080() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2080");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2081() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2081");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2082() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2082");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2083() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2083");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2084() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2084");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2085() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2085");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2086() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2086");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2087() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2087");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2088() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2088");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2089() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2089");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2090() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2090");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2091() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2091");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2092() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2092");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2093() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2093");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2094() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2094");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2095() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2095");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        org.apache.commons.collections4.MapUtils.debugPrint(outPrint, "Print Map", grandfather);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testDebugPrintSelfReference_remove2096() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDebugPrintSelfReference_remove2096");
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream outPrint = new PrintStream(out);
        final String LABEL = "Print Map";
        final String INDENT = "    ";
        final Map<java.lang.Integer, java.lang.Object> grandfather = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> father = new TreeMap<java.lang.Integer, java.lang.Object>();
        final Map<java.lang.Integer, java.lang.Object> son = new TreeMap<java.lang.Integer, java.lang.Object>();
        grandfather.put(0, "A");
        grandfather.put(1, father);
        father.put(2, "B");
        father.put(3, grandfather);
        father.put(4, son);
        son.put(5, "C");
        son.put(6, grandfather);
        son.put(7, father);
        outPrint.println((LABEL + " = "));
        outPrint.println("{");
        outPrint.println(((INDENT + "0 = A ") + (String.class.getName())));
        outPrint.println((INDENT + "1 = "));
        outPrint.println((INDENT + "{"));
        outPrint.println((((INDENT + INDENT) + "2 = B ") + (String.class.getName())));
        outPrint.println((((INDENT + INDENT) + "3 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + INDENT) + "4 = "));
        outPrint.println(((INDENT + INDENT) + "{"));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "5 = C ") + (String.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "6 = (ancestor[1] Map) ") + (TreeMap.class.getName())));
        outPrint.println(((((INDENT + INDENT) + INDENT) + "7 = (ancestor[0] Map) ") + (TreeMap.class.getName())));
        outPrint.println((((INDENT + INDENT) + "} ") + (TreeMap.class.getName())));
        outPrint.println(((INDENT + "} ") + (TreeMap.class.getName())));
        outPrint.println(("} " + (TreeMap.class.getName())));
        final String EXPECTED_OUT = out.toString();
        out.reset();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7799,EXPECTED_OUT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7801,out,7800,out.toString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testEmptyIfNull() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmptyIfNull");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7806,org.apache.commons.collections4.MapUtils.emptyIfNull(null),7805,org.apache.commons.collections4.MapUtils.emptyIfNull(null).isEmpty());
        final Map<java.lang.Long, java.lang.Long> map = new HashMap<java.lang.Long, java.lang.Long>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7807,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7809,null,7808,org.apache.commons.collections4.MapUtils.emptyIfNull(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIsEmptyWithEmptyMap() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEmptyWithEmptyMap");
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7825,null,7824,org.apache.commons.collections4.MapUtils.isEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIsEmptyWithNonEmptyMap_add2657() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEmptyWithNonEmptyMap_add2657");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("item", "value");
        map.put("item", "value");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7827,null,7826,org.apache.commons.collections4.MapUtils.isEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIsEmptyWithNonEmptyMap() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEmptyWithNonEmptyMap");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("foo", "value");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7827,null,7826,org.apache.commons.collections4.MapUtils.isEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIsEmptyWithNonEmptyMap_literalMutation2758() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEmptyWithNonEmptyMap_literalMutation2758");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("item", "foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7827,null,7826,org.apache.commons.collections4.MapUtils.isEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIsEmptyWithNonEmptyMap_remove2102() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEmptyWithNonEmptyMap_remove2102");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7827,null,7826,org.apache.commons.collections4.MapUtils.isEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIsEmptyWithNull() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEmptyWithNull");
        final Map<java.lang.Object, java.lang.Object> map = null;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7829,null,7828,org.apache.commons.collections4.MapUtils.isEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIsNotEmptyWithEmptyMap() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsNotEmptyWithEmptyMap");
        final Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7831,null,7830,org.apache.commons.collections4.MapUtils.isNotEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIsNotEmptyWithNonEmptyMap_add2658() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsNotEmptyWithNonEmptyMap_add2658");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("item", "value");
        map.put("item", "value");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7833,null,7832,org.apache.commons.collections4.MapUtils.isNotEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIsNotEmptyWithNonEmptyMap() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsNotEmptyWithNonEmptyMap");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("foo", "value");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7833,null,7832,org.apache.commons.collections4.MapUtils.isNotEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIsNotEmptyWithNonEmptyMap_literalMutation2761() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsNotEmptyWithNonEmptyMap_literalMutation2761");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("item", "foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7833,null,7832,org.apache.commons.collections4.MapUtils.isNotEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIsNotEmptyWithNonEmptyMap_remove2103() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsNotEmptyWithNonEmptyMap_remove2103");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7833,null,7832,org.apache.commons.collections4.MapUtils.isNotEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIsNotEmptyWithNull() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsNotEmptyWithNull");
        final Map<java.lang.Object, java.lang.Object> map = null;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7835,null,7834,org.apache.commons.collections4.MapUtils.isNotEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_add2668() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_add2668");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("1");
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_add2669() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_add2669");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_add2670() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_add2670");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("5");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_add2671() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_add2671");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_add2672() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_add2672");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_add2673() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_add2673");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_add2674() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_add2674");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_add2675() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_add2675");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_add2676() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_add2676");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMap() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("foo");
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMap_literalMutation2787() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_literalMutation2787");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("foo");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMap_literalMutation2788() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_literalMutation2788");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("foo");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMap_literalMutation2789() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_literalMutation2789");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("5");
        list.add("foo");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMap_literalMutation2790() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_literalMutation2790");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("foo");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMap_literalMutation2791() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_literalMutation2791");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("foo");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMap_literalMutation2792() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_literalMutation2792");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("foo");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMap_literalMutation2793() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_literalMutation2793");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = -1 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMap_literalMutation2794() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_literalMutation2794");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = -1 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_remove2111() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_remove2111");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_remove2112() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_remove2112");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_remove2113() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_remove2113");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_remove2114() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_remove2114");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_remove2115() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_remove2115");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_remove2116() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_remove2116");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_remove2117() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_remove2117");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_remove2118() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_remove2118");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMap_remove2119() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMap_remove2119");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        list.add("1");
        list.add("3");
        list.add("5");
        list.add("7");
        list.add("2");
        list.add("4");
        list.add("6");
        Map<java.lang.Object, java.lang.Object> map = new HashMap<java.lang.Object, java.lang.Object>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7865,list,7864,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7867,map,7866,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7869,map,7868,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7871,map,7870,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7873,map,7872,map.containsValue(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7875,list,7874,list.get(i));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7877,map,7876,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        map = new HashMap<java.lang.Object, java.lang.Object>();
        org.apache.commons.collections4.MapUtils.populateMap(map, list, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, org.apache.commons.collections4.collection.TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7879,list,7878,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7881,map,7880,map.size());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7883,map,7882,map.containsKey(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7885,map,7884,map.containsKey(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7887,map,7886,map.containsValue(java.lang.Integer.valueOf(list.get(i))));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7889,null,7888,java.lang.Integer.valueOf(list.get(i)));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7891,map,7890,map.get(java.lang.Integer.valueOf(list.get(i))));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Test class for populateMap(MultiMap).
     */
public static class X implements Comparable<X> {
        int key;

        String name;

        public X(int key ,String name) {
            this.key = key;
            this.name = name;
        }

        public int compareTo(X o) {
            return ((key) - (o.key)) | (name.compareTo(o.name));
        }
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMultiMap_add2677() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_add2677");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMultiMap_add2678() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_add2678");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMultiMap_add2679() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_add2679");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMultiMap_add2680() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_add2680");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMultiMap_add2681() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_add2681");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMultiMap_add2682() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_add2682");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMultiMap_add2683() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_add2683");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMultiMap() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap");
        final List<X> list = new ArrayList<X>();
        list.add(new X(0 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMultiMap_literalMutation2796() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_literalMutation2796");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "foo"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMultiMap_literalMutation2797() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_literalMutation2797");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(1 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMultiMap_literalMutation2798() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_literalMutation2798");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "foo"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMultiMap_literalMutation2799() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_literalMutation2799");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(3 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMultiMap_literalMutation2800() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_literalMutation2800");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "foo"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMultiMap_literalMutation2801() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_literalMutation2801");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(4 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMultiMap_literalMutation2802() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_literalMutation2802");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "foo"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMultiMap_literalMutation2803() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_literalMutation2803");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(4 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMultiMap_literalMutation2804() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_literalMutation2804");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "foo"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPopulateMultiMap_literalMutation2805() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_literalMutation2805");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = -1 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMultiMap_remove2120() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_remove2120");
        final List<X> list = new ArrayList<X>();
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMultiMap_remove2121() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_remove2121");
        final List<X> list = new ArrayList<X>();
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMultiMap_remove2122() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_remove2122");
        final List<X> list = new ArrayList<X>();
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMultiMap_remove2123() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_remove2123");
        final List<X> list = new ArrayList<X>();
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMultiMap_remove2124() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_remove2124");
        final List<X> list = new ArrayList<X>();
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMultiMap_remove2125() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_remove2125");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testPopulateMultiMap_remove2126() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPopulateMultiMap_remove2126");
        final List<X> list = new ArrayList<X>();
        list.add(new X(1 , "x1"));
        list.add(new X(2 , "x2"));
        list.add(new X(2 , "x3"));
        list.add(new X(5 , "x4"));
        list.add(new X(5 , "x5"));
        final MultiValueMap<java.lang.Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<java.lang.Integer, java.util.Collection<X>>());
        org.apache.commons.collections4.MapUtils.populateMap(map, list, new Transformer<X, java.lang.Integer>() {
            public Integer transform(X input) {
                return input.key;
            }
        }, org.apache.commons.collections4.TransformerUtils.<X>nopTransformer());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7893,list,7892,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7895,map,7894,map.totalSize());
        for (int i = 0 ; i < (list.size()) ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7897,map,7896,map.containsKey(list.get(i).key));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7899,map,7898,map.containsValue(list.get(i)));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIterableMap_add2659() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableMap_add2659");
        try {
            org.apache.commons.collections4.MapUtils.iterableMap(null);
            org.apache.commons.collections4.MapUtils.iterableMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final HashMap<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("bar", "barv");
        map.put("baz", "bazv");
        final IterableMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7836,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7837,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7838,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7839,iMap);
        final HashedMap<java.lang.String, java.lang.String> hMap = new HashedMap<java.lang.String, java.lang.String>(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7840,hMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7842,null,7841,org.apache.commons.collections4.MapUtils.iterableMap(hMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIterableMap_add2660() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableMap_add2660");
        try {
            org.apache.commons.collections4.MapUtils.iterableMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final HashMap<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("foo", "foov");
        map.put("bar", "barv");
        map.put("baz", "bazv");
        final IterableMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7836,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7837,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7838,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7839,iMap);
        final HashedMap<java.lang.String, java.lang.String> hMap = new HashedMap<java.lang.String, java.lang.String>(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7840,hMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7842,null,7841,org.apache.commons.collections4.MapUtils.iterableMap(hMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIterableMap_add2661() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableMap_add2661");
        try {
            org.apache.commons.collections4.MapUtils.iterableMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final HashMap<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("bar", "barv");
        map.put("bar", "barv");
        map.put("baz", "bazv");
        final IterableMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7836,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7837,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7838,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7839,iMap);
        final HashedMap<java.lang.String, java.lang.String> hMap = new HashedMap<java.lang.String, java.lang.String>(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7840,hMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7842,null,7841,org.apache.commons.collections4.MapUtils.iterableMap(hMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIterableMap_add2662() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableMap_add2662");
        try {
            org.apache.commons.collections4.MapUtils.iterableMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final HashMap<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("bar", "barv");
        map.put("baz", "bazv");
        map.put("baz", "bazv");
        final IterableMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7836,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7837,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7838,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7839,iMap);
        final HashedMap<java.lang.String, java.lang.String> hMap = new HashedMap<java.lang.String, java.lang.String>(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7840,hMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7842,null,7841,org.apache.commons.collections4.MapUtils.iterableMap(hMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIterableMap() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableMap");
        try {
            org.apache.commons.collections4.MapUtils.iterableMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final HashMap<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("bar", "barv");
        map.put("baz", "bazv");
        final IterableMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7836,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7837,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7838,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7839,iMap);
        final HashedMap<java.lang.String, java.lang.String> hMap = new HashedMap<java.lang.String, java.lang.String>(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7840,hMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7842,null,7841,org.apache.commons.collections4.MapUtils.iterableMap(hMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIterableMap_literalMutation2765() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableMap_literalMutation2765");
        try {
            org.apache.commons.collections4.MapUtils.iterableMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final HashMap<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("foo", "foo");
        map.put("bar", "barv");
        map.put("baz", "bazv");
        final IterableMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7836,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7837,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7838,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7839,iMap);
        final HashedMap<java.lang.String, java.lang.String> hMap = new HashedMap<java.lang.String, java.lang.String>(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7840,hMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7842,null,7841,org.apache.commons.collections4.MapUtils.iterableMap(hMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIterableMap_literalMutation2766() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableMap_literalMutation2766");
        try {
            org.apache.commons.collections4.MapUtils.iterableMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final HashMap<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("foo", "barv");
        map.put("baz", "bazv");
        final IterableMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7836,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7837,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7838,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7839,iMap);
        final HashedMap<java.lang.String, java.lang.String> hMap = new HashedMap<java.lang.String, java.lang.String>(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7840,hMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7842,null,7841,org.apache.commons.collections4.MapUtils.iterableMap(hMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIterableMap_literalMutation2767() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableMap_literalMutation2767");
        try {
            org.apache.commons.collections4.MapUtils.iterableMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final HashMap<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("bar", "foo");
        map.put("baz", "bazv");
        final IterableMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7836,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7837,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7838,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7839,iMap);
        final HashedMap<java.lang.String, java.lang.String> hMap = new HashedMap<java.lang.String, java.lang.String>(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7840,hMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7842,null,7841,org.apache.commons.collections4.MapUtils.iterableMap(hMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIterableMap_literalMutation2768() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableMap_literalMutation2768");
        try {
            org.apache.commons.collections4.MapUtils.iterableMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final HashMap<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("bar", "barv");
        map.put("foo", "bazv");
        final IterableMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7836,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7837,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7838,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7839,iMap);
        final HashedMap<java.lang.String, java.lang.String> hMap = new HashedMap<java.lang.String, java.lang.String>(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7840,hMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7842,null,7841,org.apache.commons.collections4.MapUtils.iterableMap(hMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIterableMap_literalMutation2769() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableMap_literalMutation2769");
        try {
            org.apache.commons.collections4.MapUtils.iterableMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final HashMap<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("bar", "barv");
        map.put("baz", "foo");
        final IterableMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7836,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7837,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7838,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7839,iMap);
        final HashedMap<java.lang.String, java.lang.String> hMap = new HashedMap<java.lang.String, java.lang.String>(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7840,hMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7842,null,7841,org.apache.commons.collections4.MapUtils.iterableMap(hMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIterableMap_remove2104() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableMap_remove2104");
        try {
            org.apache.commons.collections4.MapUtils.iterableMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final HashMap<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("bar", "barv");
        map.put("baz", "bazv");
        final IterableMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7836,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7837,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7838,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7839,iMap);
        final HashedMap<java.lang.String, java.lang.String> hMap = new HashedMap<java.lang.String, java.lang.String>(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7840,hMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7842,null,7841,org.apache.commons.collections4.MapUtils.iterableMap(hMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIterableMap_remove2105() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableMap_remove2105");
        try {
            org.apache.commons.collections4.MapUtils.iterableMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final HashMap<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("bar", "barv");
        map.put("baz", "bazv");
        final IterableMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7836,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7837,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7838,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7839,iMap);
        final HashedMap<java.lang.String, java.lang.String> hMap = new HashedMap<java.lang.String, java.lang.String>(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7840,hMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7842,null,7841,org.apache.commons.collections4.MapUtils.iterableMap(hMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIterableMap_remove2106() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableMap_remove2106");
        try {
            org.apache.commons.collections4.MapUtils.iterableMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final HashMap<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        map.put("bar", "barv");
        map.put("baz", "bazv");
        final IterableMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7836,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7837,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7838,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7839,iMap);
        final HashedMap<java.lang.String, java.lang.String> hMap = new HashedMap<java.lang.String, java.lang.String>(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7840,hMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7842,null,7841,org.apache.commons.collections4.MapUtils.iterableMap(hMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIterableSortedMap_add2663() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableSortedMap_add2663");
        try {
            org.apache.commons.collections4.MapUtils.iterableSortedMap(null);
            org.apache.commons.collections4.MapUtils.iterableSortedMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final TreeMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("bar", "barv");
        map.put("baz", "bazv");
        final IterableSortedMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableSortedMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7843,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7844,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7845,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7846,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7847,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7849,null,7848,org.apache.commons.collections4.MapUtils.iterableMap(iMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIterableSortedMap_add2664() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableSortedMap_add2664");
        try {
            org.apache.commons.collections4.MapUtils.iterableSortedMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final TreeMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("foo", "foov");
        map.put("bar", "barv");
        map.put("baz", "bazv");
        final IterableSortedMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableSortedMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7843,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7844,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7845,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7846,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7847,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7849,null,7848,org.apache.commons.collections4.MapUtils.iterableMap(iMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIterableSortedMap_add2665() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableSortedMap_add2665");
        try {
            org.apache.commons.collections4.MapUtils.iterableSortedMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final TreeMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("bar", "barv");
        map.put("bar", "barv");
        map.put("baz", "bazv");
        final IterableSortedMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableSortedMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7843,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7844,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7845,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7846,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7847,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7849,null,7848,org.apache.commons.collections4.MapUtils.iterableMap(iMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIterableSortedMap_add2666() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableSortedMap_add2666");
        try {
            org.apache.commons.collections4.MapUtils.iterableSortedMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final TreeMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("bar", "barv");
        map.put("baz", "bazv");
        map.put("baz", "bazv");
        final IterableSortedMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableSortedMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7843,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7844,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7845,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7846,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7847,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7849,null,7848,org.apache.commons.collections4.MapUtils.iterableMap(iMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIterableSortedMap() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableSortedMap");
        try {
            org.apache.commons.collections4.MapUtils.iterableSortedMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final TreeMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("bar", "barv");
        map.put("baz", "bazv");
        final IterableSortedMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableSortedMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7843,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7844,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7845,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7846,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7847,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7849,null,7848,org.apache.commons.collections4.MapUtils.iterableMap(iMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIterableSortedMap_literalMutation2772() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableSortedMap_literalMutation2772");
        try {
            org.apache.commons.collections4.MapUtils.iterableSortedMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final TreeMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("foo", "foo");
        map.put("bar", "barv");
        map.put("baz", "bazv");
        final IterableSortedMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableSortedMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7843,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7844,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7845,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7846,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7847,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7849,null,7848,org.apache.commons.collections4.MapUtils.iterableMap(iMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIterableSortedMap_literalMutation2773() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableSortedMap_literalMutation2773");
        try {
            org.apache.commons.collections4.MapUtils.iterableSortedMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final TreeMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("foo", "barv");
        map.put("baz", "bazv");
        final IterableSortedMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableSortedMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7843,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7844,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7845,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7846,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7847,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7849,null,7848,org.apache.commons.collections4.MapUtils.iterableMap(iMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIterableSortedMap_literalMutation2774() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableSortedMap_literalMutation2774");
        try {
            org.apache.commons.collections4.MapUtils.iterableSortedMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final TreeMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("bar", "foo");
        map.put("baz", "bazv");
        final IterableSortedMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableSortedMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7843,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7844,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7845,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7846,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7847,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7849,null,7848,org.apache.commons.collections4.MapUtils.iterableMap(iMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIterableSortedMap_literalMutation2775() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableSortedMap_literalMutation2775");
        try {
            org.apache.commons.collections4.MapUtils.iterableSortedMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final TreeMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("bar", "barv");
        map.put("foo", "bazv");
        final IterableSortedMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableSortedMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7843,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7844,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7845,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7846,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7847,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7849,null,7848,org.apache.commons.collections4.MapUtils.iterableMap(iMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIterableSortedMap_literalMutation2776() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableSortedMap_literalMutation2776");
        try {
            org.apache.commons.collections4.MapUtils.iterableSortedMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final TreeMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("foo", "foov");
        map.put("bar", "barv");
        map.put("baz", "foo");
        final IterableSortedMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableSortedMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7843,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7844,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7845,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7846,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7847,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7849,null,7848,org.apache.commons.collections4.MapUtils.iterableMap(iMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIterableSortedMap_remove2107() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableSortedMap_remove2107");
        try {
            org.apache.commons.collections4.MapUtils.iterableSortedMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final TreeMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("bar", "barv");
        map.put("baz", "bazv");
        final IterableSortedMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableSortedMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7843,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7844,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7845,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7846,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7847,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7849,null,7848,org.apache.commons.collections4.MapUtils.iterableMap(iMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIterableSortedMap_remove2108() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableSortedMap_remove2108");
        try {
            org.apache.commons.collections4.MapUtils.iterableSortedMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final TreeMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("bar", "barv");
        map.put("baz", "bazv");
        final IterableSortedMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableSortedMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7843,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7844,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7845,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7846,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7847,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7849,null,7848,org.apache.commons.collections4.MapUtils.iterableMap(iMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @org.junit.Test(timeout = 1000)
    public void testIterableSortedMap_remove2109() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterableSortedMap_remove2109");
        try {
            org.apache.commons.collections4.MapUtils.iterableSortedMap(null);
        } catch (final IllegalArgumentException e) {
        }
        final TreeMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("bar", "barv");
        map.put("baz", "bazv");
        final IterableSortedMap<java.lang.String, java.lang.String> iMap = org.apache.commons.collections4.MapUtils.iterableSortedMap(map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7843,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7844,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7845,map);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7846,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7847,iMap);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7849,null,7848,org.apache.commons.collections4.MapUtils.iterableMap(iMap));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }
}

