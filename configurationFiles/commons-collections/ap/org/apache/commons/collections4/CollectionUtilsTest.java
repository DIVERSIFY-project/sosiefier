package org.apache.commons.collections4;

import java.util.ArrayList;
import org.junit.Before;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import org.apache.commons.collections4.bag.HashBag;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.SortedMap;
import org.junit.Test;
import java.util.TreeMap;
import java.util.Vector;

/** 
 * Tests for CollectionUtils.
 * 
 * @version $Id$
 */
@SuppressWarnings(value = "boxing")
public class CollectionUtilsTest extends MockTestCase {
    /** 
     * Collection of {@link Integer}s
     */
private List<java.lang.Integer> collectionA = null;

    /** 
     * Collection of {@link Long}s
     */
private List<java.lang.Long> collectionB = null;

    /** 
     * Collection of {@link Integer}s that are equivalent to the Longs in
     * collectionB.
     */
private Collection<java.lang.Integer> collectionC = null;

    /** 
     * Sorted Collection of {@link Integer}s
     */
private Collection<java.lang.Integer> collectionD = null;

    /** 
     * Sorted Collection of {@link Integer}s
     */
private Collection<java.lang.Integer> collectionE = null;

    /** 
     * Collection of {@link Integer}s, bound as {@link Number}s
     */
private Collection<java.lang.Number> collectionA2 = null;

    /** 
     * Collection of {@link Long}s, bound as {@link Number}s
     */
private Collection<java.lang.Number> collectionB2 = null;

    /** 
     * Collection of {@link Integer}s (cast as {@link Number}s) that are
     * equivalent to the Longs in collectionB.
     */
private Collection<java.lang.Number> collectionC2 = null;

    private Iterable<java.lang.Integer> iterableA = null;

    private Iterable<java.lang.Long> iterableB = null;

    private Iterable<java.lang.Integer> iterableC = null;

    private Iterable<java.lang.Number> iterableA2 = null;

    private Iterable<java.lang.Number> iterableB2 = null;

    private Collection<java.lang.Integer> emptyCollection = new ArrayList<java.lang.Integer>(1);

    @Before
    public void setUp() {
        collectionA = new ArrayList<java.lang.Integer>();
        collectionA.add(1);
        collectionA.add(2);
        collectionA.add(2);
        collectionA.add(3);
        collectionA.add(3);
        collectionA.add(3);
        collectionA.add(4);
        collectionA.add(4);
        collectionA.add(4);
        collectionA.add(4);
        collectionB = new LinkedList<java.lang.Long>();
        collectionB.add(5L);
        collectionB.add(4L);
        collectionB.add(4L);
        collectionB.add(3L);
        collectionB.add(3L);
        collectionB.add(3L);
        collectionB.add(2L);
        collectionB.add(2L);
        collectionB.add(2L);
        collectionB.add(2L);
        collectionC = new ArrayList<java.lang.Integer>();
        for (final Long l : collectionB) {
            collectionC.add(l.intValue());
        }
        iterableA = collectionA;
        iterableB = collectionB;
        iterableC = collectionC;
        collectionA2 = new ArrayList<java.lang.Number>(collectionA);
        collectionB2 = new LinkedList<java.lang.Number>(collectionB);
        collectionC2 = new LinkedList<java.lang.Number>(collectionC);
        iterableA2 = collectionA2;
        iterableB2 = collectionB2;
        collectionD = new ArrayList<java.lang.Integer>();
        collectionD.add(1);
        collectionD.add(3);
        collectionD.add(3);
        collectionD.add(3);
        collectionD.add(5);
        collectionD.add(7);
        collectionD.add(7);
        collectionD.add(10);
        collectionE = new ArrayList<java.lang.Integer>();
        collectionE.add(2);
        collectionE.add(4);
        collectionE.add(4);
        collectionE.add(5);
        collectionE.add(6);
        collectionE.add(6);
        collectionE.add(9);
    }

    @Test
    public void getCardinalityMap() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getCardinalityMap");
        final Map<java.lang.Number, java.lang.Integer> freqA = org.apache.commons.collections4.CollectionUtils.<Number>getCardinalityMap(iterableA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6851,freqA,6850,((int)(freqA.get(1))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6853,freqA,6852,((int)(freqA.get(2))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6855,freqA,6854,((int)(freqA.get(3))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6857,freqA,6856,((int)(freqA.get(4))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6859,freqA,6858,freqA.get(5));
        final Map<java.lang.Long, java.lang.Integer> freqB = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(iterableB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6861,freqB,6860,freqB.get(1L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6863,freqB,6862,((int)(freqB.get(2L))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6865,freqB,6864,((int)(freqB.get(3L))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6867,freqB,6866,((int)(freqB.get(4L))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6869,freqB,6868,((int)(freqB.get(5L))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinality_add2167() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_add2167");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinality_add2168() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_add2168");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinality_add2169() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_add2169");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinality_add2170() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_add2170");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinality_add2171() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_add2171");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("A", 3);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinality_add2172() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_add2172");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinality_add2173() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_add2173");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinality_add2174() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_add2174");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void cardinality() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("foo");
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void cardinality_literalMutation2078() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_literalMutation2078");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("foo");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void cardinality_literalMutation2079() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_literalMutation2079");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("foo");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void cardinality_literalMutation2080() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_literalMutation2080");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void cardinality_literalMutation2081() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_literalMutation2081");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("foo", 3);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void cardinality_literalMutation2082() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_literalMutation2082");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 2);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void cardinality_literalMutation2083() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_literalMutation2083");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("foo");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void cardinality_literalMutation2084() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_literalMutation2084");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("foo");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void cardinality_literalMutation2085() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_literalMutation2085");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("E");
        bag.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinality_remove1688() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_remove1688");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinality_remove1689() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_remove1689");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinality_remove1690() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_remove1690");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinality_remove1691() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_remove1691");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("A", 3);
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinality_remove1692() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_remove1692");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinality_remove1693() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_remove1693");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinality_remove1694() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_remove1694");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinality_remove1695() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinality_remove1695");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6613,null,6612,org.apache.commons.collections4.CollectionUtils.cardinality(1, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6615,null,6614,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6617,null,6616,org.apache.commons.collections4.CollectionUtils.cardinality(3, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6619,null,6618,org.apache.commons.collections4.CollectionUtils.cardinality(4, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6621,null,6620,org.apache.commons.collections4.CollectionUtils.cardinality(5, iterableA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6623,null,6622,org.apache.commons.collections4.CollectionUtils.cardinality(1L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6625,null,6624,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6627,null,6626,org.apache.commons.collections4.CollectionUtils.cardinality(3L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6629,null,6628,org.apache.commons.collections4.CollectionUtils.cardinality(4L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6631,null,6630,org.apache.commons.collections4.CollectionUtils.cardinality(5L, iterableB));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6633,null,6632,org.apache.commons.collections4.CollectionUtils.cardinality(2L, iterableA2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6635,null,6634,org.apache.commons.collections4.CollectionUtils.cardinality(2, iterableB2));
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("A");
        set.add("C");
        set.add("E");
        set.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6637,null,6636,org.apache.commons.collections4.CollectionUtils.cardinality("A", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6639,null,6638,org.apache.commons.collections4.CollectionUtils.cardinality("B", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6641,null,6640,org.apache.commons.collections4.CollectionUtils.cardinality("C", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6643,null,6642,org.apache.commons.collections4.CollectionUtils.cardinality("D", set));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6645,null,6644,org.apache.commons.collections4.CollectionUtils.cardinality("E", set));
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("C");
        bag.add("E");
        bag.add("E");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6647,null,6646,org.apache.commons.collections4.CollectionUtils.cardinality("A", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6649,null,6648,org.apache.commons.collections4.CollectionUtils.cardinality("B", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6651,null,6650,org.apache.commons.collections4.CollectionUtils.cardinality("C", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6653,null,6652,org.apache.commons.collections4.CollectionUtils.cardinality("D", bag));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6655,null,6654,org.apache.commons.collections4.CollectionUtils.cardinality("E", bag));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinalityOfNull_add2175() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinalityOfNull_add2175");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6575,null,6574,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6577,freq,6576,freq.get(null));
        }
        list.add("A");
        list.add("A");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6579,null,6578,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6581,freq,6580,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6583,null,6582,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6585,null,6584,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6587,freq,6586,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6589,null,6588,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6591,null,6590,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6593,freq,6592,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6595,null,6594,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6597,null,6596,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6599,freq,6598,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6601,null,6600,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6603,null,6602,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6605,freq,6604,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6607,null,6606,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6609,null,6608,java.lang.Integer.valueOf(3));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6611,freq,6610,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinalityOfNull_add2176() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinalityOfNull_add2176");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6575,null,6574,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6577,freq,6576,freq.get(null));
        }
        list.add("A");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6579,null,6578,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6581,freq,6580,freq.get(null));
        }
        list.add(null);
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6583,null,6582,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6585,null,6584,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6587,freq,6586,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6589,null,6588,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6591,null,6590,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6593,freq,6592,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6595,null,6594,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6597,null,6596,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6599,freq,6598,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6601,null,6600,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6603,null,6602,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6605,freq,6604,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6607,null,6606,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6609,null,6608,java.lang.Integer.valueOf(3));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6611,freq,6610,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinalityOfNull_add2177() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinalityOfNull_add2177");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6575,null,6574,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6577,freq,6576,freq.get(null));
        }
        list.add("A");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6579,null,6578,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6581,freq,6580,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6583,null,6582,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6585,null,6584,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6587,freq,6586,freq.get(null));
        }
        list.add("B");
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6589,null,6588,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6591,null,6590,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6593,freq,6592,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6595,null,6594,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6597,null,6596,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6599,freq,6598,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6601,null,6600,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6603,null,6602,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6605,freq,6604,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6607,null,6606,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6609,null,6608,java.lang.Integer.valueOf(3));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6611,freq,6610,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinalityOfNull_add2178() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinalityOfNull_add2178");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6575,null,6574,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6577,freq,6576,freq.get(null));
        }
        list.add("A");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6579,null,6578,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6581,freq,6580,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6583,null,6582,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6585,null,6584,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6587,freq,6586,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6589,null,6588,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6591,null,6590,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6593,freq,6592,freq.get(null));
        }
        list.add(null);
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6595,null,6594,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6597,null,6596,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6599,freq,6598,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6601,null,6600,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6603,null,6602,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6605,freq,6604,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6607,null,6606,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6609,null,6608,java.lang.Integer.valueOf(3));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6611,freq,6610,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinalityOfNull_add2179() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinalityOfNull_add2179");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6575,null,6574,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6577,freq,6576,freq.get(null));
        }
        list.add("A");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6579,null,6578,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6581,freq,6580,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6583,null,6582,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6585,null,6584,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6587,freq,6586,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6589,null,6588,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6591,null,6590,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6593,freq,6592,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6595,null,6594,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6597,null,6596,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6599,freq,6598,freq.get(null));
        }
        list.add("B");
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6601,null,6600,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6603,null,6602,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6605,freq,6604,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6607,null,6606,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6609,null,6608,java.lang.Integer.valueOf(3));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6611,freq,6610,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinalityOfNull_add2180() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinalityOfNull_add2180");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6575,null,6574,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6577,freq,6576,freq.get(null));
        }
        list.add("A");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6579,null,6578,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6581,freq,6580,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6583,null,6582,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6585,null,6584,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6587,freq,6586,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6589,null,6588,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6591,null,6590,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6593,freq,6592,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6595,null,6594,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6597,null,6596,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6599,freq,6598,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6601,null,6600,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6603,null,6602,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6605,freq,6604,freq.get(null));
        }
        list.add(null);
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6607,null,6606,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6609,null,6608,java.lang.Integer.valueOf(3));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6611,freq,6610,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void cardinalityOfNull() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinalityOfNull");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6575,null,6574,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6577,freq,6576,freq.get(null));
        }
        list.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6579,null,6578,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6581,freq,6580,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6583,null,6582,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6585,null,6584,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6587,freq,6586,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6589,null,6588,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6591,null,6590,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6593,freq,6592,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6595,null,6594,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6597,null,6596,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6599,freq,6598,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6601,null,6600,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6603,null,6602,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6605,freq,6604,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6607,null,6606,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6609,null,6608,java.lang.Integer.valueOf(3));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6611,freq,6610,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void cardinalityOfNull_literalMutation2088() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinalityOfNull_literalMutation2088");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6575,null,6574,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6577,freq,6576,freq.get(null));
        }
        list.add("A");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6579,null,6578,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6581,freq,6580,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6583,null,6582,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6585,null,6584,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6587,freq,6586,freq.get(null));
        }
        list.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6589,null,6588,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6591,null,6590,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6593,freq,6592,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6595,null,6594,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6597,null,6596,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6599,freq,6598,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6601,null,6600,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6603,null,6602,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6605,freq,6604,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6607,null,6606,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6609,null,6608,java.lang.Integer.valueOf(3));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6611,freq,6610,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void cardinalityOfNull_literalMutation2090() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinalityOfNull_literalMutation2090");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6575,null,6574,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6577,freq,6576,freq.get(null));
        }
        list.add("A");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6579,null,6578,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6581,freq,6580,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6583,null,6582,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6585,null,6584,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6587,freq,6586,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6589,null,6588,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6591,null,6590,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6593,freq,6592,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6595,null,6594,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6597,null,6596,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6599,freq,6598,freq.get(null));
        }
        list.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6601,null,6600,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6603,null,6602,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6605,freq,6604,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6607,null,6606,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6609,null,6608,java.lang.Integer.valueOf(3));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6611,freq,6610,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinalityOfNull_remove1696() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinalityOfNull_remove1696");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6575,null,6574,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6577,freq,6576,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6579,null,6578,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6581,freq,6580,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6583,null,6582,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6585,null,6584,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6587,freq,6586,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6589,null,6588,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6591,null,6590,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6593,freq,6592,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6595,null,6594,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6597,null,6596,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6599,freq,6598,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6601,null,6600,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6603,null,6602,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6605,freq,6604,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6607,null,6606,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6609,null,6608,java.lang.Integer.valueOf(3));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6611,freq,6610,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinalityOfNull_remove1697() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinalityOfNull_remove1697");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6575,null,6574,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6577,freq,6576,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6579,null,6578,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6581,freq,6580,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6583,null,6582,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6585,null,6584,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6587,freq,6586,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6589,null,6588,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6591,null,6590,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6593,freq,6592,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6595,null,6594,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6597,null,6596,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6599,freq,6598,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6601,null,6600,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6603,null,6602,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6605,freq,6604,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6607,null,6606,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6609,null,6608,java.lang.Integer.valueOf(3));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6611,freq,6610,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinalityOfNull_remove1698() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinalityOfNull_remove1698");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6575,null,6574,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6577,freq,6576,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6579,null,6578,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6581,freq,6580,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6583,null,6582,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6585,null,6584,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6587,freq,6586,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6589,null,6588,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6591,null,6590,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6593,freq,6592,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6595,null,6594,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6597,null,6596,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6599,freq,6598,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6601,null,6600,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6603,null,6602,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6605,freq,6604,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6607,null,6606,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6609,null,6608,java.lang.Integer.valueOf(3));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6611,freq,6610,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinalityOfNull_remove1699() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinalityOfNull_remove1699");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6575,null,6574,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6577,freq,6576,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6579,null,6578,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6581,freq,6580,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6583,null,6582,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6585,null,6584,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6587,freq,6586,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6589,null,6588,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6591,null,6590,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6593,freq,6592,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6595,null,6594,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6597,null,6596,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6599,freq,6598,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6601,null,6600,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6603,null,6602,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6605,freq,6604,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6607,null,6606,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6609,null,6608,java.lang.Integer.valueOf(3));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6611,freq,6610,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinalityOfNull_remove1700() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinalityOfNull_remove1700");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6575,null,6574,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6577,freq,6576,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6579,null,6578,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6581,freq,6580,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6583,null,6582,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6585,null,6584,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6587,freq,6586,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6589,null,6588,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6591,null,6590,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6593,freq,6592,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6595,null,6594,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6597,null,6596,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6599,freq,6598,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6601,null,6600,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6603,null,6602,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6605,freq,6604,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6607,null,6606,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6609,null,6608,java.lang.Integer.valueOf(3));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6611,freq,6610,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void cardinalityOfNull_remove1701() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "cardinalityOfNull_remove1701");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6575,null,6574,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6577,freq,6576,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6579,null,6578,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6581,freq,6580,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6583,null,6582,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6585,null,6584,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6587,freq,6586,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6589,null,6588,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6591,null,6590,java.lang.Integer.valueOf(1));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6593,freq,6592,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6595,null,6594,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6597,null,6596,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6599,freq,6598,freq.get(null));
        }
        list.add("B");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6601,null,6600,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6603,null,6602,java.lang.Integer.valueOf(2));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6605,freq,6604,freq.get(null));
        }
        list.add(null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6607,null,6606,org.apache.commons.collections4.CollectionUtils.cardinality(null, list));
        {
            final Map<java.lang.String, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(list);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6609,null,6608,java.lang.Integer.valueOf(3));
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6611,freq,6610,freq.get(null));
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAll_add2187() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_add2187");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAll_add2188() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_add2188");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAll_add2189() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_add2189");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAll_add2190() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_add2190");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAll_add2191() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_add2191");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAll_add2192() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_add2192");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAll_add2193() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_add2193");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAll_add2194() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_add2194");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAll() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(-1);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAll_literalMutation2101() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_literalMutation2101");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(2);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAll_literalMutation2102() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_literalMutation2102");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("foo");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAll_literalMutation2103() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_literalMutation2103");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(0);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAll_literalMutation2104() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_literalMutation2104");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("foo");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAll_literalMutation2105() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_literalMutation2105");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(2);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAll_literalMutation2106() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_literalMutation2106");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("foo");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAll_literalMutation2107() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_literalMutation2107");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(3);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAll_literalMutation2108() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_literalMutation2108");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("foo");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAll_literalMutation2109() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_literalMutation2109");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("foo");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAll_literalMutation2110() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_literalMutation2110");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(4);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAll_literalMutation2111() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_literalMutation2111");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("foo");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAll_literalMutation2112() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_literalMutation2112");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("foo");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAll_literalMutation2113() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_literalMutation2113");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAll_remove1708() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_remove1708");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAll_remove1709() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_remove1709");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAll_remove1710() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_remove1710");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAll_remove1711() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_remove1711");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAll_remove1712() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_remove1712");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAll_remove1713() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_remove1713");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAll_remove1714() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_remove1714");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAll_remove1715() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAll_remove1715");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        final Collection<java.lang.String> multiples = new ArrayList<java.lang.String>(3);
        multiples.add("1");
        multiples.add("3");
        multiples.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6664,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6666,null,6665,org.apache.commons.collections4.CollectionUtils.containsAll(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6667,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6669,null,6668,org.apache.commons.collections4.CollectionUtils.containsAll(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6671,null,6670,org.apache.commons.collections4.CollectionUtils.containsAll(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6673,null,6672,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6674,!(org.apache.commons.collections4.CollectionUtils.containsAll(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6675,!(org.apache.commons.collections4.CollectionUtils.containsAll(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6676,!(org.apache.commons.collections4.CollectionUtils.containsAll(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6677,!(org.apache.commons.collections4.CollectionUtils.containsAll(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6679,null,6678,org.apache.commons.collections4.CollectionUtils.containsAll(odds, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6680,!(org.apache.commons.collections4.CollectionUtils.containsAll(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6682,null,6681,org.apache.commons.collections4.CollectionUtils.containsAll(empty, empty));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6684,null,6683,org.apache.commons.collections4.CollectionUtils.containsAll(odds, multiples));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6686,null,6685,org.apache.commons.collections4.CollectionUtils.containsAll(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAny_add2195() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_add2195");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAny_add2196() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_add2196");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAny_add2197() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_add2197");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAny_add2198() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_add2198");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAny_add2199() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_add2199");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAny() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(-1);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAny_literalMutation2115() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_literalMutation2115");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(2);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAny_literalMutation2116() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_literalMutation2116");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("foo");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAny_literalMutation2117() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_literalMutation2117");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(0);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAny_literalMutation2118() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_literalMutation2118");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("foo");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAny_literalMutation2119() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_literalMutation2119");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(0);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAny_literalMutation2120() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_literalMutation2120");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("foo");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAny_literalMutation2121() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_literalMutation2121");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(3);
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAny_literalMutation2122() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_literalMutation2122");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("foo");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void containsAny_literalMutation2123() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_literalMutation2123");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        one.add("1");
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAny_remove1716() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_remove1716");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAny_remove1717() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_remove1717");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAny_remove1718() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_remove1718");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAny_remove1719() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_remove1719");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void containsAny_remove1720() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "containsAny_remove1720");
        final Collection<java.lang.String> empty = new ArrayList<java.lang.String>(0);
        final Collection<java.lang.String> one = new ArrayList<java.lang.String>(1);
        final Collection<java.lang.String> two = new ArrayList<java.lang.String>(1);
        two.add("2");
        final Collection<java.lang.String> three = new ArrayList<java.lang.String>(1);
        three.add("3");
        final Collection<java.lang.String> odds = new ArrayList<java.lang.String>(2);
        odds.add("1");
        odds.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6688,null,6687,org.apache.commons.collections4.CollectionUtils.containsAny(one, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6690,null,6689,org.apache.commons.collections4.CollectionUtils.containsAny(odds, one));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6692,null,6691,org.apache.commons.collections4.CollectionUtils.containsAny(three, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6694,null,6693,org.apache.commons.collections4.CollectionUtils.containsAny(odds, three));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6696,null,6695,org.apache.commons.collections4.CollectionUtils.containsAny(two, two));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6698,null,6697,org.apache.commons.collections4.CollectionUtils.containsAny(odds, odds));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6699,!(org.apache.commons.collections4.CollectionUtils.containsAny(two, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6700,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, two)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6701,!(org.apache.commons.collections4.CollectionUtils.containsAny(one, three)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6702,!(org.apache.commons.collections4.CollectionUtils.containsAny(three, one)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6703,!(org.apache.commons.collections4.CollectionUtils.containsAny(odds, empty)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6704,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, odds)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6705,!(org.apache.commons.collections4.CollectionUtils.containsAny(empty, empty)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void union() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "union");
        final Collection<java.lang.Integer> col = org.apache.commons.collections4.CollectionUtils.union(iterableA, iterableC);
        final Map<java.lang.Integer, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(col);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7277,null,7276,java.lang.Integer.valueOf(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7279,freq,7278,freq.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7281,null,7280,java.lang.Integer.valueOf(4));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7283,freq,7282,freq.get(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7285,null,7284,java.lang.Integer.valueOf(3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7287,freq,7286,freq.get(3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7289,null,7288,java.lang.Integer.valueOf(4));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7291,freq,7290,freq.get(4));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7293,null,7292,java.lang.Integer.valueOf(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7295,freq,7294,freq.get(5));
        final Collection<java.lang.Number> col2 = org.apache.commons.collections4.CollectionUtils.union(collectionC2, iterableA);
        final Map<java.lang.Number, java.lang.Integer> freq2 = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(col2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7297,null,7296,java.lang.Integer.valueOf(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7299,freq2,7298,freq2.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7301,null,7300,java.lang.Integer.valueOf(4));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7303,freq2,7302,freq2.get(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7305,null,7304,java.lang.Integer.valueOf(3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7307,freq2,7306,freq2.get(3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7309,null,7308,java.lang.Integer.valueOf(4));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7311,freq2,7310,freq2.get(4));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7313,null,7312,java.lang.Integer.valueOf(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7315,freq2,7314,freq2.get(5));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void disjunction() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disjunction");
        final Collection<java.lang.Integer> col = org.apache.commons.collections4.CollectionUtils.disjunction(iterableA, iterableC);
        final Map<java.lang.Integer, java.lang.Integer> freq = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(col);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6715,null,6714,java.lang.Integer.valueOf(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6717,freq,6716,freq.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6719,null,6718,java.lang.Integer.valueOf(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6721,freq,6720,freq.get(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6723,freq,6722,freq.get(3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6725,null,6724,java.lang.Integer.valueOf(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6727,freq,6726,freq.get(4));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6729,null,6728,java.lang.Integer.valueOf(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6731,freq,6730,freq.get(5));
        final Collection<java.lang.Number> col2 = org.apache.commons.collections4.CollectionUtils.disjunction(collectionC2, collectionA);
        final Map<java.lang.Number, java.lang.Integer> freq2 = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(col2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6733,null,6732,java.lang.Integer.valueOf(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6735,freq2,6734,freq2.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6737,null,6736,java.lang.Integer.valueOf(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6739,freq2,6738,freq2.get(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6741,freq2,6740,freq2.get(3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6743,null,6742,java.lang.Integer.valueOf(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6745,freq2,6744,freq2.get(4));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6747,null,6746,java.lang.Integer.valueOf(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6749,freq2,6748,freq2.get(5));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testDisjunctionAsUnionMinusIntersection() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDisjunctionAsUnionMinusIntersection");
        final Collection<java.lang.Number> dis = org.apache.commons.collections4.CollectionUtils.<Number>disjunction(collectionA, collectionC);
        final Collection<java.lang.Number> un = org.apache.commons.collections4.CollectionUtils.<Number>union(collectionA, collectionC);
        final Collection<java.lang.Number> inter = org.apache.commons.collections4.CollectionUtils.<Number>intersection(collectionA, collectionC);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6987,null,6986,org.apache.commons.collections4.CollectionUtils.isEqualCollection(dis, org.apache.commons.collections4.CollectionUtils.subtract(un, inter)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testDisjunctionAsSymmetricDifference() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDisjunctionAsSymmetricDifference");
        final Collection<java.lang.Number> dis = org.apache.commons.collections4.CollectionUtils.<Number>disjunction(collectionA, collectionC);
        final Collection<java.lang.Number> amb = org.apache.commons.collections4.CollectionUtils.<Number>subtract(collectionA, collectionC);
        final Collection<java.lang.Number> bma = org.apache.commons.collections4.CollectionUtils.<Number>subtract(collectionC, collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6985,null,6984,org.apache.commons.collections4.CollectionUtils.isEqualCollection(dis, org.apache.commons.collections4.CollectionUtils.union(amb, bma)));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSubtractWithPredicate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSubtractWithPredicate");
        final Predicate<java.lang.Number> predicate = new Predicate<java.lang.Number>() {
            public boolean evaluate(final Number n) {
                return (n.longValue()) > 3L;
            }
        };
        final Collection<java.lang.Number> col = org.apache.commons.collections4.CollectionUtils.subtract(iterableA, collectionC, predicate);
        final Map<java.lang.Number, java.lang.Integer> freq2 = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(col);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7232,null,7231,java.lang.Integer.valueOf(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7234,freq2,7233,freq2.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7236,null,7235,java.lang.Integer.valueOf(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7238,freq2,7237,freq2.get(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7240,null,7239,java.lang.Integer.valueOf(3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7242,freq2,7241,freq2.get(3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7244,null,7243,java.lang.Integer.valueOf(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7246,freq2,7245,freq2.get(4));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7248,freq2,7247,freq2.get(5));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSubtract() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSubtract");
        final Predicate<java.lang.Number> predicate = new Predicate<java.lang.Number>() {
            public boolean evaluate(final Number n) {
                return (n.longValue()) > 4L;
            }
        };
        final Collection<java.lang.Number> col = org.apache.commons.collections4.CollectionUtils.subtract(iterableA, collectionC, predicate);
        final Map<java.lang.Number, java.lang.Integer> freq2 = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(col);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7232,null,7231,java.lang.Integer.valueOf(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7234,freq2,7233,freq2.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7236,null,7235,java.lang.Integer.valueOf(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7238,freq2,7237,freq2.get(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7240,null,7239,java.lang.Integer.valueOf(3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7242,freq2,7241,freq2.get(3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7244,null,7243,java.lang.Integer.valueOf(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7246,freq2,7245,freq2.get(4));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7248,freq2,7247,freq2.get(5));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSubtractWithPredicate_remove1867() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSubtractWithPredicate_remove1867");
        final Predicate<java.lang.Number> predicate = new Predicate<java.lang.Number>() {
            public boolean evaluate(final Number n) {
                return (n.longValue()) > 3L;
            }
        };
        final Collection<java.lang.Number> col = org.apache.commons.collections4.CollectionUtils.subtract(iterableA, collectionC, predicate);
        final Map<java.lang.Number, java.lang.Integer> freq2 = org.apache.commons.collections4.CollectionUtils.getCardinalityMap(col);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7232,null,7231,java.lang.Integer.valueOf(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7234,freq2,7233,freq2.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7236,null,7235,java.lang.Integer.valueOf(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7238,freq2,7237,freq2.get(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7240,null,7239,java.lang.Integer.valueOf(3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7242,freq2,7241,freq2.get(3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7244,null,7243,java.lang.Integer.valueOf(2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7246,freq2,7245,freq2.get(4));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7248,freq2,7247,freq2.get(5));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsSubCollectionOfSelf() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollectionOfSelf");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7093,null,7092,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7095,null,7094,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionB, collectionB));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsSubCollection2() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_add2317() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_add2317");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_add2318() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_add2318");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_add2319() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_add2319");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_add2320() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_add2320");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_add2321() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_add2321");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_add2322() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_add2322");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_add2323() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_add2323");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_add2324() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_add2324");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_add2325() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_add2325");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_add2326() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_add2326");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_add2327() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_add2327");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsSubCollection() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsSubCollection2_literalMutation2266() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_literalMutation2266");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsSubCollection2_literalMutation2267() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_literalMutation2267");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsSubCollection2_literalMutation2268() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_literalMutation2268");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsSubCollection2_literalMutation2269() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_literalMutation2269");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsSubCollection2_literalMutation2270() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_literalMutation2270");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsSubCollection2_literalMutation2271() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_literalMutation2271");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsSubCollection2_literalMutation2272() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_literalMutation2272");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsSubCollection2_literalMutation2273() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_literalMutation2273");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsSubCollection2_literalMutation2274() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_literalMutation2274");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsSubCollection2_literalMutation2275() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_literalMutation2275");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_remove1827() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_remove1827");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_remove1828() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_remove1828");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_remove1829() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_remove1829");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_remove1830() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_remove1830");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_remove1831() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_remove1831");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_remove1832() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_remove1832");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_remove1833() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_remove1833");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_remove1834() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_remove1834");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_remove1835() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_remove1835");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_remove1836() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_remove1836");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsSubCollection2_remove1837() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsSubCollection2_remove1837");
        final Collection<java.lang.Integer> c = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7056,null,7055,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7057,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7059,null,7058,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7060,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7062,null,7061,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7063,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7065,null,7064,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7066,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7068,null,7067,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7069,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7071,null,7070,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7072,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7074,null,7073,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7075,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7077,null,7076,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7078,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7080,null,7079,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7081,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7083,null,7082,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7084,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c)));
        c.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7086,null,7085,org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7088,null,7087,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        c.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7089,!(org.apache.commons.collections4.CollectionUtils.isSubCollection(c, collectionA)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7091,null,7090,org.apache.commons.collections4.CollectionUtils.isSubCollection(collectionA, c));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollectionToSelf() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionToSelf");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7031,null,7030,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7033,null,7032,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionB, collectionB));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollectionReturnsFalse_add2309() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionReturnsFalse_add2309");
        final List<java.lang.Integer> b = new ArrayList<java.lang.Integer>(collectionA);
        b.remove(1);
        b.remove(1);
        b.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7027,null,7026,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7029,null,7028,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollectionReturnsFalse_add2310() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionReturnsFalse_add2310");
        final List<java.lang.Integer> b = new ArrayList<java.lang.Integer>(collectionA);
        b.remove(1);
        b.add(5);
        b.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7027,null,7026,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7029,null,7028,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollectionReturnsFalse() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionReturnsFalse");
        final List<java.lang.Integer> b = new ArrayList<java.lang.Integer>(collectionA);
        b.remove(0);
        b.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7027,null,7026,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7029,null,7028,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollectionReturnsFalse_literalMutation2257() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionReturnsFalse_literalMutation2257");
        final List<java.lang.Integer> b = new ArrayList<java.lang.Integer>(collectionA);
        b.remove(1);
        b.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7027,null,7026,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7029,null,7028,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollectionReturnsFalse_remove1819() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionReturnsFalse_remove1819");
        final List<java.lang.Integer> b = new ArrayList<java.lang.Integer>(collectionA);
        b.add(5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7027,null,7026,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7029,null,7028,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollectionReturnsFalse_remove1820() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionReturnsFalse_remove1820");
        final List<java.lang.Integer> b = new ArrayList<java.lang.Integer>(collectionA);
        b.remove(1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7027,null,7026,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7029,null,7028,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, collectionA));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollection2_add2301() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2_add2301");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollection2_add2302() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2_add2302");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollection2_add2303() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2_add2303");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollection2_add2304() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2_add2304");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollection2_add2305() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2_add2305");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollection2_add2306() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2_add2306");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollection() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollection2() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollection2_literalMutation2241() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2_literalMutation2241");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollection2_literalMutation2242() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2_literalMutation2242");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollection2_literalMutation2243() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2_literalMutation2243");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollection2_literalMutation2244() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2_literalMutation2244");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollection2_remove1811() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2_remove1811");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollection2_remove1812() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2_remove1812");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollection2_remove1813() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2_remove1813");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollection2_remove1814() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2_remove1814");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollection2_remove1815() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2_remove1815");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollection2_remove1816() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollection2_remove1816");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6995,null,6994,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6997,null,6996,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6998,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6999,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7001,null,7000,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7003,null,7002,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7004,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7005,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7007,null,7006,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7009,null,7008,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7010,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7011,!(org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7013,null,7012,org.apache.commons.collections4.CollectionUtils.isEqualCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7015,null,7014,org.apache.commons.collections4.CollectionUtils.isEqualCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollectionEquator_add2307() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionEquator_add2307");
        final Collection<java.lang.Integer> collB = org.apache.commons.collections4.CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);
        final Equator<java.lang.Integer> e = new Equator<java.lang.Integer>() {
            public boolean equate(final Integer o1, final Integer o2) {
                if ((((o1.intValue()) % 2) == 0) ^ (((o2.intValue()) % 2) == 0)) {
                    return false;
                } else {
                    return true;
                }
            }

            public int hash(final Integer o) {
                return ((o.intValue()) % 2) == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7017,null,7016,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionA, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7019,null,7018,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7021,null,7020,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collB, collectionA, e));
        final Equator<java.lang.Number> defaultEquator = org.apache.commons.collections4.functors.DefaultEquator.defaultEquator();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7023,null,7022,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7025,null,7024,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollectionEquator() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionEquator");
        final Collection<java.lang.Integer> collB = org.apache.commons.collections4.CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);
        final Equator<java.lang.Integer> e = new Equator<java.lang.Integer>() {
            public boolean equate(final Integer o1, final Integer o2) {
                if ((((o1.intValue()) % 1) == 0) ^ (((o2.intValue()) % 2) == 0)) {
                    return false;
                } else {
                    return true;
                }
            }

            public int hash(final Integer o) {
                return ((o.intValue()) % 2) == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7017,null,7016,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionA, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7019,null,7018,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7021,null,7020,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collB, collectionA, e));
        final Equator<java.lang.Number> defaultEquator = org.apache.commons.collections4.functors.DefaultEquator.defaultEquator();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7023,null,7022,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7025,null,7024,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollectionEquator_literalMutation2246() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionEquator_literalMutation2246");
        final Collection<java.lang.Integer> collB = org.apache.commons.collections4.CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);
        final Equator<java.lang.Integer> e = new Equator<java.lang.Integer>() {
            public boolean equate(final Integer o1, final Integer o2) {
                if ((((o1.intValue()) % 2) == 1) ^ (((o2.intValue()) % 2) == 0)) {
                    return false;
                } else {
                    return true;
                }
            }

            public int hash(final Integer o) {
                return ((o.intValue()) % 2) == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7017,null,7016,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionA, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7019,null,7018,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7021,null,7020,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collB, collectionA, e));
        final Equator<java.lang.Number> defaultEquator = org.apache.commons.collections4.functors.DefaultEquator.defaultEquator();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7023,null,7022,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7025,null,7024,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollectionEquator_literalMutation2247() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionEquator_literalMutation2247");
        final Collection<java.lang.Integer> collB = org.apache.commons.collections4.CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);
        final Equator<java.lang.Integer> e = new Equator<java.lang.Integer>() {
            public boolean equate(final Integer o1, final Integer o2) {
                if ((((o1.intValue()) % 2) == 0) ^ (((o2.intValue()) % 1) == 0)) {
                    return false;
                } else {
                    return true;
                }
            }

            public int hash(final Integer o) {
                return ((o.intValue()) % 2) == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7017,null,7016,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionA, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7019,null,7018,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7021,null,7020,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collB, collectionA, e));
        final Equator<java.lang.Number> defaultEquator = org.apache.commons.collections4.functors.DefaultEquator.defaultEquator();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7023,null,7022,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7025,null,7024,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollectionEquator_literalMutation2248() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionEquator_literalMutation2248");
        final Collection<java.lang.Integer> collB = org.apache.commons.collections4.CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);
        final Equator<java.lang.Integer> e = new Equator<java.lang.Integer>() {
            public boolean equate(final Integer o1, final Integer o2) {
                if ((((o1.intValue()) % 2) == 0) ^ (((o2.intValue()) % 2) == 1)) {
                    return false;
                } else {
                    return true;
                }
            }

            public int hash(final Integer o) {
                return ((o.intValue()) % 2) == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7017,null,7016,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionA, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7019,null,7018,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7021,null,7020,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collB, collectionA, e));
        final Equator<java.lang.Number> defaultEquator = org.apache.commons.collections4.functors.DefaultEquator.defaultEquator();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7023,null,7022,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7025,null,7024,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollectionEquator_literalMutation2249() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionEquator_literalMutation2249");
        final Collection<java.lang.Integer> collB = org.apache.commons.collections4.CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);
        final Equator<java.lang.Integer> e = new Equator<java.lang.Integer>() {
            public boolean equate(final Integer o1, final Integer o2) {
                if ((((o1.intValue()) % 2) == 0) ^ (((o2.intValue()) % 2) == 0)) {
                    return false;
                } else {
                    return true;
                }
            }

            public int hash(final Integer o) {
                return ((o.intValue()) % 2) == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7017,null,7016,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionA, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7019,null,7018,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7021,null,7020,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collB, collectionA, e));
        final Equator<java.lang.Number> defaultEquator = org.apache.commons.collections4.functors.DefaultEquator.defaultEquator();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7023,null,7022,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7025,null,7024,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollectionEquator_literalMutation2250() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionEquator_literalMutation2250");
        final Collection<java.lang.Integer> collB = org.apache.commons.collections4.CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);
        final Equator<java.lang.Integer> e = new Equator<java.lang.Integer>() {
            public boolean equate(final Integer o1, final Integer o2) {
                if ((((o1.intValue()) % 2) == 0) ^ (((o2.intValue()) % 2) == 0)) {
                    return false;
                } else {
                    return false;
                }
            }

            public int hash(final Integer o) {
                return ((o.intValue()) % 2) == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7017,null,7016,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionA, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7019,null,7018,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7021,null,7020,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collB, collectionA, e));
        final Equator<java.lang.Number> defaultEquator = org.apache.commons.collections4.functors.DefaultEquator.defaultEquator();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7023,null,7022,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7025,null,7024,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollectionEquator_literalMutation2251() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionEquator_literalMutation2251");
        final Collection<java.lang.Integer> collB = org.apache.commons.collections4.CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);
        final Equator<java.lang.Integer> e = new Equator<java.lang.Integer>() {
            public boolean equate(final Integer o1, final Integer o2) {
                if ((((o1.intValue()) % 2) == 0) ^ (((o2.intValue()) % 2) == 0)) {
                    return false;
                } else {
                    return true;
                }
            }

            public int hash(final Integer o) {
                return ((o.intValue()) % 3) == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7017,null,7016,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionA, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7019,null,7018,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7021,null,7020,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collB, collectionA, e));
        final Equator<java.lang.Number> defaultEquator = org.apache.commons.collections4.functors.DefaultEquator.defaultEquator();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7023,null,7022,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7025,null,7024,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollectionEquator_literalMutation2252() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionEquator_literalMutation2252");
        final Collection<java.lang.Integer> collB = org.apache.commons.collections4.CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);
        final Equator<java.lang.Integer> e = new Equator<java.lang.Integer>() {
            public boolean equate(final Integer o1, final Integer o2) {
                if ((((o1.intValue()) % 2) == 0) ^ (((o2.intValue()) % 2) == 0)) {
                    return false;
                } else {
                    return true;
                }
            }

            public int hash(final Integer o) {
                return ((o.intValue()) % 2) == 1 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7017,null,7016,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionA, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7019,null,7018,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7021,null,7020,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collB, collectionA, e));
        final Equator<java.lang.Number> defaultEquator = org.apache.commons.collections4.functors.DefaultEquator.defaultEquator();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7023,null,7022,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7025,null,7024,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollectionEquator_literalMutation2253() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionEquator_literalMutation2253");
        final Collection<java.lang.Integer> collB = org.apache.commons.collections4.CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);
        final Equator<java.lang.Integer> e = new Equator<java.lang.Integer>() {
            public boolean equate(final Integer o1, final Integer o2) {
                if ((((o1.intValue()) % 2) == 0) ^ (((o2.intValue()) % 2) == 0)) {
                    return false;
                } else {
                    return true;
                }
            }

            public int hash(final Integer o) {
                return ((o.intValue()) % 2) == 0 ? Integer.valueOf(1).hashCode() : Integer.valueOf(1).hashCode();
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7017,null,7016,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionA, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7019,null,7018,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7021,null,7020,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collB, collectionA, e));
        final Equator<java.lang.Number> defaultEquator = org.apache.commons.collections4.functors.DefaultEquator.defaultEquator();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7023,null,7022,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7025,null,7024,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEqualCollectionEquator_literalMutation2254() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionEquator_literalMutation2254");
        final Collection<java.lang.Integer> collB = org.apache.commons.collections4.CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);
        final Equator<java.lang.Integer> e = new Equator<java.lang.Integer>() {
            public boolean equate(final Integer o1, final Integer o2) {
                if ((((o1.intValue()) % 2) == 0) ^ (((o2.intValue()) % 2) == 0)) {
                    return false;
                } else {
                    return true;
                }
            }

            public int hash(final Integer o) {
                return ((o.intValue()) % 2) == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(0).hashCode();
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7017,null,7016,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionA, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7019,null,7018,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7021,null,7020,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collB, collectionA, e));
        final Equator<java.lang.Number> defaultEquator = org.apache.commons.collections4.functors.DefaultEquator.defaultEquator();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7023,null,7022,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7025,null,7024,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEqualCollectionEquator_remove1817() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionEquator_remove1817");
        final Collection<java.lang.Integer> collB = org.apache.commons.collections4.CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);
        final Equator<java.lang.Integer> e = new Equator<java.lang.Integer>() {
            public boolean equate(final Integer o1, final Integer o2) {
                if ((((o1.intValue()) % 2) == 0) ^ (((o2.intValue()) % 2) == 0)) {
                    return false;
                } else {
                    return true;
                }
            }

            public int hash(final Integer o) {
                return ((o.intValue()) % 2) == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7017,null,7016,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionA, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7019,null,7018,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, e));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7021,null,7020,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collB, collectionA, e));
        final Equator<java.lang.Number> defaultEquator = org.apache.commons.collections4.functors.DefaultEquator.defaultEquator();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7023,null,7022,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7025,null,7024,org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testIsEqualCollectionNullEquator() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionNullEquator");
        org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionA, null);
        org.apache.commons.collections4.CollectionUtils.isEqualCollection(collectionA, collectionA, null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testIsEqualCollectionNullEquator_remove1818() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEqualCollectionNullEquator_remove1818");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsProperSubCollection_add2312() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsProperSubCollection_add2312");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7040,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        b.add("1");
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7042,null,7041,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7043,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7044,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7045,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, a)));
        a.add("1");
        a.add("2");
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7046,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7047,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7049,null,7048,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7051,null,7050,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.intersection(collectionA, collectionC), collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7053,null,7052,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.subtract(a, b), a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7054,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, org.apache.commons.collections4.CollectionUtils.subtract(a, b))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsProperSubCollection_add2313() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsProperSubCollection_add2313");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7040,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7042,null,7041,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7043,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7044,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7045,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, a)));
        a.add("1");
        a.add("1");
        a.add("2");
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7046,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7047,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7049,null,7048,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7051,null,7050,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.intersection(collectionA, collectionC), collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7053,null,7052,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.subtract(a, b), a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7054,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, org.apache.commons.collections4.CollectionUtils.subtract(a, b))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsProperSubCollection_add2314() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsProperSubCollection_add2314");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7040,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7042,null,7041,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7043,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7044,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7045,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, a)));
        a.add("1");
        a.add("2");
        a.add("2");
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7046,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7047,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7049,null,7048,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7051,null,7050,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.intersection(collectionA, collectionC), collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7053,null,7052,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.subtract(a, b), a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7054,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, org.apache.commons.collections4.CollectionUtils.subtract(a, b))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsProperSubCollection_add2315() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsProperSubCollection_add2315");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7040,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7042,null,7041,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7043,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7044,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7045,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, a)));
        a.add("1");
        a.add("2");
        b.add("2");
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7046,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7047,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7049,null,7048,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7051,null,7050,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.intersection(collectionA, collectionC), collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7053,null,7052,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.subtract(a, b), a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7054,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, org.apache.commons.collections4.CollectionUtils.subtract(a, b))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsProperSubCollection_add2316() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsProperSubCollection_add2316");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7040,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7042,null,7041,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7043,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7044,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7045,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, a)));
        a.add("1");
        a.add("2");
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7046,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7047,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        a.add("1");
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7049,null,7048,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7051,null,7050,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.intersection(collectionA, collectionC), collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7053,null,7052,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.subtract(a, b), a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7054,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, org.apache.commons.collections4.CollectionUtils.subtract(a, b))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsProperSubCollection() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsProperSubCollection");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7040,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        b.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7042,null,7041,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7043,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7044,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7045,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, a)));
        a.add("1");
        a.add("2");
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7046,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7047,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7049,null,7048,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7051,null,7050,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.intersection(collectionA, collectionC), collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7053,null,7052,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.subtract(a, b), a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7054,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, org.apache.commons.collections4.CollectionUtils.subtract(a, b))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsProperSubCollection_literalMutation2261() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsProperSubCollection_literalMutation2261");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7040,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7042,null,7041,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7043,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7044,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7045,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, a)));
        a.add("foo");
        a.add("2");
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7046,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7047,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7049,null,7048,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7051,null,7050,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.intersection(collectionA, collectionC), collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7053,null,7052,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.subtract(a, b), a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7054,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, org.apache.commons.collections4.CollectionUtils.subtract(a, b))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsProperSubCollection_literalMutation2262() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsProperSubCollection_literalMutation2262");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7040,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7042,null,7041,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7043,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7044,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7045,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, a)));
        a.add("1");
        a.add("foo");
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7046,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7047,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7049,null,7048,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7051,null,7050,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.intersection(collectionA, collectionC), collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7053,null,7052,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.subtract(a, b), a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7054,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, org.apache.commons.collections4.CollectionUtils.subtract(a, b))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsProperSubCollection_literalMutation2263() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsProperSubCollection_literalMutation2263");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7040,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7042,null,7041,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7043,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7044,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7045,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, a)));
        a.add("1");
        a.add("2");
        b.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7046,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7047,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7049,null,7048,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7051,null,7050,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.intersection(collectionA, collectionC), collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7053,null,7052,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.subtract(a, b), a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7054,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, org.apache.commons.collections4.CollectionUtils.subtract(a, b))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsProperSubCollection_literalMutation2264() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsProperSubCollection_literalMutation2264");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7040,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        b.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7042,null,7041,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7043,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7044,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7045,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, a)));
        a.add("1");
        a.add("2");
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7046,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7047,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        a.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7049,null,7048,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7051,null,7050,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.intersection(collectionA, collectionC), collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7053,null,7052,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.subtract(a, b), a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7054,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, org.apache.commons.collections4.CollectionUtils.subtract(a, b))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsProperSubCollection_remove1822() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsProperSubCollection_remove1822");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7040,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7042,null,7041,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7043,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7044,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7045,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, a)));
        a.add("1");
        a.add("2");
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7046,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7047,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7049,null,7048,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7051,null,7050,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.intersection(collectionA, collectionC), collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7053,null,7052,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.subtract(a, b), a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7054,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, org.apache.commons.collections4.CollectionUtils.subtract(a, b))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsProperSubCollection_remove1823() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsProperSubCollection_remove1823");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7040,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7042,null,7041,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7043,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7044,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7045,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, a)));
        a.add("1");
        a.add("2");
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7046,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7047,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7049,null,7048,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7051,null,7050,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.intersection(collectionA, collectionC), collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7053,null,7052,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.subtract(a, b), a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7054,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, org.apache.commons.collections4.CollectionUtils.subtract(a, b))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsProperSubCollection_remove1824() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsProperSubCollection_remove1824");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7040,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7042,null,7041,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7043,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7044,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7045,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, a)));
        a.add("1");
        a.add("2");
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7046,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7047,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7049,null,7048,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7051,null,7050,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.intersection(collectionA, collectionC), collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7053,null,7052,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.subtract(a, b), a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7054,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, org.apache.commons.collections4.CollectionUtils.subtract(a, b))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsProperSubCollection_remove1825() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsProperSubCollection_remove1825");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7040,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7042,null,7041,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7043,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7044,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7045,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, a)));
        a.add("1");
        a.add("2");
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7046,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7047,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7049,null,7048,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7051,null,7050,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.intersection(collectionA, collectionC), collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7053,null,7052,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.subtract(a, b), a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7054,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, org.apache.commons.collections4.CollectionUtils.subtract(a, b))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsProperSubCollection_remove1826() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsProperSubCollection_remove1826");
        final Collection<java.lang.String> a = new ArrayList<java.lang.String>();
        final Collection<java.lang.String> b = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7040,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7042,null,7041,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7043,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7044,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, b)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7045,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, a)));
        a.add("1");
        a.add("2");
        b.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7046,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7047,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, b)));
        a.add("1");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7049,null,7048,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(b, a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7051,null,7050,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.intersection(collectionA, collectionC), collectionA));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7053,null,7052,org.apache.commons.collections4.CollectionUtils.isProperSubCollection(org.apache.commons.collections4.CollectionUtils.subtract(a, b), a));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7054,!(org.apache.commons.collections4.CollectionUtils.isProperSubCollection(a, org.apache.commons.collections4.CollectionUtils.subtract(a, b))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void find() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "find");
        Predicate<java.lang.Number> testPredicate = org.apache.commons.collections4.functors.EqualPredicate.equalPredicate(((Number)(3)));
        Integer test = org.apache.commons.collections4.CollectionUtils.find(collectionA, testPredicate);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6812,test,6811,test.equals(4));
        testPredicate = org.apache.commons.collections4.functors.EqualPredicate.equalPredicate(((Number)(45)));
        test = org.apache.commons.collections4.CollectionUtils.find(collectionA, testPredicate);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6813,(test == null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6815,null,6814,org.apache.commons.collections4.CollectionUtils.find(null, testPredicate));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6817,null,6816,org.apache.commons.collections4.CollectionUtils.find(collectionA, null));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void find_literalMutation2144() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "find_literalMutation2144");
        Predicate<java.lang.Number> testPredicate = org.apache.commons.collections4.functors.EqualPredicate.equalPredicate(((Number)(4)));
        Integer test = org.apache.commons.collections4.CollectionUtils.find(collectionA, testPredicate);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6812,test,6811,test.equals(4));
        testPredicate = org.apache.commons.collections4.functors.EqualPredicate.equalPredicate(((Number)(44)));
        test = org.apache.commons.collections4.CollectionUtils.find(collectionA, testPredicate);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6813,(test == null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6815,null,6814,org.apache.commons.collections4.CollectionUtils.find(null, testPredicate));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6817,null,6816,org.apache.commons.collections4.CollectionUtils.find(collectionA, null));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test(timeout = 1000)
    public void forAllDoCollection_add2230() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoCollection_add2230");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionA);
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6840,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6841,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6842,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6843,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6844,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Collection)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test(timeout = 1000)
    public void forAllDoCollection_add2231() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoCollection_add2231");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6840,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6841,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6842,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6843,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6844,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Collection)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test(timeout = 1000)
    public void forAllDoCollection_add2232() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoCollection_add2232");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6840,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6841,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6842,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6843,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6844,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Collection)(null)), testClosure);
        col.add(null);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test(timeout = 1000)
    public void forAllDoCollection_add2233() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoCollection_add2233");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6840,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6841,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6842,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6843,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6844,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Collection)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "foo" , "rawtypes" })
    @Test
    public void forAllDoCollection() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoCollection");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6840,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6841,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6842,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6843,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6844,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Collection)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "foo" })
    @Test
    public void forAllDoCollection_literalMutation2154() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoCollection_literalMutation2154");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6840,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6841,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6842,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6843,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6844,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Collection)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test
    public void forAllDoCollection_literalMutation2155() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoCollection_literalMutation2155");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("foo");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6840,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6841,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6842,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6843,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6844,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Collection)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test(timeout = 1000)
    public void forAllDoCollection_remove1748() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoCollection_remove1748");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6840,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6841,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6842,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6843,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6844,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Collection)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test(timeout = 1000)
    public void forAllDoCollection_remove1749() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoCollection_remove1749");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6840,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6841,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6842,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6843,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6844,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Collection)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test(timeout = 1000)
    public void forAllDoCollection_remove1750() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoCollection_remove1750");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6840,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6841,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6842,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6843,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6844,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Collection)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test(timeout = 1000)
    public void forAllDoCollection_remove1751() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoCollection_remove1751");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6840,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6841,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6842,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col, ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6843,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6844,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Collection)(null)), testClosure);
        col.add(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test(timeout = 1000)
    public void forAllDoIterator_add2236() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoIterator_add2236");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionA);
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6845,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6846,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6847,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6848,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6849,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Iterator)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test(timeout = 1000)
    public void forAllDoIterator_add2237() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoIterator_add2237");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6845,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6846,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6847,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6848,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6849,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Iterator)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test(timeout = 1000)
    public void forAllDoIterator_add2238() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoIterator_add2238");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6845,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6846,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6847,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6848,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6849,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Iterator)(null)), testClosure);
        col.add(null);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test(timeout = 1000)
    public void forAllDoIterator_add2239() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoIterator_add2239");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6845,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6846,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6847,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6848,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6849,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Iterator)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "foo" , "rawtypes" })
    @Test
    public void forAllDoIterator() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoIterator");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6845,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6846,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6847,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6848,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6849,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Iterator)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "foo" })
    @Test
    public void forAllDoIterator_literalMutation2162() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoIterator_literalMutation2162");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6845,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6846,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6847,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6848,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6849,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Iterator)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test
    public void forAllDoIterator_literalMutation2163() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoIterator_literalMutation2163");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("foo");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6845,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6846,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6847,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6848,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6849,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Iterator)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test(timeout = 1000)
    public void forAllDoIterator_remove1754() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoIterator_remove1754");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6845,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6846,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6847,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6848,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6849,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Iterator)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test(timeout = 1000)
    public void forAllDoIterator_remove1755() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoIterator_remove1755");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6845,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6846,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6847,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6848,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6849,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Iterator)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test(timeout = 1000)
    public void forAllDoIterator_remove1756() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoIterator_remove1756");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6845,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6846,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6847,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6848,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6849,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Iterator)(null)), testClosure);
        col.add(null);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @SuppressWarnings(value = { "unchecked" , "rawtypes" })
    @Test(timeout = 1000)
    public void forAllDoIterator_remove1757() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoIterator_remove1757");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        Closure<java.util.List<? extends java.lang.Number>> resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6845,testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6846,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6847,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(col.iterator(), ((Closure<java.util.List<? extends java.lang.Number>>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6848,resultClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6849,((collectionA.isEmpty()) && (collectionB.isEmpty())));
        resultClosure = org.apache.commons.collections4.CollectionUtils.forAllDo(((Iterator)(null)), testClosure);
        col.add(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class, timeout = 1000)
    public void forAllDoFailure_add2234() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoFailure_add2234");
        final Closure<java.lang.String> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.lang.String> col = new ArrayList<java.lang.String>();
        col.add("x");
        col.add("x");
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class, timeout = 1000)
    public void forAllDoFailure_add2235() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoFailure_add2235");
        final Closure<java.lang.String> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.lang.String> col = new ArrayList<java.lang.String>();
        col.add("x");
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class)
    public void forAllDoFailure() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoFailure");
        final Closure<java.lang.String> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("foo");
        final Collection<java.lang.String> col = new ArrayList<java.lang.String>();
        col.add("x");
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class)
    public void forAllDoFailure_literalMutation2160() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoFailure_literalMutation2160");
        final Closure<java.lang.String> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.lang.String> col = new ArrayList<java.lang.String>();
        col.add("foo");
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class, timeout = 1000)
    public void forAllDoFailure_remove1752() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoFailure_remove1752");
        final Closure<java.lang.String> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.lang.String> col = new ArrayList<java.lang.String>();
        org.apache.commons.collections4.CollectionUtils.forAllDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = FunctorException.class, timeout = 1000)
    public void forAllDoFailure_remove1753() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllDoFailure_remove1753");
        final Closure<java.lang.String> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.lang.String> col = new ArrayList<java.lang.String>();
        col.add("x");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_add2217() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_add2217");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_add2218() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_add2218");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_add2219() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_add2219");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_add2220() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_add2220");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_add2221() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_add2221");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_add2222() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_add2222");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_add2223() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_add2223");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_add2224() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_add2224");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_add2225() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_add2225");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_add2226() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_add2226");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_add2227() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_add2227");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void forAllButLastDoCollection() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("foo");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void forAllButLastDoCollection_literalMutation2146() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_literalMutation2146");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("foo", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void forAllButLastDoCollection_literalMutation2147() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_literalMutation2147");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "foo", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void forAllButLastDoCollection_literalMutation2148() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_literalMutation2148");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "foo");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void forAllButLastDoCollection_literalMutation2149() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_literalMutation2149");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + "foo"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void forAllButLastDoCollection_literalMutation2150() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_literalMutation2150");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("foo");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void forAllButLastDoCollection_literalMutation2151() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_literalMutation2151");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + "foo"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_remove1735() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_remove1735");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_remove1736() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_remove1736");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_remove1737() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_remove1737");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_remove1738() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_remove1738");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_remove1739() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_remove1739");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_remove1740() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_remove1740");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_remove1741() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_remove1741");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_remove1742() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_remove1742");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_remove1743() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_remove1743");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_remove1744() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_remove1744");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
                resultOne.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoCollection_remove1745() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoCollection_remove1745");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6818,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6819,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6820,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        col.clear();
        col.add(collectionB);
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6821,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6822,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6823,!(collectionB.isEmpty()));
        col.clear();
        lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col, testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6824,lastElement);
        Collection<java.lang.String> strings = java.util.Arrays.asList("a", "b", "c");
        final StringBuffer result = new StringBuffer();
        result.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, new Closure<java.lang.String>() {
            public void execute(String input) {
                result.append((input + ";"));
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6826,result,6825,result.toString());
        Collection<java.lang.String> oneString = java.util.Arrays.asList("a");
        final StringBuffer resultOne = new StringBuffer();
        resultOne.append(org.apache.commons.collections4.CollectionUtils.forAllButLastDo(oneString, new Closure<java.lang.String>() {
            public void execute(String input) {
            }
        }));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6828,resultOne,6827,resultOne.toString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6830,null,6829,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(strings, ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6832,null,6831,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Collection<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoIterator_add2228() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoIterator_add2228");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6833,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6834,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6835,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6837,null,6836,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col.iterator(), ((org.apache.commons.collections4.Closure<java.util.List<? extends java.lang.Number>>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6839,null,6838,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Iterator<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoIterator_add2229() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoIterator_add2229");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6833,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6834,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6835,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6837,null,6836,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col.iterator(), ((org.apache.commons.collections4.Closure<java.util.List<? extends java.lang.Number>>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6839,null,6838,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Iterator<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void forAllButLastDoIterator() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoIterator");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("foo");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionA);
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6833,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6834,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6835,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6837,null,6836,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col.iterator(), ((org.apache.commons.collections4.Closure<java.util.List<? extends java.lang.Number>>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6839,null,6838,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Iterator<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoIterator_remove1746() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoIterator_remove1746");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6833,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6834,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6835,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6837,null,6836,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col.iterator(), ((org.apache.commons.collections4.Closure<java.util.List<? extends java.lang.Number>>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6839,null,6838,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Iterator<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void forAllButLastDoIterator_remove1747() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "forAllButLastDoIterator_remove1747");
        final Closure<java.util.List<? extends java.lang.Number>> testClosure = org.apache.commons.collections4.ClosureUtils.invokerClosure("clear");
        final Collection<java.util.List<? extends java.lang.Number>> col = new ArrayList<java.util.List<? extends java.lang.Number>>();
        col.add(collectionB);
        List<? extends java.lang.Number> lastElement = org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col.iterator(), testClosure);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6833,lastElement);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6834,collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6835,((collectionA.isEmpty()) && (!(collectionB.isEmpty()))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6837,null,6836,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(col.iterator(), ((org.apache.commons.collections4.Closure<java.util.List<? extends java.lang.Number>>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6839,null,6838,org.apache.commons.collections4.CollectionUtils.forAllButLastDo(((java.util.Iterator<java.lang.String>)(null)), ((org.apache.commons.collections4.Closure<java.lang.String>)(null))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromMap_add2251() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_add2251");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromMap_add2252() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_add2252");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromMap_add2253() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_add2253");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromMap_add2254() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_add2254");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromMap_add2255() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_add2255");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromMap_add2256() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_add2256");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromMap_add2257() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_add2257");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromMap_add2258() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_add2258");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromMap() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("foo", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromMap_literalMutation2183() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_literalMutation2183");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "foo");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromMap_literalMutation2184() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_literalMutation2184");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("foo", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromMap_literalMutation2185() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_literalMutation2185");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "foo");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromMap_literalMutation2186() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_literalMutation2186");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, -1);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromMap_literalMutation2187() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_literalMutation2187");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromMap_literalMutation2188() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_literalMutation2188");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 3);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromMap_literalMutation2189() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_literalMutation2189");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 3);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromMap_literalMutation2190() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_literalMutation2190");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("foo", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromMap_literalMutation2191() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_literalMutation2191");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "foo");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromMap_literalMutation2192() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_literalMutation2192");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("foo", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromMap_literalMutation2193() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_literalMutation2193");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "foo");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromMap_literalMutation2194() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_literalMutation2194");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromMap_literalMutation2195() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_literalMutation2195");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("zeroKey", "zero");
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, -1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromMap_remove1767() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_remove1767");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromMap_remove1768() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_remove1768");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromMap_remove1769() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_remove1769");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromMap_remove1770() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_remove1770");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromMap_remove1771() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_remove1771");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromMap_remove1772() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromMap_remove1772");
        final Map<java.lang.String, java.lang.String> expected = new HashMap<java.lang.String, java.lang.String>();
        expected.put("oneKey", "one");
        final Map<java.lang.String, java.lang.String> found = new HashMap<java.lang.String, java.lang.String>();
        Map.Entry<java.lang.String, java.lang.String> entry = org.apache.commons.collections4.CollectionUtils.get(expected, 0);
        found.put(entry.getKey(), entry.getValue());
        entry = org.apache.commons.collections4.CollectionUtils.get(expected, 1);
        found.put(entry.getKey(), entry.getValue());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6885,expected);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6886,found);
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, 2);
        } catch (final IndexOutOfBoundsException e) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.get(expected, -2);
        } catch (final IndexOutOfBoundsException e) {
        }
        final SortedMap<java.lang.String, java.lang.String> map = new TreeMap<java.lang.String, java.lang.String>();
        map.put("zeroKey", "zero");
        map.put("oneKey", "one");
        Map.Entry<java.lang.String, java.lang.String> test = org.apache.commons.collections4.CollectionUtils.get(map, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6888,test,6887,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6890,test,6889,test.getValue());
        test = org.apache.commons.collections4.CollectionUtils.get(map, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6892,test,6891,test.getKey());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6894,test,6893,test.getValue());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Tests that {@link List}s are handled correctly - e.g. using
     * {@link List#get(int)}.
     */
@Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getFromList_add2247() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromList_add2247");
        final List<java.lang.String> list = createMock(List.class);
        expect(list.get(0)).andReturn("zero");
        expect(list.get(0)).andReturn("zero");
        expect(list.get(1)).andReturn("one");
        replay();
        final String string = org.apache.commons.collections4.CollectionUtils.get(list, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6882,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6884,null,6883,org.apache.commons.collections4.CollectionUtils.get(list, 1));
        org.apache.commons.collections4.CollectionUtils.get(new ArrayList<java.lang.Object>(), 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Tests that {@link List}s are handled correctly - e.g. using
     * {@link List#get(int)}.
     */
@Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getFromList_add2248() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromList_add2248");
        final List<java.lang.String> list = createMock(List.class);
        expect(list.get(0)).andReturn("zero");
        expect(list.get(1)).andReturn("one");
        expect(list.get(1)).andReturn("one");
        replay();
        final String string = org.apache.commons.collections4.CollectionUtils.get(list, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6882,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6884,null,6883,org.apache.commons.collections4.CollectionUtils.get(list, 1));
        org.apache.commons.collections4.CollectionUtils.get(new ArrayList<java.lang.Object>(), 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Tests that {@link List}s are handled correctly - e.g. using
     * {@link List#get(int)}.
     */
@Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getFromList_add2249() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromList_add2249");
        final List<java.lang.String> list = createMock(List.class);
        expect(list.get(0)).andReturn("zero");
        expect(list.get(1)).andReturn("one");
        replay();
        replay();
        final String string = org.apache.commons.collections4.CollectionUtils.get(list, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6882,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6884,null,6883,org.apache.commons.collections4.CollectionUtils.get(list, 1));
        org.apache.commons.collections4.CollectionUtils.get(new ArrayList<java.lang.Object>(), 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Tests that {@link List}s are handled correctly - e.g. using
     * {@link List#get(int)}.
     */
@Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getFromList_add2250() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromList_add2250");
        final List<java.lang.String> list = createMock(List.class);
        expect(list.get(0)).andReturn("zero");
        expect(list.get(1)).andReturn("one");
        replay();
        final String string = org.apache.commons.collections4.CollectionUtils.get(list, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6882,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6884,null,6883,org.apache.commons.collections4.CollectionUtils.get(list, 1));
        org.apache.commons.collections4.CollectionUtils.get(new ArrayList<java.lang.Object>(), 2);
        org.apache.commons.collections4.CollectionUtils.get(new ArrayList<java.lang.Object>(), 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Tests that {@link List}s are handled correctly - e.g. using
     * {@link List#get(int)}.
     */
@Test(expected = IndexOutOfBoundsException.class)
    public void getFromList() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromList");
        final List<java.lang.String> list = createMock(List.class);
        expect(list.get(1)).andReturn("zero");
        expect(list.get(1)).andReturn("one");
        replay();
        final String string = org.apache.commons.collections4.CollectionUtils.get(list, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6882,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6884,null,6883,org.apache.commons.collections4.CollectionUtils.get(list, 1));
        org.apache.commons.collections4.CollectionUtils.get(new ArrayList<java.lang.Object>(), 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Tests that {@link List}s are handled correctly - e.g. using
     * {@link List#get(int)}.
     */
@Test(expected = IndexOutOfBoundsException.class)
    public void getFromList_literalMutation2177() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromList_literalMutation2177");
        final List<java.lang.String> list = createMock(List.class);
        expect(list.get(0)).andReturn("foo");
        expect(list.get(1)).andReturn("one");
        replay();
        final String string = org.apache.commons.collections4.CollectionUtils.get(list, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6882,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6884,null,6883,org.apache.commons.collections4.CollectionUtils.get(list, 1));
        org.apache.commons.collections4.CollectionUtils.get(new ArrayList<java.lang.Object>(), 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Tests that {@link List}s are handled correctly - e.g. using
     * {@link List#get(int)}.
     */
@Test(expected = IndexOutOfBoundsException.class)
    public void getFromList_literalMutation2178() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromList_literalMutation2178");
        final List<java.lang.String> list = createMock(List.class);
        expect(list.get(0)).andReturn("zero");
        expect(list.get(2)).andReturn("one");
        replay();
        final String string = org.apache.commons.collections4.CollectionUtils.get(list, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6882,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6884,null,6883,org.apache.commons.collections4.CollectionUtils.get(list, 1));
        org.apache.commons.collections4.CollectionUtils.get(new ArrayList<java.lang.Object>(), 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Tests that {@link List}s are handled correctly - e.g. using
     * {@link List#get(int)}.
     */
@Test(expected = IndexOutOfBoundsException.class)
    public void getFromList_literalMutation2179() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromList_literalMutation2179");
        final List<java.lang.String> list = createMock(List.class);
        expect(list.get(0)).andReturn("zero");
        expect(list.get(1)).andReturn("foo");
        replay();
        final String string = org.apache.commons.collections4.CollectionUtils.get(list, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6882,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6884,null,6883,org.apache.commons.collections4.CollectionUtils.get(list, 1));
        org.apache.commons.collections4.CollectionUtils.get(new ArrayList<java.lang.Object>(), 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Tests that {@link List}s are handled correctly - e.g. using
     * {@link List#get(int)}.
     */
@Test(expected = IndexOutOfBoundsException.class)
    public void getFromList_literalMutation2180() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromList_literalMutation2180");
        final List<java.lang.String> list = createMock(List.class);
        expect(list.get(0)).andReturn("zero");
        expect(list.get(1)).andReturn("one");
        replay();
        final String string = org.apache.commons.collections4.CollectionUtils.get(list, 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6882,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6884,null,6883,org.apache.commons.collections4.CollectionUtils.get(list, 1));
        org.apache.commons.collections4.CollectionUtils.get(new ArrayList<java.lang.Object>(), 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Tests that {@link List}s are handled correctly - e.g. using
     * {@link List#get(int)}.
     */
@Test(expected = IndexOutOfBoundsException.class)
    public void getFromList_literalMutation2181() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromList_literalMutation2181");
        final List<java.lang.String> list = createMock(List.class);
        expect(list.get(0)).andReturn("zero");
        expect(list.get(1)).andReturn("one");
        replay();
        final String string = org.apache.commons.collections4.CollectionUtils.get(list, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6882,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6884,null,6883,org.apache.commons.collections4.CollectionUtils.get(list, 1));
        org.apache.commons.collections4.CollectionUtils.get(new ArrayList<java.lang.Object>(), 3);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Tests that {@link List}s are handled correctly - e.g. using
     * {@link List#get(int)}.
     */
@Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getFromList_remove1763() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromList_remove1763");
        final List<java.lang.String> list = createMock(List.class);
        expect(list.get(1)).andReturn("one");
        replay();
        final String string = org.apache.commons.collections4.CollectionUtils.get(list, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6882,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6884,null,6883,org.apache.commons.collections4.CollectionUtils.get(list, 1));
        org.apache.commons.collections4.CollectionUtils.get(new ArrayList<java.lang.Object>(), 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Tests that {@link List}s are handled correctly - e.g. using
     * {@link List#get(int)}.
     */
@Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getFromList_remove1764() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromList_remove1764");
        final List<java.lang.String> list = createMock(List.class);
        expect(list.get(1)).andReturn("one");
        replay();
        final String string = org.apache.commons.collections4.CollectionUtils.get(list, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6882,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6884,null,6883,org.apache.commons.collections4.CollectionUtils.get(list, 1));
        org.apache.commons.collections4.CollectionUtils.get(new ArrayList<java.lang.Object>(), 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Tests that {@link List}s are handled correctly - e.g. using
     * {@link List#get(int)}.
     */
@Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getFromList_remove1765() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromList_remove1765");
        final List<java.lang.String> list = createMock(List.class);
        expect(list.get(0)).andReturn("zero");
        expect(list.get(1)).andReturn("one");
        final String string = org.apache.commons.collections4.CollectionUtils.get(list, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6882,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6884,null,6883,org.apache.commons.collections4.CollectionUtils.get(list, 1));
        org.apache.commons.collections4.CollectionUtils.get(new ArrayList<java.lang.Object>(), 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Tests that {@link List}s are handled correctly - e.g. using
     * {@link List#get(int)}.
     */
@Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getFromList_remove1766() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromList_remove1766");
        final List<java.lang.String> list = createMock(List.class);
        expect(list.get(0)).andReturn("zero");
        expect(list.get(1)).andReturn("one");
        replay();
        final String string = org.apache.commons.collections4.CollectionUtils.get(list, 0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6882,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6884,null,6883,org.apache.commons.collections4.CollectionUtils.get(list, 1));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromIterator_add2246() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromIterator_add2246");
        Iterator<java.lang.Integer> iterator = iterableA.iterator();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6878,null,6877,((int)(org.apache.commons.collections4.CollectionUtils.get(iterator, 0))));
        iterator = iterableA.iterator();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6880,null,6879,((int)(org.apache.commons.collections4.CollectionUtils.get(iterator, 1))));
        try {
            org.apache.commons.collections4.CollectionUtils.get(iterator, 10);
            org.apache.commons.collections4.CollectionUtils.get(iterator, 10);
        } catch (final IndexOutOfBoundsException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6881,!(iterator.hasNext()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromIterator() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromIterator");
        Iterator<java.lang.Integer> iterator = iterableA.iterator();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6878,null,6877,((int)(org.apache.commons.collections4.CollectionUtils.get(iterator, 0))));
        iterator = iterableA.iterator();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6880,null,6879,((int)(org.apache.commons.collections4.CollectionUtils.get(iterator, 1))));
        try {
            org.apache.commons.collections4.CollectionUtils.get(iterator, 9);
        } catch (final IndexOutOfBoundsException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6881,!(iterator.hasNext()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromEnumeration_add2241() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromEnumeration_add2241");
        final Vector<java.lang.String> vector = new Vector<java.lang.String>();
        vector.addElement("zero");
        vector.addElement("zero");
        vector.addElement("one");
        Enumeration<java.lang.String> en = vector.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6871,null,6870,org.apache.commons.collections4.CollectionUtils.get(en, 0));
        en = vector.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6873,null,6872,org.apache.commons.collections4.CollectionUtils.get(en, 1));
        try {
            org.apache.commons.collections4.CollectionUtils.get(en, 3);
        } catch (final IndexOutOfBoundsException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6874,!(en.hasMoreElements()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromEnumeration_add2242() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromEnumeration_add2242");
        final Vector<java.lang.String> vector = new Vector<java.lang.String>();
        vector.addElement("zero");
        vector.addElement("one");
        vector.addElement("one");
        Enumeration<java.lang.String> en = vector.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6871,null,6870,org.apache.commons.collections4.CollectionUtils.get(en, 0));
        en = vector.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6873,null,6872,org.apache.commons.collections4.CollectionUtils.get(en, 1));
        try {
            org.apache.commons.collections4.CollectionUtils.get(en, 3);
        } catch (final IndexOutOfBoundsException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6874,!(en.hasMoreElements()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromEnumeration_add2243() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromEnumeration_add2243");
        final Vector<java.lang.String> vector = new Vector<java.lang.String>();
        vector.addElement("zero");
        vector.addElement("one");
        Enumeration<java.lang.String> en = vector.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6871,null,6870,org.apache.commons.collections4.CollectionUtils.get(en, 0));
        en = vector.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6873,null,6872,org.apache.commons.collections4.CollectionUtils.get(en, 1));
        try {
            org.apache.commons.collections4.CollectionUtils.get(en, 3);
            org.apache.commons.collections4.CollectionUtils.get(en, 3);
        } catch (final IndexOutOfBoundsException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6874,!(en.hasMoreElements()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromEnumeration() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromEnumeration");
        final Vector<java.lang.String> vector = new Vector<java.lang.String>();
        vector.addElement("foo");
        vector.addElement("one");
        Enumeration<java.lang.String> en = vector.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6871,null,6870,org.apache.commons.collections4.CollectionUtils.get(en, 0));
        en = vector.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6873,null,6872,org.apache.commons.collections4.CollectionUtils.get(en, 1));
        try {
            org.apache.commons.collections4.CollectionUtils.get(en, 3);
        } catch (final IndexOutOfBoundsException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6874,!(en.hasMoreElements()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromEnumeration_literalMutation2170() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromEnumeration_literalMutation2170");
        final Vector<java.lang.String> vector = new Vector<java.lang.String>();
        vector.addElement("zero");
        vector.addElement("foo");
        Enumeration<java.lang.String> en = vector.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6871,null,6870,org.apache.commons.collections4.CollectionUtils.get(en, 0));
        en = vector.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6873,null,6872,org.apache.commons.collections4.CollectionUtils.get(en, 1));
        try {
            org.apache.commons.collections4.CollectionUtils.get(en, 3);
        } catch (final IndexOutOfBoundsException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6874,!(en.hasMoreElements()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void getFromEnumeration_literalMutation2171() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromEnumeration_literalMutation2171");
        final Vector<java.lang.String> vector = new Vector<java.lang.String>();
        vector.addElement("zero");
        vector.addElement("one");
        Enumeration<java.lang.String> en = vector.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6871,null,6870,org.apache.commons.collections4.CollectionUtils.get(en, 0));
        en = vector.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6873,null,6872,org.apache.commons.collections4.CollectionUtils.get(en, 1));
        try {
            org.apache.commons.collections4.CollectionUtils.get(en, 4);
        } catch (final IndexOutOfBoundsException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6874,!(en.hasMoreElements()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromEnumeration_remove1759() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromEnumeration_remove1759");
        final Vector<java.lang.String> vector = new Vector<java.lang.String>();
        vector.addElement("one");
        Enumeration<java.lang.String> en = vector.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6871,null,6870,org.apache.commons.collections4.CollectionUtils.get(en, 0));
        en = vector.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6873,null,6872,org.apache.commons.collections4.CollectionUtils.get(en, 1));
        try {
            org.apache.commons.collections4.CollectionUtils.get(en, 3);
        } catch (final IndexOutOfBoundsException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6874,!(en.hasMoreElements()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void getFromEnumeration_remove1760() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromEnumeration_remove1760");
        final Vector<java.lang.String> vector = new Vector<java.lang.String>();
        vector.addElement("one");
        Enumeration<java.lang.String> en = vector.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6871,null,6870,org.apache.commons.collections4.CollectionUtils.get(en, 0));
        en = vector.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6873,null,6872,org.apache.commons.collections4.CollectionUtils.get(en, 1));
        try {
            org.apache.commons.collections4.CollectionUtils.get(en, 3);
        } catch (final IndexOutOfBoundsException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6874,!(en.hasMoreElements()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getFromIterable_add2244() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromIterable_add2244");
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("element", 1);
        bag.add("element", 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6876,null,6875,org.apache.commons.collections4.CollectionUtils.get(bag, 0));
        org.apache.commons.collections4.CollectionUtils.get(bag, 1);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getFromIterable_add2245() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromIterable_add2245");
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("element", 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6876,null,6875,org.apache.commons.collections4.CollectionUtils.get(bag, 0));
        org.apache.commons.collections4.CollectionUtils.get(bag, 1);
        org.apache.commons.collections4.CollectionUtils.get(bag, 1);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFromIterable() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromIterable");
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("foo", 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6876,null,6875,org.apache.commons.collections4.CollectionUtils.get(bag, 0));
        org.apache.commons.collections4.CollectionUtils.get(bag, 1);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFromIterable_literalMutation2173() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromIterable_literalMutation2173");
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("element", 2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6876,null,6875,org.apache.commons.collections4.CollectionUtils.get(bag, 0));
        org.apache.commons.collections4.CollectionUtils.get(bag, 1);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFromIterable_literalMutation2174() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromIterable_literalMutation2174");
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("element", 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6876,null,6875,org.apache.commons.collections4.CollectionUtils.get(bag, 0));
        org.apache.commons.collections4.CollectionUtils.get(bag, 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getFromIterable_remove1761() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromIterable_remove1761");
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6876,null,6875,org.apache.commons.collections4.CollectionUtils.get(bag, 0));
        org.apache.commons.collections4.CollectionUtils.get(bag, 1);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getFromIterable_remove1762() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromIterable_remove1762");
        final Bag<java.lang.String> bag = new HashBag<java.lang.String>();
        bag.add("element", 1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6876,null,6875,org.apache.commons.collections4.CollectionUtils.get(bag, 0));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getFromObjectArray_add2260() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromObjectArray_add2260");
        final Object[] objArray = new Object[2];
        objArray[0] = "zero";
        objArray[1] = "one";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6896,null,6895,org.apache.commons.collections4.CollectionUtils.get(objArray, 0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6898,null,6897,org.apache.commons.collections4.CollectionUtils.get(objArray, 1));
        org.apache.commons.collections4.CollectionUtils.get(objArray, 2);
        org.apache.commons.collections4.CollectionUtils.get(objArray, 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFromObjectArray() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromObjectArray");
        final Object[] objArray = new Object[3];
        objArray[0] = "zero";
        objArray[1] = "one";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6896,null,6895,org.apache.commons.collections4.CollectionUtils.get(objArray, 0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6898,null,6897,org.apache.commons.collections4.CollectionUtils.get(objArray, 1));
        org.apache.commons.collections4.CollectionUtils.get(objArray, 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFromObjectArray_literalMutation2198() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromObjectArray_literalMutation2198");
        final Object[] objArray = new Object[2];
        objArray[1] = "zero";
        objArray[1] = "one";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6896,null,6895,org.apache.commons.collections4.CollectionUtils.get(objArray, 0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6898,null,6897,org.apache.commons.collections4.CollectionUtils.get(objArray, 1));
        org.apache.commons.collections4.CollectionUtils.get(objArray, 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFromObjectArray_literalMutation2199() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromObjectArray_literalMutation2199");
        final Object[] objArray = new Object[2];
        objArray[0] = "foo";
        objArray[1] = "one";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6896,null,6895,org.apache.commons.collections4.CollectionUtils.get(objArray, 0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6898,null,6897,org.apache.commons.collections4.CollectionUtils.get(objArray, 1));
        org.apache.commons.collections4.CollectionUtils.get(objArray, 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFromObjectArray_literalMutation2200() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromObjectArray_literalMutation2200");
        final Object[] objArray = new Object[2];
        objArray[0] = "zero";
        objArray[2] = "one";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6896,null,6895,org.apache.commons.collections4.CollectionUtils.get(objArray, 0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6898,null,6897,org.apache.commons.collections4.CollectionUtils.get(objArray, 1));
        org.apache.commons.collections4.CollectionUtils.get(objArray, 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFromObjectArray_literalMutation2201() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromObjectArray_literalMutation2201");
        final Object[] objArray = new Object[2];
        objArray[0] = "zero";
        objArray[1] = "foo";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6896,null,6895,org.apache.commons.collections4.CollectionUtils.get(objArray, 0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6898,null,6897,org.apache.commons.collections4.CollectionUtils.get(objArray, 1));
        org.apache.commons.collections4.CollectionUtils.get(objArray, 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFromObjectArray_literalMutation2202() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromObjectArray_literalMutation2202");
        final Object[] objArray = new Object[2];
        objArray[0] = "zero";
        objArray[1] = "one";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6896,null,6895,org.apache.commons.collections4.CollectionUtils.get(objArray, 0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6898,null,6897,org.apache.commons.collections4.CollectionUtils.get(objArray, 1));
        org.apache.commons.collections4.CollectionUtils.get(objArray, 3);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getFromObjectArray_remove1774() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromObjectArray_remove1774");
        final Object[] objArray = new Object[2];
        objArray[0] = "zero";
        objArray[1] = "one";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6896,null,6895,org.apache.commons.collections4.CollectionUtils.get(objArray, 0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6898,null,6897,org.apache.commons.collections4.CollectionUtils.get(objArray, 1));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getFromPrimativeArray_add2261() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromPrimativeArray_add2261");
        final int[] array = new int[2];
        array[0] = 10;
        array[1] = 20;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6900,null,6899,org.apache.commons.collections4.CollectionUtils.get(array, 0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6902,null,6901,org.apache.commons.collections4.CollectionUtils.get(array, 1));
        org.apache.commons.collections4.CollectionUtils.get(array, 2);
        org.apache.commons.collections4.CollectionUtils.get(array, 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFromPrimativeArray() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromPrimativeArray");
        final int[] array = new int[3];
        array[0] = 10;
        array[1] = 20;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6900,null,6899,org.apache.commons.collections4.CollectionUtils.get(array, 0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6902,null,6901,org.apache.commons.collections4.CollectionUtils.get(array, 1));
        org.apache.commons.collections4.CollectionUtils.get(array, 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFromPrimativeArray_literalMutation2204() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromPrimativeArray_literalMutation2204");
        final int[] array = new int[2];
        array[-1] = 10;
        array[1] = 20;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6900,null,6899,org.apache.commons.collections4.CollectionUtils.get(array, 0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6902,null,6901,org.apache.commons.collections4.CollectionUtils.get(array, 1));
        org.apache.commons.collections4.CollectionUtils.get(array, 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFromPrimativeArray_literalMutation2205() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromPrimativeArray_literalMutation2205");
        final int[] array = new int[2];
        array[0] = 11;
        array[1] = 20;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6900,null,6899,org.apache.commons.collections4.CollectionUtils.get(array, 0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6902,null,6901,org.apache.commons.collections4.CollectionUtils.get(array, 1));
        org.apache.commons.collections4.CollectionUtils.get(array, 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFromPrimativeArray_literalMutation2206() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromPrimativeArray_literalMutation2206");
        final int[] array = new int[2];
        array[0] = 10;
        array[2] = 20;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6900,null,6899,org.apache.commons.collections4.CollectionUtils.get(array, 0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6902,null,6901,org.apache.commons.collections4.CollectionUtils.get(array, 1));
        org.apache.commons.collections4.CollectionUtils.get(array, 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFromPrimativeArray_literalMutation2207() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromPrimativeArray_literalMutation2207");
        final int[] array = new int[2];
        array[0] = 10;
        array[1] = 19;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6900,null,6899,org.apache.commons.collections4.CollectionUtils.get(array, 0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6902,null,6901,org.apache.commons.collections4.CollectionUtils.get(array, 1));
        org.apache.commons.collections4.CollectionUtils.get(array, 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFromPrimativeArray_literalMutation2208() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromPrimativeArray_literalMutation2208");
        final int[] array = new int[2];
        array[0] = 10;
        array[1] = 20;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6900,null,6899,org.apache.commons.collections4.CollectionUtils.get(array, 0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6902,null,6901,org.apache.commons.collections4.CollectionUtils.get(array, 1));
        org.apache.commons.collections4.CollectionUtils.get(array, 3);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getFromPrimativeArray_remove1775() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromPrimativeArray_remove1775");
        final int[] array = new int[2];
        array[0] = 10;
        array[1] = 20;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6900,null,6899,org.apache.commons.collections4.CollectionUtils.get(array, 0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6902,null,6901,org.apache.commons.collections4.CollectionUtils.get(array, 1));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void getFromObject_add2259() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromObject_add2259");
        final Object obj = new Object();
        org.apache.commons.collections4.CollectionUtils.get(obj, 0);
        org.apache.commons.collections4.CollectionUtils.get(obj, 0);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class)
    public void getFromObject() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromObject");
        final Object obj = new Object();
        org.apache.commons.collections4.CollectionUtils.get(obj, -1);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void getFromObject_remove1773() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getFromObject_remove1773");
        final Object obj = new Object();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSize_List_add2356() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_List_add2356");
        List<java.lang.String> list = null;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7212,null,7211,org.apache.commons.collections4.CollectionUtils.size(list));
        list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7214,null,7213,org.apache.commons.collections4.CollectionUtils.size(list));
        list.add("a");
        list.add("a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7216,null,7215,org.apache.commons.collections4.CollectionUtils.size(list));
        list.add("b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7218,null,7217,org.apache.commons.collections4.CollectionUtils.size(list));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSize_List_add2357() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_List_add2357");
        List<java.lang.String> list = null;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7212,null,7211,org.apache.commons.collections4.CollectionUtils.size(list));
        list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7214,null,7213,org.apache.commons.collections4.CollectionUtils.size(list));
        list.add("a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7216,null,7215,org.apache.commons.collections4.CollectionUtils.size(list));
        list.add("b");
        list.add("b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7218,null,7217,org.apache.commons.collections4.CollectionUtils.size(list));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_List() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_List");
        List<java.lang.String> list = null;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7212,null,7211,org.apache.commons.collections4.CollectionUtils.size(list));
        list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7214,null,7213,org.apache.commons.collections4.CollectionUtils.size(list));
        list.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7216,null,7215,org.apache.commons.collections4.CollectionUtils.size(list));
        list.add("b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7218,null,7217,org.apache.commons.collections4.CollectionUtils.size(list));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_List_literalMutation2335() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_List_literalMutation2335");
        List<java.lang.String> list = null;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7212,null,7211,org.apache.commons.collections4.CollectionUtils.size(list));
        list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7214,null,7213,org.apache.commons.collections4.CollectionUtils.size(list));
        list.add("a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7216,null,7215,org.apache.commons.collections4.CollectionUtils.size(list));
        list.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7218,null,7217,org.apache.commons.collections4.CollectionUtils.size(list));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSize_List_remove1862() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_List_remove1862");
        List<java.lang.String> list = null;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7212,null,7211,org.apache.commons.collections4.CollectionUtils.size(list));
        list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7214,null,7213,org.apache.commons.collections4.CollectionUtils.size(list));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7216,null,7215,org.apache.commons.collections4.CollectionUtils.size(list));
        list.add("b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7218,null,7217,org.apache.commons.collections4.CollectionUtils.size(list));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSize_List_remove1863() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_List_remove1863");
        List<java.lang.String> list = null;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7212,null,7211,org.apache.commons.collections4.CollectionUtils.size(list));
        list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7214,null,7213,org.apache.commons.collections4.CollectionUtils.size(list));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7216,null,7215,org.apache.commons.collections4.CollectionUtils.size(list));
        list.add("b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7218,null,7217,org.apache.commons.collections4.CollectionUtils.size(list));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSize_Map_add2358() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Map_add2358");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7220,null,7219,org.apache.commons.collections4.CollectionUtils.size(map));
        map.put("1", "a");
        map.put("1", "a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7222,null,7221,org.apache.commons.collections4.CollectionUtils.size(map));
        map.put("2", "b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7224,null,7223,org.apache.commons.collections4.CollectionUtils.size(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSize_Map_add2359() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Map_add2359");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7220,null,7219,org.apache.commons.collections4.CollectionUtils.size(map));
        map.put("1", "a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7222,null,7221,org.apache.commons.collections4.CollectionUtils.size(map));
        map.put("2", "b");
        map.put("2", "b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7224,null,7223,org.apache.commons.collections4.CollectionUtils.size(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_Map() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Map");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7220,null,7219,org.apache.commons.collections4.CollectionUtils.size(map));
        map.put("foo", "a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7222,null,7221,org.apache.commons.collections4.CollectionUtils.size(map));
        map.put("2", "b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7224,null,7223,org.apache.commons.collections4.CollectionUtils.size(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_Map_literalMutation2337() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Map_literalMutation2337");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7220,null,7219,org.apache.commons.collections4.CollectionUtils.size(map));
        map.put("1", "foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7222,null,7221,org.apache.commons.collections4.CollectionUtils.size(map));
        map.put("2", "b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7224,null,7223,org.apache.commons.collections4.CollectionUtils.size(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_Map_literalMutation2338() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Map_literalMutation2338");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7220,null,7219,org.apache.commons.collections4.CollectionUtils.size(map));
        map.put("1", "a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7222,null,7221,org.apache.commons.collections4.CollectionUtils.size(map));
        map.put("foo", "b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7224,null,7223,org.apache.commons.collections4.CollectionUtils.size(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_Map_literalMutation2339() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Map_literalMutation2339");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7220,null,7219,org.apache.commons.collections4.CollectionUtils.size(map));
        map.put("1", "a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7222,null,7221,org.apache.commons.collections4.CollectionUtils.size(map));
        map.put("2", "foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7224,null,7223,org.apache.commons.collections4.CollectionUtils.size(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSize_Map_remove1864() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Map_remove1864");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7220,null,7219,org.apache.commons.collections4.CollectionUtils.size(map));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7222,null,7221,org.apache.commons.collections4.CollectionUtils.size(map));
        map.put("2", "b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7224,null,7223,org.apache.commons.collections4.CollectionUtils.size(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSize_Map_remove1865() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Map_remove1865");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7220,null,7219,org.apache.commons.collections4.CollectionUtils.size(map));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7222,null,7221,org.apache.commons.collections4.CollectionUtils.size(map));
        map.put("2", "b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7224,null,7223,org.apache.commons.collections4.CollectionUtils.size(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_Array() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Array");
        final Object[] objectArray = new Object[1];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7194,null,7193,org.apache.commons.collections4.CollectionUtils.size(objectArray));
        final String[] stringArray = new String[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7196,null,7195,org.apache.commons.collections4.CollectionUtils.size(stringArray));
        stringArray[0] = "a";
        stringArray[1] = "b";
        stringArray[2] = "c";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7198,null,7197,org.apache.commons.collections4.CollectionUtils.size(stringArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_Array_literalMutation2322() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Array_literalMutation2322");
        final Object[] objectArray = new Object[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7194,null,7193,org.apache.commons.collections4.CollectionUtils.size(objectArray));
        final String[] stringArray = new String[4];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7196,null,7195,org.apache.commons.collections4.CollectionUtils.size(stringArray));
        stringArray[0] = "a";
        stringArray[1] = "b";
        stringArray[2] = "c";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7198,null,7197,org.apache.commons.collections4.CollectionUtils.size(stringArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_Array_literalMutation2323() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Array_literalMutation2323");
        final Object[] objectArray = new Object[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7194,null,7193,org.apache.commons.collections4.CollectionUtils.size(objectArray));
        final String[] stringArray = new String[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7196,null,7195,org.apache.commons.collections4.CollectionUtils.size(stringArray));
        stringArray[1] = "a";
        stringArray[1] = "b";
        stringArray[2] = "c";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7198,null,7197,org.apache.commons.collections4.CollectionUtils.size(stringArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_Array_literalMutation2324() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Array_literalMutation2324");
        final Object[] objectArray = new Object[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7194,null,7193,org.apache.commons.collections4.CollectionUtils.size(objectArray));
        final String[] stringArray = new String[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7196,null,7195,org.apache.commons.collections4.CollectionUtils.size(stringArray));
        stringArray[0] = "foo";
        stringArray[1] = "b";
        stringArray[2] = "c";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7198,null,7197,org.apache.commons.collections4.CollectionUtils.size(stringArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_Array_literalMutation2325() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Array_literalMutation2325");
        final Object[] objectArray = new Object[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7194,null,7193,org.apache.commons.collections4.CollectionUtils.size(objectArray));
        final String[] stringArray = new String[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7196,null,7195,org.apache.commons.collections4.CollectionUtils.size(stringArray));
        stringArray[0] = "a";
        stringArray[2] = "b";
        stringArray[2] = "c";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7198,null,7197,org.apache.commons.collections4.CollectionUtils.size(stringArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_Array_literalMutation2326() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Array_literalMutation2326");
        final Object[] objectArray = new Object[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7194,null,7193,org.apache.commons.collections4.CollectionUtils.size(objectArray));
        final String[] stringArray = new String[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7196,null,7195,org.apache.commons.collections4.CollectionUtils.size(stringArray));
        stringArray[0] = "a";
        stringArray[1] = "foo";
        stringArray[2] = "c";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7198,null,7197,org.apache.commons.collections4.CollectionUtils.size(stringArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_Array_literalMutation2327() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Array_literalMutation2327");
        final Object[] objectArray = new Object[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7194,null,7193,org.apache.commons.collections4.CollectionUtils.size(objectArray));
        final String[] stringArray = new String[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7196,null,7195,org.apache.commons.collections4.CollectionUtils.size(stringArray));
        stringArray[0] = "a";
        stringArray[1] = "b";
        stringArray[3] = "c";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7198,null,7197,org.apache.commons.collections4.CollectionUtils.size(stringArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_Array_literalMutation2328() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Array_literalMutation2328");
        final Object[] objectArray = new Object[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7194,null,7193,org.apache.commons.collections4.CollectionUtils.size(objectArray));
        final String[] stringArray = new String[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7196,null,7195,org.apache.commons.collections4.CollectionUtils.size(stringArray));
        stringArray[0] = "a";
        stringArray[1] = "b";
        stringArray[2] = "foo";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7198,null,7197,org.apache.commons.collections4.CollectionUtils.size(stringArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_PrimitiveArray() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_PrimitiveArray");
        final int[] intArray = new int[1];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7226,null,7225,org.apache.commons.collections4.CollectionUtils.size(intArray));
        final double[] doubleArray = new double[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7228,null,7227,org.apache.commons.collections4.CollectionUtils.size(doubleArray));
        doubleArray[0] = 0.0;
        doubleArray[1] = 1.0;
        doubleArray[2] = 2.5;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7230,null,7229,org.apache.commons.collections4.CollectionUtils.size(doubleArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_PrimitiveArray_literalMutation2342() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_PrimitiveArray_literalMutation2342");
        final int[] intArray = new int[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7226,null,7225,org.apache.commons.collections4.CollectionUtils.size(intArray));
        final double[] doubleArray = new double[2];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7228,null,7227,org.apache.commons.collections4.CollectionUtils.size(doubleArray));
        doubleArray[0] = 0.0;
        doubleArray[1] = 1.0;
        doubleArray[2] = 2.5;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7230,null,7229,org.apache.commons.collections4.CollectionUtils.size(doubleArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_PrimitiveArray_literalMutation2343() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_PrimitiveArray_literalMutation2343");
        final int[] intArray = new int[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7226,null,7225,org.apache.commons.collections4.CollectionUtils.size(intArray));
        final double[] doubleArray = new double[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7228,null,7227,org.apache.commons.collections4.CollectionUtils.size(doubleArray));
        doubleArray[1] = 0.0;
        doubleArray[1] = 1.0;
        doubleArray[2] = 2.5;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7230,null,7229,org.apache.commons.collections4.CollectionUtils.size(doubleArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_PrimitiveArray_literalMutation2344() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_PrimitiveArray_literalMutation2344");
        final int[] intArray = new int[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7226,null,7225,org.apache.commons.collections4.CollectionUtils.size(intArray));
        final double[] doubleArray = new double[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7228,null,7227,org.apache.commons.collections4.CollectionUtils.size(doubleArray));
        doubleArray[0] = 1.0;
        doubleArray[1] = 1.0;
        doubleArray[2] = 2.5;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7230,null,7229,org.apache.commons.collections4.CollectionUtils.size(doubleArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_PrimitiveArray_literalMutation2345() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_PrimitiveArray_literalMutation2345");
        final int[] intArray = new int[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7226,null,7225,org.apache.commons.collections4.CollectionUtils.size(intArray));
        final double[] doubleArray = new double[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7228,null,7227,org.apache.commons.collections4.CollectionUtils.size(doubleArray));
        doubleArray[0] = 0.0;
        doubleArray[0] = 1.0;
        doubleArray[2] = 2.5;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7230,null,7229,org.apache.commons.collections4.CollectionUtils.size(doubleArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_PrimitiveArray_literalMutation2346() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_PrimitiveArray_literalMutation2346");
        final int[] intArray = new int[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7226,null,7225,org.apache.commons.collections4.CollectionUtils.size(intArray));
        final double[] doubleArray = new double[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7228,null,7227,org.apache.commons.collections4.CollectionUtils.size(doubleArray));
        doubleArray[0] = 0.0;
        doubleArray[1] = 2.0;
        doubleArray[2] = 2.5;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7230,null,7229,org.apache.commons.collections4.CollectionUtils.size(doubleArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_PrimitiveArray_literalMutation2347() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_PrimitiveArray_literalMutation2347");
        final int[] intArray = new int[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7226,null,7225,org.apache.commons.collections4.CollectionUtils.size(intArray));
        final double[] doubleArray = new double[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7228,null,7227,org.apache.commons.collections4.CollectionUtils.size(doubleArray));
        doubleArray[0] = 0.0;
        doubleArray[1] = 1.0;
        doubleArray[3] = 2.5;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7230,null,7229,org.apache.commons.collections4.CollectionUtils.size(doubleArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_PrimitiveArray_literalMutation2348() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_PrimitiveArray_literalMutation2348");
        final int[] intArray = new int[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7226,null,7225,org.apache.commons.collections4.CollectionUtils.size(intArray));
        final double[] doubleArray = new double[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7228,null,7227,org.apache.commons.collections4.CollectionUtils.size(doubleArray));
        doubleArray[0] = 0.0;
        doubleArray[1] = 1.0;
        doubleArray[2] = 3.5;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7230,null,7229,org.apache.commons.collections4.CollectionUtils.size(doubleArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSize_Enumeration_add2352() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Enumeration_add2352");
        final Vector<java.lang.String> list = new Vector<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7200,null,7199,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        list.add("a");
        list.add("a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7202,null,7201,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        list.add("b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7204,null,7203,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSize_Enumeration_add2353() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Enumeration_add2353");
        final Vector<java.lang.String> list = new Vector<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7200,null,7199,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        list.add("a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7202,null,7201,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        list.add("b");
        list.add("b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7204,null,7203,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_Enumeration() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Enumeration");
        final Vector<java.lang.String> list = new Vector<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7200,null,7199,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        list.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7202,null,7201,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        list.add("b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7204,null,7203,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_Enumeration_literalMutation2330() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Enumeration_literalMutation2330");
        final Vector<java.lang.String> list = new Vector<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7200,null,7199,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        list.add("a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7202,null,7201,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        list.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7204,null,7203,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSize_Enumeration_remove1858() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Enumeration_remove1858");
        final Vector<java.lang.String> list = new Vector<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7200,null,7199,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7202,null,7201,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        list.add("b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7204,null,7203,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSize_Enumeration_remove1859() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Enumeration_remove1859");
        final Vector<java.lang.String> list = new Vector<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7200,null,7199,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7202,null,7201,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        list.add("b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7204,null,7203,org.apache.commons.collections4.CollectionUtils.size(list.elements()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSize_Iterator_add2354() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Iterator_add2354");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7206,null,7205,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        list.add("a");
        list.add("a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7208,null,7207,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        list.add("b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7210,null,7209,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSize_Iterator_add2355() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Iterator_add2355");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7206,null,7205,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        list.add("a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7208,null,7207,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        list.add("b");
        list.add("b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7210,null,7209,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_Iterator() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Iterator");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7206,null,7205,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        list.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7208,null,7207,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        list.add("b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7210,null,7209,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSize_Iterator_literalMutation2332() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Iterator_literalMutation2332");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7206,null,7205,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        list.add("a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7208,null,7207,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        list.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7210,null,7209,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSize_Iterator_remove1860() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Iterator_remove1860");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7206,null,7205,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7208,null,7207,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        list.add("b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7210,null,7209,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSize_Iterator_remove1861() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Iterator_remove1861");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7206,null,7205,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7208,null,7207,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        list.add("b");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7210,null,7209,org.apache.commons.collections4.CollectionUtils.size(list.iterator()));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testSize_Other_add2360() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Other_add2360");
        org.apache.commons.collections4.CollectionUtils.size("not a list");
        org.apache.commons.collections4.CollectionUtils.size("not a list");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testSize_Other() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Other");
        org.apache.commons.collections4.CollectionUtils.size("foo");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void testSize_Other_remove1866() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSize_Other_remove1866");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_Null() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Null");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7186,null,7185,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(null));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSizeIsEmpty_List_add2349() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_List_add2349");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7178,null,7177,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list));
        list.add("a");
        list.add("a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7180,null,7179,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_List() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_List");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7178,null,7177,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list));
        list.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7180,null,7179,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSizeIsEmpty_List_remove1856() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_List_remove1856");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7178,null,7177,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7180,null,7179,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSizeIsEmpty_Map_add2350() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Map_add2350");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7182,null,7181,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(map));
        map.put("1", "a");
        map.put("1", "a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7184,null,7183,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_Map() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Map");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7182,null,7181,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(map));
        map.put("foo", "a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7184,null,7183,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_Map_literalMutation2311() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Map_literalMutation2311");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7182,null,7181,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(map));
        map.put("1", "foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7184,null,7183,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSizeIsEmpty_Map_remove1857() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Map_remove1857");
        final Map<java.lang.String, java.lang.String> map = new HashMap<java.lang.String, java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7182,null,7181,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7184,null,7183,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(map));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_Array() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Array");
        final Object[] objectArray = new Object[-1];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7160,null,7159,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(objectArray));
        final String[] stringArray = new String[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7162,null,7161,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(stringArray));
        stringArray[0] = "a";
        stringArray[1] = "b";
        stringArray[2] = "c";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7164,null,7163,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(stringArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_Array_literalMutation2300() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Array_literalMutation2300");
        final Object[] objectArray = new Object[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7160,null,7159,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(objectArray));
        final String[] stringArray = new String[4];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7162,null,7161,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(stringArray));
        stringArray[0] = "a";
        stringArray[1] = "b";
        stringArray[2] = "c";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7164,null,7163,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(stringArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_Array_literalMutation2301() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Array_literalMutation2301");
        final Object[] objectArray = new Object[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7160,null,7159,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(objectArray));
        final String[] stringArray = new String[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7162,null,7161,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(stringArray));
        stringArray[-1] = "a";
        stringArray[1] = "b";
        stringArray[2] = "c";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7164,null,7163,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(stringArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_Array_literalMutation2302() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Array_literalMutation2302");
        final Object[] objectArray = new Object[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7160,null,7159,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(objectArray));
        final String[] stringArray = new String[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7162,null,7161,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(stringArray));
        stringArray[0] = "foo";
        stringArray[1] = "b";
        stringArray[2] = "c";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7164,null,7163,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(stringArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_Array_literalMutation2303() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Array_literalMutation2303");
        final Object[] objectArray = new Object[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7160,null,7159,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(objectArray));
        final String[] stringArray = new String[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7162,null,7161,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(stringArray));
        stringArray[0] = "a";
        stringArray[0] = "b";
        stringArray[2] = "c";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7164,null,7163,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(stringArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_Array_literalMutation2304() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Array_literalMutation2304");
        final Object[] objectArray = new Object[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7160,null,7159,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(objectArray));
        final String[] stringArray = new String[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7162,null,7161,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(stringArray));
        stringArray[0] = "a";
        stringArray[1] = "foo";
        stringArray[2] = "c";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7164,null,7163,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(stringArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_Array_literalMutation2305() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Array_literalMutation2305");
        final Object[] objectArray = new Object[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7160,null,7159,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(objectArray));
        final String[] stringArray = new String[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7162,null,7161,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(stringArray));
        stringArray[0] = "a";
        stringArray[1] = "b";
        stringArray[3] = "c";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7164,null,7163,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(stringArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_Array_literalMutation2306() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Array_literalMutation2306");
        final Object[] objectArray = new Object[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7160,null,7159,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(objectArray));
        final String[] stringArray = new String[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7162,null,7161,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(stringArray));
        stringArray[0] = "a";
        stringArray[1] = "b";
        stringArray[2] = "foo";
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7164,null,7163,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(stringArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_PrimitiveArray() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_PrimitiveArray");
        final int[] intArray = new int[1];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7188,null,7187,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(intArray));
        final double[] doubleArray = new double[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7190,null,7189,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(doubleArray));
        doubleArray[0] = 0.0;
        doubleArray[1] = 1.0;
        doubleArray[2] = 2.5;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7192,null,7191,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(doubleArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_PrimitiveArray_literalMutation2314() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_PrimitiveArray_literalMutation2314");
        final int[] intArray = new int[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7188,null,7187,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(intArray));
        final double[] doubleArray = new double[2];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7190,null,7189,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(doubleArray));
        doubleArray[0] = 0.0;
        doubleArray[1] = 1.0;
        doubleArray[2] = 2.5;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7192,null,7191,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(doubleArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_PrimitiveArray_literalMutation2315() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_PrimitiveArray_literalMutation2315");
        final int[] intArray = new int[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7188,null,7187,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(intArray));
        final double[] doubleArray = new double[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7190,null,7189,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(doubleArray));
        doubleArray[1] = 0.0;
        doubleArray[1] = 1.0;
        doubleArray[2] = 2.5;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7192,null,7191,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(doubleArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_PrimitiveArray_literalMutation2316() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_PrimitiveArray_literalMutation2316");
        final int[] intArray = new int[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7188,null,7187,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(intArray));
        final double[] doubleArray = new double[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7190,null,7189,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(doubleArray));
        doubleArray[0] = -1.0;
        doubleArray[1] = 1.0;
        doubleArray[2] = 2.5;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7192,null,7191,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(doubleArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_PrimitiveArray_literalMutation2317() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_PrimitiveArray_literalMutation2317");
        final int[] intArray = new int[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7188,null,7187,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(intArray));
        final double[] doubleArray = new double[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7190,null,7189,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(doubleArray));
        doubleArray[0] = 0.0;
        doubleArray[2] = 1.0;
        doubleArray[2] = 2.5;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7192,null,7191,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(doubleArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_PrimitiveArray_literalMutation2318() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_PrimitiveArray_literalMutation2318");
        final int[] intArray = new int[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7188,null,7187,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(intArray));
        final double[] doubleArray = new double[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7190,null,7189,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(doubleArray));
        doubleArray[0] = 0.0;
        doubleArray[1] = 0.0;
        doubleArray[2] = 2.5;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7192,null,7191,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(doubleArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_PrimitiveArray_literalMutation2319() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_PrimitiveArray_literalMutation2319");
        final int[] intArray = new int[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7188,null,7187,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(intArray));
        final double[] doubleArray = new double[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7190,null,7189,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(doubleArray));
        doubleArray[0] = 0.0;
        doubleArray[1] = 1.0;
        doubleArray[3] = 2.5;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7192,null,7191,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(doubleArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_PrimitiveArray_literalMutation2320() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_PrimitiveArray_literalMutation2320");
        final int[] intArray = new int[0];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7188,null,7187,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(intArray));
        final double[] doubleArray = new double[3];
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7190,null,7189,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(doubleArray));
        doubleArray[0] = 0.0;
        doubleArray[1] = 1.0;
        doubleArray[2] = 3.5;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7192,null,7191,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(doubleArray));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSizeIsEmpty_Enumeration_add2345() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Enumeration_add2345");
        final Vector<java.lang.String> list = new Vector<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7166,null,7165,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.elements()));
        list.add("a");
        list.add("a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7168,null,7167,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.elements()));
        final Enumeration<java.lang.String> en = list.elements();
        en.nextElement();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7170,null,7169,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(en));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSizeIsEmpty_Enumeration_add2346() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Enumeration_add2346");
        final Vector<java.lang.String> list = new Vector<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7166,null,7165,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.elements()));
        list.add("a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7168,null,7167,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.elements()));
        final Enumeration<java.lang.String> en = list.elements();
        en.nextElement();
        en.nextElement();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7170,null,7169,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(en));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_Enumeration() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Enumeration");
        final Vector<java.lang.String> list = new Vector<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7166,null,7165,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.elements()));
        list.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7168,null,7167,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.elements()));
        final Enumeration<java.lang.String> en = list.elements();
        en.nextElement();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7170,null,7169,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(en));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSizeIsEmpty_Enumeration_remove1853() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Enumeration_remove1853");
        final Vector<java.lang.String> list = new Vector<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7166,null,7165,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.elements()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7168,null,7167,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.elements()));
        final Enumeration<java.lang.String> en = list.elements();
        en.nextElement();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7170,null,7169,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(en));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSizeIsEmpty_Enumeration_remove1854() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Enumeration_remove1854");
        final Vector<java.lang.String> list = new Vector<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7166,null,7165,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.elements()));
        list.add("a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7168,null,7167,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.elements()));
        final Enumeration<java.lang.String> en = list.elements();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7170,null,7169,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(en));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSizeIsEmpty_Iterator_add2347() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Iterator_add2347");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7172,null,7171,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.iterator()));
        list.add("a");
        list.add("a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7174,null,7173,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.iterator()));
        final Iterator<java.lang.String> it = list.iterator();
        it.next();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7176,null,7175,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(it));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSizeIsEmpty_Iterator_add2348() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Iterator_add2348");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7172,null,7171,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.iterator()));
        list.add("a");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7174,null,7173,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.iterator()));
        final Iterator<java.lang.String> it = list.iterator();
        it.next();
        it.next();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7176,null,7175,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(it));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_Iterator() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Iterator");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7172,null,7171,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.iterator()));
        list.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7174,null,7173,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.iterator()));
        final Iterator<java.lang.String> it = list.iterator();
        it.next();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7176,null,7175,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(it));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSizeIsEmpty_Iterator_remove1855() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Iterator_remove1855");
        final List<java.lang.String> list = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7172,null,7171,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.iterator()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7174,null,7173,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(list.iterator()));
        final Iterator<java.lang.String> it = list.iterator();
        it.next();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7176,null,7175,org.apache.commons.collections4.CollectionUtils.sizeIsEmpty(it));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSizeIsEmpty_Other_add2351() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Other_add2351");
        try {
            org.apache.commons.collections4.CollectionUtils.sizeIsEmpty("not a list");
            org.apache.commons.collections4.CollectionUtils.sizeIsEmpty("not a list");
        } catch (final IllegalArgumentException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testSizeIsEmpty_Other() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeIsEmpty_Other");
        try {
            org.apache.commons.collections4.CollectionUtils.sizeIsEmpty("foo");
        } catch (final IllegalArgumentException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEmptyWithEmptyCollection() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEmptyWithEmptyCollection");
        final Collection<java.lang.Object> coll = new ArrayList<java.lang.Object>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6989,null,6988,org.apache.commons.collections4.CollectionUtils.isEmpty(coll));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEmptyWithNonEmptyCollection_add2300() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEmptyWithNonEmptyCollection_add2300");
        final Collection<java.lang.String> coll = new ArrayList<java.lang.String>();
        coll.add("item");
        coll.add("item");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6991,null,6990,org.apache.commons.collections4.CollectionUtils.isEmpty(coll));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEmptyWithNonEmptyCollection() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEmptyWithNonEmptyCollection");
        final Collection<java.lang.String> coll = new ArrayList<java.lang.String>();
        coll.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6991,null,6990,org.apache.commons.collections4.CollectionUtils.isEmpty(coll));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsEmptyWithNonEmptyCollection_remove1810() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEmptyWithNonEmptyCollection_remove1810");
        final Collection<java.lang.String> coll = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6991,null,6990,org.apache.commons.collections4.CollectionUtils.isEmpty(coll));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsEmptyWithNull() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsEmptyWithNull");
        final Collection<?> coll = null;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6993,null,6992,org.apache.commons.collections4.CollectionUtils.isEmpty(coll));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsNotEmptyWithEmptyCollection() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsNotEmptyWithEmptyCollection");
        final Collection<java.lang.Object> coll = new ArrayList<java.lang.Object>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7035,null,7034,org.apache.commons.collections4.CollectionUtils.isNotEmpty(coll));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsNotEmptyWithNonEmptyCollection_add2311() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsNotEmptyWithNonEmptyCollection_add2311");
        final Collection<java.lang.String> coll = new ArrayList<java.lang.String>();
        coll.add("item");
        coll.add("item");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7037,null,7036,org.apache.commons.collections4.CollectionUtils.isNotEmpty(coll));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsNotEmptyWithNonEmptyCollection() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsNotEmptyWithNonEmptyCollection");
        final Collection<java.lang.String> coll = new ArrayList<java.lang.String>();
        coll.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7037,null,7036,org.apache.commons.collections4.CollectionUtils.isNotEmpty(coll));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIsNotEmptyWithNonEmptyCollection_remove1821() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsNotEmptyWithNonEmptyCollection_remove1821");
        final Collection<java.lang.String> coll = new ArrayList<java.lang.String>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7037,null,7036,org.apache.commons.collections4.CollectionUtils.isNotEmpty(coll));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testIsNotEmptyWithNull() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsNotEmptyWithNull");
        final Collection<?> coll = null;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7039,null,7038,org.apache.commons.collections4.CollectionUtils.isNotEmpty(coll));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    private static Predicate<java.lang.Number> EQUALS_TWO = new Predicate<java.lang.Number>() {
        public boolean evaluate(final Number input) {
            return (input.intValue()) == 2;
        }
    };

    @Test(timeout = 1000)
    public void filter_add2209() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filter_add2209");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(1);
        ints.add(1);
        ints.add(2);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6806,null,6805,org.apache.commons.collections4.CollectionUtils.filter(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6808,ints,6807,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6810,ints,6809,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void filter_add2210() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filter_add2210");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(1);
        ints.add(2);
        ints.add(2);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6806,null,6805,org.apache.commons.collections4.CollectionUtils.filter(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6808,ints,6807,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6810,ints,6809,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void filter_add2211() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filter_add2211");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(1);
        ints.add(2);
        ints.add(3);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6806,null,6805,org.apache.commons.collections4.CollectionUtils.filter(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6808,ints,6807,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6810,ints,6809,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void filter_add2212() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filter_add2212");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(1);
        ints.add(2);
        ints.add(3);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6806,null,6805,org.apache.commons.collections4.CollectionUtils.filter(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6808,ints,6807,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6810,ints,6809,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void filter() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filter");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(0);
        ints.add(2);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6806,null,6805,org.apache.commons.collections4.CollectionUtils.filter(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6808,ints,6807,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6810,ints,6809,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void filter_literalMutation2132() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filter_literalMutation2132");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(1);
        ints.add(1);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6806,null,6805,org.apache.commons.collections4.CollectionUtils.filter(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6808,ints,6807,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6810,ints,6809,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void filter_literalMutation2133() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filter_literalMutation2133");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(1);
        ints.add(2);
        ints.add(4);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6806,null,6805,org.apache.commons.collections4.CollectionUtils.filter(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6808,ints,6807,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6810,ints,6809,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void filter_literalMutation2134() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filter_literalMutation2134");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(1);
        ints.add(2);
        ints.add(3);
        ints.add(2);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6806,null,6805,org.apache.commons.collections4.CollectionUtils.filter(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6808,ints,6807,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6810,ints,6809,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void filter_remove1727() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filter_remove1727");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(2);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6806,null,6805,org.apache.commons.collections4.CollectionUtils.filter(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6808,ints,6807,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6810,ints,6809,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void filter_remove1728() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filter_remove1728");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(2);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6806,null,6805,org.apache.commons.collections4.CollectionUtils.filter(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6808,ints,6807,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6810,ints,6809,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void filter_remove1729() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filter_remove1729");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(2);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6806,null,6805,org.apache.commons.collections4.CollectionUtils.filter(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6808,ints,6807,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6810,ints,6809,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void filter_remove1730() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filter_remove1730");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(2);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6806,null,6805,org.apache.commons.collections4.CollectionUtils.filter(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6808,ints,6807,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6810,ints,6809,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void filterNullParameters() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filterNullParameters");
        final List<java.lang.Long> longs = java.util.Collections.nCopies(3, 10L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6794,null,6793,org.apache.commons.collections4.CollectionUtils.filter(longs, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6796,longs,6795,longs.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6798,null,6797,org.apache.commons.collections4.CollectionUtils.filter(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6800,longs,6799,longs.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6802,null,6801,org.apache.commons.collections4.CollectionUtils.filter(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6804,longs,6803,longs.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void filterNullParameters_literalMutation2142() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filterNullParameters_literalMutation2142");
        final List<java.lang.Long> longs = java.util.Collections.nCopies(4, 9L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6794,null,6793,org.apache.commons.collections4.CollectionUtils.filter(longs, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6796,longs,6795,longs.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6798,null,6797,org.apache.commons.collections4.CollectionUtils.filter(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6800,longs,6799,longs.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6802,null,6801,org.apache.commons.collections4.CollectionUtils.filter(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6804,longs,6803,longs.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void filterInverse_add2213() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filterInverse_add2213");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(1);
        ints.add(1);
        ints.add(2);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6784,null,6783,org.apache.commons.collections4.CollectionUtils.filterInverse(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6786,ints,6785,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6788,ints,6787,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6790,ints,6789,((int)(ints.get(1))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6792,ints,6791,((int)(ints.get(2))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void filterInverse_add2214() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filterInverse_add2214");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(1);
        ints.add(2);
        ints.add(2);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6784,null,6783,org.apache.commons.collections4.CollectionUtils.filterInverse(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6786,ints,6785,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6788,ints,6787,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6790,ints,6789,((int)(ints.get(1))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6792,ints,6791,((int)(ints.get(2))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void filterInverse_add2215() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filterInverse_add2215");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(1);
        ints.add(2);
        ints.add(3);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6784,null,6783,org.apache.commons.collections4.CollectionUtils.filterInverse(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6786,ints,6785,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6788,ints,6787,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6790,ints,6789,((int)(ints.get(1))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6792,ints,6791,((int)(ints.get(2))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void filterInverse_add2216() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filterInverse_add2216");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(1);
        ints.add(2);
        ints.add(3);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6784,null,6783,org.apache.commons.collections4.CollectionUtils.filterInverse(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6786,ints,6785,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6788,ints,6787,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6790,ints,6789,((int)(ints.get(1))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6792,ints,6791,((int)(ints.get(2))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void filterInverse() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filterInverse");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(0);
        ints.add(2);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6784,null,6783,org.apache.commons.collections4.CollectionUtils.filterInverse(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6786,ints,6785,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6788,ints,6787,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6790,ints,6789,((int)(ints.get(1))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6792,ints,6791,((int)(ints.get(2))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void filterInverse_literalMutation2136() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filterInverse_literalMutation2136");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(1);
        ints.add(3);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6784,null,6783,org.apache.commons.collections4.CollectionUtils.filterInverse(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6786,ints,6785,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6788,ints,6787,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6790,ints,6789,((int)(ints.get(1))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6792,ints,6791,((int)(ints.get(2))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void filterInverse_literalMutation2137() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filterInverse_literalMutation2137");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(1);
        ints.add(2);
        ints.add(4);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6784,null,6783,org.apache.commons.collections4.CollectionUtils.filterInverse(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6786,ints,6785,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6788,ints,6787,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6790,ints,6789,((int)(ints.get(1))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6792,ints,6791,((int)(ints.get(2))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void filterInverse_literalMutation2138() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filterInverse_literalMutation2138");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(1);
        ints.add(2);
        ints.add(3);
        ints.add(2);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6784,null,6783,org.apache.commons.collections4.CollectionUtils.filterInverse(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6786,ints,6785,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6788,ints,6787,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6790,ints,6789,((int)(ints.get(1))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6792,ints,6791,((int)(ints.get(2))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void filterInverse_remove1731() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filterInverse_remove1731");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(2);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6784,null,6783,org.apache.commons.collections4.CollectionUtils.filterInverse(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6786,ints,6785,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6788,ints,6787,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6790,ints,6789,((int)(ints.get(1))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6792,ints,6791,((int)(ints.get(2))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void filterInverse_remove1732() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filterInverse_remove1732");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(2);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6784,null,6783,org.apache.commons.collections4.CollectionUtils.filterInverse(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6786,ints,6785,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6788,ints,6787,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6790,ints,6789,((int)(ints.get(1))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6792,ints,6791,((int)(ints.get(2))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void filterInverse_remove1733() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filterInverse_remove1733");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(2);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6784,null,6783,org.apache.commons.collections4.CollectionUtils.filterInverse(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6786,ints,6785,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6788,ints,6787,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6790,ints,6789,((int)(ints.get(1))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6792,ints,6791,((int)(ints.get(2))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void filterInverse_remove1734() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filterInverse_remove1734");
        final List<java.lang.Integer> ints = new ArrayList<java.lang.Integer>();
        ints.add(2);
        ints.add(3);
        ints.add(3);
        final Iterable<java.lang.Integer> iterable = ints;
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6784,null,6783,org.apache.commons.collections4.CollectionUtils.filterInverse(iterable, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6786,ints,6785,ints.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6788,ints,6787,((int)(ints.get(0))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6790,ints,6789,((int)(ints.get(1))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6792,ints,6791,((int)(ints.get(2))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void filterInverseNullParameters() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filterInverseNullParameters");
        final List<java.lang.Long> longs = java.util.Collections.nCopies(5, 10L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6772,null,6771,org.apache.commons.collections4.CollectionUtils.filterInverse(longs, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6774,longs,6773,longs.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6776,null,6775,org.apache.commons.collections4.CollectionUtils.filterInverse(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6778,longs,6777,longs.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6780,null,6779,org.apache.commons.collections4.CollectionUtils.filterInverse(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6782,longs,6781,longs.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void filterInverseNullParameters_literalMutation2140() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "filterInverseNullParameters_literalMutation2140");
        final List<java.lang.Long> longs = java.util.Collections.nCopies(4, 11L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6772,null,6771,org.apache.commons.collections4.CollectionUtils.filterInverse(longs, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6774,longs,6773,longs.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6776,null,6775,org.apache.commons.collections4.CollectionUtils.filterInverse(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6778,longs,6777,longs.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6780,null,6779,org.apache.commons.collections4.CollectionUtils.filterInverse(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6782,longs,6781,longs.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void countMatches() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "countMatches");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6707,null,6706,org.apache.commons.collections4.CollectionUtils.countMatches(iterableB, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6709,null,6708,org.apache.commons.collections4.CollectionUtils.countMatches(iterableA, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6711,null,6710,org.apache.commons.collections4.CollectionUtils.countMatches(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6713,null,6712,org.apache.commons.collections4.CollectionUtils.countMatches(null, null));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void exists_add2200() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "exists_add2200");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6758,null,6757,org.apache.commons.collections4.CollectionUtils.exists(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6760,null,6759,org.apache.commons.collections4.CollectionUtils.exists(list, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6762,null,6761,org.apache.commons.collections4.CollectionUtils.exists(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6764,null,6763,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(1);
        list.add(1);
        list.add(3);
        list.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6766,null,6765,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6768,null,6767,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void exists_add2201() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "exists_add2201");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6758,null,6757,org.apache.commons.collections4.CollectionUtils.exists(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6760,null,6759,org.apache.commons.collections4.CollectionUtils.exists(list, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6762,null,6761,org.apache.commons.collections4.CollectionUtils.exists(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6764,null,6763,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(1);
        list.add(3);
        list.add(3);
        list.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6766,null,6765,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6768,null,6767,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void exists_add2202() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "exists_add2202");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6758,null,6757,org.apache.commons.collections4.CollectionUtils.exists(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6760,null,6759,org.apache.commons.collections4.CollectionUtils.exists(list, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6762,null,6761,org.apache.commons.collections4.CollectionUtils.exists(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6764,null,6763,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(1);
        list.add(3);
        list.add(4);
        list.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6766,null,6765,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6768,null,6767,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void exists_add2203() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "exists_add2203");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6758,null,6757,org.apache.commons.collections4.CollectionUtils.exists(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6760,null,6759,org.apache.commons.collections4.CollectionUtils.exists(list, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6762,null,6761,org.apache.commons.collections4.CollectionUtils.exists(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6764,null,6763,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(1);
        list.add(3);
        list.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6766,null,6765,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(2);
        list.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6768,null,6767,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void exists() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "exists");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6758,null,6757,org.apache.commons.collections4.CollectionUtils.exists(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6760,null,6759,org.apache.commons.collections4.CollectionUtils.exists(list, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6762,null,6761,org.apache.commons.collections4.CollectionUtils.exists(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6764,null,6763,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(2);
        list.add(3);
        list.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6766,null,6765,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6768,null,6767,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void exists_literalMutation2125() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "exists_literalMutation2125");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6758,null,6757,org.apache.commons.collections4.CollectionUtils.exists(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6760,null,6759,org.apache.commons.collections4.CollectionUtils.exists(list, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6762,null,6761,org.apache.commons.collections4.CollectionUtils.exists(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6764,null,6763,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(1);
        list.add(4);
        list.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6766,null,6765,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6768,null,6767,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void exists_literalMutation2126() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "exists_literalMutation2126");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6758,null,6757,org.apache.commons.collections4.CollectionUtils.exists(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6760,null,6759,org.apache.commons.collections4.CollectionUtils.exists(list, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6762,null,6761,org.apache.commons.collections4.CollectionUtils.exists(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6764,null,6763,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(1);
        list.add(3);
        list.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6766,null,6765,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6768,null,6767,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void exists_literalMutation2127() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "exists_literalMutation2127");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6758,null,6757,org.apache.commons.collections4.CollectionUtils.exists(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6760,null,6759,org.apache.commons.collections4.CollectionUtils.exists(list, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6762,null,6761,org.apache.commons.collections4.CollectionUtils.exists(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6764,null,6763,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(1);
        list.add(3);
        list.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6766,null,6765,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(3);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6768,null,6767,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void exists_remove1721() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "exists_remove1721");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6758,null,6757,org.apache.commons.collections4.CollectionUtils.exists(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6760,null,6759,org.apache.commons.collections4.CollectionUtils.exists(list, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6762,null,6761,org.apache.commons.collections4.CollectionUtils.exists(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6764,null,6763,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(3);
        list.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6766,null,6765,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6768,null,6767,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void exists_remove1722() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "exists_remove1722");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6758,null,6757,org.apache.commons.collections4.CollectionUtils.exists(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6760,null,6759,org.apache.commons.collections4.CollectionUtils.exists(list, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6762,null,6761,org.apache.commons.collections4.CollectionUtils.exists(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6764,null,6763,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(3);
        list.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6766,null,6765,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6768,null,6767,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void exists_remove1723() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "exists_remove1723");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6758,null,6757,org.apache.commons.collections4.CollectionUtils.exists(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6760,null,6759,org.apache.commons.collections4.CollectionUtils.exists(list, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6762,null,6761,org.apache.commons.collections4.CollectionUtils.exists(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6764,null,6763,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(3);
        list.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6766,null,6765,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6768,null,6767,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void exists_remove1724() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "exists_remove1724");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6758,null,6757,org.apache.commons.collections4.CollectionUtils.exists(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6760,null,6759,org.apache.commons.collections4.CollectionUtils.exists(list, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6762,null,6761,org.apache.commons.collections4.CollectionUtils.exists(null, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6764,null,6763,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(3);
        list.add(4);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6766,null,6765,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        list.add(2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6768,null,6767,org.apache.commons.collections4.CollectionUtils.exists(list, org.apache.commons.collections4.CollectionUtilsTest.EQUALS_TWO));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void select_add2283() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "select_add2283");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        list.add(1);
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        final Collection<java.lang.Integer> output1 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.<Number>select(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6959,null,6958,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6961,list,6960,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6963,output1,6962,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6965,output2.iterator(),6964,output2.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void select_add2284() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "select_add2284");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        list.add(1);
        list.add(2);
        list.add(2);
        list.add(3);
        list.add(4);
        final Collection<java.lang.Integer> output1 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.<Number>select(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6959,null,6958,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6961,list,6960,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6963,output1,6962,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6965,output2.iterator(),6964,output2.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void select_add2285() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "select_add2285");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(3);
        list.add(4);
        final Collection<java.lang.Integer> output1 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.<Number>select(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6959,null,6958,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6961,list,6960,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6963,output1,6962,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6965,output2.iterator(),6964,output2.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void select_add2286() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "select_add2286");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(4);
        final Collection<java.lang.Integer> output1 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.<Number>select(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6959,null,6958,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6961,list,6960,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6963,output1,6962,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6965,output2.iterator(),6964,output2.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void select() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "select");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        list.add(0);
        list.add(2);
        list.add(3);
        list.add(4);
        final Collection<java.lang.Integer> output1 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.<Number>select(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6959,null,6958,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6961,list,6960,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6963,output1,6962,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6965,output2.iterator(),6964,output2.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void select_literalMutation2228() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "select_literalMutation2228");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        list.add(1);
        list.add(1);
        list.add(3);
        list.add(4);
        final Collection<java.lang.Integer> output1 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.<Number>select(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6959,null,6958,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6961,list,6960,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6963,output1,6962,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6965,output2.iterator(),6964,output2.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void select_literalMutation2229() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "select_literalMutation2229");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        list.add(1);
        list.add(2);
        list.add(2);
        list.add(4);
        final Collection<java.lang.Integer> output1 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.<Number>select(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6959,null,6958,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6961,list,6960,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6963,output1,6962,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6965,output2.iterator(),6964,output2.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void select_literalMutation2230() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "select_literalMutation2230");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(3);
        final Collection<java.lang.Integer> output1 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.<Number>select(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6959,null,6958,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6961,list,6960,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6963,output1,6962,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6965,output2.iterator(),6964,output2.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void select_remove1793() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "select_remove1793");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        list.add(2);
        list.add(3);
        list.add(4);
        final Collection<java.lang.Integer> output1 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.<Number>select(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6959,null,6958,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6961,list,6960,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6963,output1,6962,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6965,output2.iterator(),6964,output2.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void select_remove1794() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "select_remove1794");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        list.add(2);
        list.add(3);
        list.add(4);
        final Collection<java.lang.Integer> output1 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.<Number>select(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6959,null,6958,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6961,list,6960,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6963,output1,6962,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6965,output2.iterator(),6964,output2.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void select_remove1795() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "select_remove1795");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        list.add(2);
        list.add(3);
        list.add(4);
        final Collection<java.lang.Integer> output1 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.<Number>select(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6959,null,6958,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6961,list,6960,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6963,output1,6962,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6965,output2.iterator(),6964,output2.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void select_remove1796() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "select_remove1796");
        final List<java.lang.Integer> list = new ArrayList<java.lang.Integer>();
        list.add(2);
        list.add(3);
        list.add(4);
        final Collection<java.lang.Integer> output1 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.<Number>select(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.select(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6959,null,6958,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6961,list,6960,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6963,output1,6962,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6965,output2.iterator(),6964,output2.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void selectRejected_add2287() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "selectRejected_add2287");
        final List<java.lang.Long> list = new ArrayList<java.lang.Long>();
        list.add(1L);
        list.add(1L);
        list.add(2L);
        list.add(3L);
        list.add(4L);
        final Collection<java.lang.Long> output1 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<? extends java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6945,null,6944,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6947,null,6946,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6949,list,6948,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6951,output1,6950,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6953,output1,6952,output1.contains(1L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6955,output1,6954,output1.contains(3L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6957,output1,6956,output1.contains(4L));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void selectRejected_add2288() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "selectRejected_add2288");
        final List<java.lang.Long> list = new ArrayList<java.lang.Long>();
        list.add(1L);
        list.add(2L);
        list.add(2L);
        list.add(3L);
        list.add(4L);
        final Collection<java.lang.Long> output1 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<? extends java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6945,null,6944,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6947,null,6946,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6949,list,6948,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6951,output1,6950,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6953,output1,6952,output1.contains(1L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6955,output1,6954,output1.contains(3L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6957,output1,6956,output1.contains(4L));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void selectRejected_add2289() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "selectRejected_add2289");
        final List<java.lang.Long> list = new ArrayList<java.lang.Long>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        list.add(3L);
        list.add(4L);
        final Collection<java.lang.Long> output1 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<? extends java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6945,null,6944,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6947,null,6946,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6949,list,6948,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6951,output1,6950,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6953,output1,6952,output1.contains(1L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6955,output1,6954,output1.contains(3L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6957,output1,6956,output1.contains(4L));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void selectRejected_add2290() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "selectRejected_add2290");
        final List<java.lang.Long> list = new ArrayList<java.lang.Long>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        list.add(4L);
        list.add(4L);
        final Collection<java.lang.Long> output1 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<? extends java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6945,null,6944,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6947,null,6946,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6949,list,6948,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6951,output1,6950,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6953,output1,6952,output1.contains(1L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6955,output1,6954,output1.contains(3L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6957,output1,6956,output1.contains(4L));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void selectRejected() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "selectRejected");
        final List<java.lang.Long> list = new ArrayList<java.lang.Long>();
        list.add(0L);
        list.add(2L);
        list.add(3L);
        list.add(4L);
        final Collection<java.lang.Long> output1 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<? extends java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6945,null,6944,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6947,null,6946,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6949,list,6948,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6951,output1,6950,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6953,output1,6952,output1.contains(1L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6955,output1,6954,output1.contains(3L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6957,output1,6956,output1.contains(4L));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void selectRejected_literalMutation2232() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "selectRejected_literalMutation2232");
        final List<java.lang.Long> list = new ArrayList<java.lang.Long>();
        list.add(1L);
        list.add(1L);
        list.add(3L);
        list.add(4L);
        final Collection<java.lang.Long> output1 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<? extends java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6945,null,6944,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6947,null,6946,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6949,list,6948,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6951,output1,6950,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6953,output1,6952,output1.contains(1L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6955,output1,6954,output1.contains(3L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6957,output1,6956,output1.contains(4L));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void selectRejected_literalMutation2233() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "selectRejected_literalMutation2233");
        final List<java.lang.Long> list = new ArrayList<java.lang.Long>();
        list.add(1L);
        list.add(2L);
        list.add(2L);
        list.add(4L);
        final Collection<java.lang.Long> output1 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<? extends java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6945,null,6944,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6947,null,6946,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6949,list,6948,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6951,output1,6950,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6953,output1,6952,output1.contains(1L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6955,output1,6954,output1.contains(3L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6957,output1,6956,output1.contains(4L));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void selectRejected_literalMutation2234() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "selectRejected_literalMutation2234");
        final List<java.lang.Long> list = new ArrayList<java.lang.Long>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        list.add(5L);
        final Collection<java.lang.Long> output1 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<? extends java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6945,null,6944,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6947,null,6946,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6949,list,6948,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6951,output1,6950,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6953,output1,6952,output1.contains(1L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6955,output1,6954,output1.contains(3L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6957,output1,6956,output1.contains(4L));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void selectRejected_remove1797() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "selectRejected_remove1797");
        final List<java.lang.Long> list = new ArrayList<java.lang.Long>();
        list.add(2L);
        list.add(3L);
        list.add(4L);
        final Collection<java.lang.Long> output1 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<? extends java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6945,null,6944,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6947,null,6946,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6949,list,6948,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6951,output1,6950,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6953,output1,6952,output1.contains(1L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6955,output1,6954,output1.contains(3L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6957,output1,6956,output1.contains(4L));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void selectRejected_remove1798() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "selectRejected_remove1798");
        final List<java.lang.Long> list = new ArrayList<java.lang.Long>();
        list.add(2L);
        list.add(3L);
        list.add(4L);
        final Collection<java.lang.Long> output1 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<? extends java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6945,null,6944,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6947,null,6946,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6949,list,6948,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6951,output1,6950,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6953,output1,6952,output1.contains(1L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6955,output1,6954,output1.contains(3L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6957,output1,6956,output1.contains(4L));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void selectRejected_remove1799() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "selectRejected_remove1799");
        final List<java.lang.Long> list = new ArrayList<java.lang.Long>();
        list.add(2L);
        list.add(3L);
        list.add(4L);
        final Collection<java.lang.Long> output1 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<? extends java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6945,null,6944,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6947,null,6946,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6949,list,6948,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6951,output1,6950,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6953,output1,6952,output1.contains(1L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6955,output1,6954,output1.contains(3L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6957,output1,6956,output1.contains(4L));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void selectRejected_remove1800() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "selectRejected_remove1800");
        final List<java.lang.Long> list = new ArrayList<java.lang.Long>();
        list.add(2L);
        list.add(3L);
        list.add(4L);
        final Collection<java.lang.Long> output1 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final Collection<? extends java.lang.Number> output2 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO);
        final HashSet<java.lang.Number> output3 = org.apache.commons.collections4.CollectionUtils.selectRejected(list, CollectionUtilsTest.EQUALS_TWO, new HashSet<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6945,null,6944,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output2));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6947,null,6946,org.apache.commons.collections4.CollectionUtils.isEqualCollection(output1, output3));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6949,list,6948,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6951,output1,6950,output1.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6953,output1,6952,output1.contains(1L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6955,output1,6954,output1.contains(3L));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6957,output1,6956,output1.contains(4L));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void collect_add2183() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "collect_add2183");
        final Transformer<java.lang.Number, java.lang.Long> transformer = org.apache.commons.collections4.TransformerUtils.constantTransformer(2L);
        Collection<java.lang.Number> collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterableA, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6656,((collection.size()) == (collectionA.size())));
        assertCollectResult(collection);
        assertCollectResult(collection);
        ArrayList<java.lang.Number> list;
        list = org.apache.commons.collections4.CollectionUtils.collect(collectionA, transformer, new ArrayList<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6657,((list.size()) == (collectionA.size())));
        assertCollectResult(list);
        Iterator<java.lang.Integer> iterator = null;
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, new ArrayList<java.lang.Number>());
        iterator = iterableA.iterator();
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, list);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6658,((collection.size()) == (collectionA.size())));
        assertCollectResult(collection);
        iterator = collectionA.iterator();
        collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterator, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6659,((collection.size()) == (collectionA.size())));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6660,((collection.contains(2L)) && (!(collection.contains(1)))));
        collection = org.apache.commons.collections4.CollectionUtils.collect(((Iterator<java.lang.Integer>)(null)), ((Transformer<java.lang.Integer, java.lang.Number>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6661,((collection.size()) == 0));
        final int size = collectionA.size();
        collectionB = org.apache.commons.collections4.CollectionUtils.collect(((Collection<java.lang.Integer>)(null)), transformer, collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6662,(((collectionA.size()) == size) && (collectionA.contains(1))));
        org.apache.commons.collections4.CollectionUtils.collect(collectionB, null, collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6663,(((collectionA.size()) == size) && (collectionA.contains(1))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void collect_add2184() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "collect_add2184");
        final Transformer<java.lang.Number, java.lang.Long> transformer = org.apache.commons.collections4.TransformerUtils.constantTransformer(2L);
        Collection<java.lang.Number> collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterableA, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6656,((collection.size()) == (collectionA.size())));
        assertCollectResult(collection);
        ArrayList<java.lang.Number> list;
        list = org.apache.commons.collections4.CollectionUtils.collect(collectionA, transformer, new ArrayList<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6657,((list.size()) == (collectionA.size())));
        assertCollectResult(list);
        assertCollectResult(list);
        Iterator<java.lang.Integer> iterator = null;
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, new ArrayList<java.lang.Number>());
        iterator = iterableA.iterator();
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, list);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6658,((collection.size()) == (collectionA.size())));
        assertCollectResult(collection);
        iterator = collectionA.iterator();
        collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterator, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6659,((collection.size()) == (collectionA.size())));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6660,((collection.contains(2L)) && (!(collection.contains(1)))));
        collection = org.apache.commons.collections4.CollectionUtils.collect(((Iterator<java.lang.Integer>)(null)), ((Transformer<java.lang.Integer, java.lang.Number>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6661,((collection.size()) == 0));
        final int size = collectionA.size();
        collectionB = org.apache.commons.collections4.CollectionUtils.collect(((Collection<java.lang.Integer>)(null)), transformer, collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6662,(((collectionA.size()) == size) && (collectionA.contains(1))));
        org.apache.commons.collections4.CollectionUtils.collect(collectionB, null, collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6663,(((collectionA.size()) == size) && (collectionA.contains(1))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void collect_add2185() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "collect_add2185");
        final Transformer<java.lang.Number, java.lang.Long> transformer = org.apache.commons.collections4.TransformerUtils.constantTransformer(2L);
        Collection<java.lang.Number> collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterableA, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6656,((collection.size()) == (collectionA.size())));
        assertCollectResult(collection);
        ArrayList<java.lang.Number> list;
        list = org.apache.commons.collections4.CollectionUtils.collect(collectionA, transformer, new ArrayList<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6657,((list.size()) == (collectionA.size())));
        assertCollectResult(list);
        Iterator<java.lang.Integer> iterator = null;
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, new ArrayList<java.lang.Number>());
        iterator = iterableA.iterator();
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, list);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6658,((collection.size()) == (collectionA.size())));
        assertCollectResult(collection);
        assertCollectResult(collection);
        iterator = collectionA.iterator();
        collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterator, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6659,((collection.size()) == (collectionA.size())));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6660,((collection.contains(2L)) && (!(collection.contains(1)))));
        collection = org.apache.commons.collections4.CollectionUtils.collect(((Iterator<java.lang.Integer>)(null)), ((Transformer<java.lang.Integer, java.lang.Number>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6661,((collection.size()) == 0));
        final int size = collectionA.size();
        collectionB = org.apache.commons.collections4.CollectionUtils.collect(((Collection<java.lang.Integer>)(null)), transformer, collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6662,(((collectionA.size()) == size) && (collectionA.contains(1))));
        org.apache.commons.collections4.CollectionUtils.collect(collectionB, null, collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6663,(((collectionA.size()) == size) && (collectionA.contains(1))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void collect_add2186() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "collect_add2186");
        final Transformer<java.lang.Number, java.lang.Long> transformer = org.apache.commons.collections4.TransformerUtils.constantTransformer(2L);
        Collection<java.lang.Number> collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterableA, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6656,((collection.size()) == (collectionA.size())));
        assertCollectResult(collection);
        ArrayList<java.lang.Number> list;
        list = org.apache.commons.collections4.CollectionUtils.collect(collectionA, transformer, new ArrayList<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6657,((list.size()) == (collectionA.size())));
        assertCollectResult(list);
        Iterator<java.lang.Integer> iterator = null;
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, new ArrayList<java.lang.Number>());
        iterator = iterableA.iterator();
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, list);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6658,((collection.size()) == (collectionA.size())));
        assertCollectResult(collection);
        iterator = collectionA.iterator();
        collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterator, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6659,((collection.size()) == (collectionA.size())));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6660,((collection.contains(2L)) && (!(collection.contains(1)))));
        collection = org.apache.commons.collections4.CollectionUtils.collect(((Iterator<java.lang.Integer>)(null)), ((Transformer<java.lang.Integer, java.lang.Number>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6661,((collection.size()) == 0));
        final int size = collectionA.size();
        collectionB = org.apache.commons.collections4.CollectionUtils.collect(((Collection<java.lang.Integer>)(null)), transformer, collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6662,(((collectionA.size()) == size) && (collectionA.contains(1))));
        org.apache.commons.collections4.CollectionUtils.collect(collectionB, null, collectionA);
        org.apache.commons.collections4.CollectionUtils.collect(collectionB, null, collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6663,(((collectionA.size()) == size) && (collectionA.contains(1))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void collect() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "collect");
        final Transformer<java.lang.Number, java.lang.Long> transformer = org.apache.commons.collections4.TransformerUtils.constantTransformer(3L);
        Collection<java.lang.Number> collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterableA, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6656,((collection.size()) == (collectionA.size())));
        assertCollectResult(collection);
        ArrayList<java.lang.Number> list;
        list = org.apache.commons.collections4.CollectionUtils.collect(collectionA, transformer, new ArrayList<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6657,((list.size()) == (collectionA.size())));
        assertCollectResult(list);
        Iterator<java.lang.Integer> iterator = null;
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, new ArrayList<java.lang.Number>());
        iterator = iterableA.iterator();
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, list);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6658,((collection.size()) == (collectionA.size())));
        assertCollectResult(collection);
        iterator = collectionA.iterator();
        collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterator, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6659,((collection.size()) == (collectionA.size())));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6660,((collection.contains(2L)) && (!(collection.contains(1)))));
        collection = org.apache.commons.collections4.CollectionUtils.collect(((Iterator<java.lang.Integer>)(null)), ((Transformer<java.lang.Integer, java.lang.Number>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6661,((collection.size()) == 0));
        final int size = collectionA.size();
        collectionB = org.apache.commons.collections4.CollectionUtils.collect(((Collection<java.lang.Integer>)(null)), transformer, collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6662,(((collectionA.size()) == size) && (collectionA.contains(1))));
        org.apache.commons.collections4.CollectionUtils.collect(collectionB, null, collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6663,(((collectionA.size()) == size) && (collectionA.contains(1))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void collect_remove1704() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "collect_remove1704");
        final Transformer<java.lang.Number, java.lang.Long> transformer = org.apache.commons.collections4.TransformerUtils.constantTransformer(2L);
        Collection<java.lang.Number> collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterableA, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6656,((collection.size()) == (collectionA.size())));
        ArrayList<java.lang.Number> list;
        list = org.apache.commons.collections4.CollectionUtils.collect(collectionA, transformer, new ArrayList<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6657,((list.size()) == (collectionA.size())));
        assertCollectResult(list);
        Iterator<java.lang.Integer> iterator = null;
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, new ArrayList<java.lang.Number>());
        iterator = iterableA.iterator();
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, list);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6658,((collection.size()) == (collectionA.size())));
        assertCollectResult(collection);
        iterator = collectionA.iterator();
        collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterator, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6659,((collection.size()) == (collectionA.size())));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6660,((collection.contains(2L)) && (!(collection.contains(1)))));
        collection = org.apache.commons.collections4.CollectionUtils.collect(((Iterator<java.lang.Integer>)(null)), ((Transformer<java.lang.Integer, java.lang.Number>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6661,((collection.size()) == 0));
        final int size = collectionA.size();
        collectionB = org.apache.commons.collections4.CollectionUtils.collect(((Collection<java.lang.Integer>)(null)), transformer, collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6662,(((collectionA.size()) == size) && (collectionA.contains(1))));
        org.apache.commons.collections4.CollectionUtils.collect(collectionB, null, collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6663,(((collectionA.size()) == size) && (collectionA.contains(1))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void collect_remove1705() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "collect_remove1705");
        final Transformer<java.lang.Number, java.lang.Long> transformer = org.apache.commons.collections4.TransformerUtils.constantTransformer(2L);
        Collection<java.lang.Number> collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterableA, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6656,((collection.size()) == (collectionA.size())));
        ArrayList<java.lang.Number> list;
        list = org.apache.commons.collections4.CollectionUtils.collect(collectionA, transformer, new ArrayList<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6657,((list.size()) == (collectionA.size())));
        assertCollectResult(list);
        Iterator<java.lang.Integer> iterator = null;
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, new ArrayList<java.lang.Number>());
        iterator = iterableA.iterator();
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, list);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6658,((collection.size()) == (collectionA.size())));
        assertCollectResult(collection);
        iterator = collectionA.iterator();
        collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterator, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6659,((collection.size()) == (collectionA.size())));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6660,((collection.contains(2L)) && (!(collection.contains(1)))));
        collection = org.apache.commons.collections4.CollectionUtils.collect(((Iterator<java.lang.Integer>)(null)), ((Transformer<java.lang.Integer, java.lang.Number>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6661,((collection.size()) == 0));
        final int size = collectionA.size();
        collectionB = org.apache.commons.collections4.CollectionUtils.collect(((Collection<java.lang.Integer>)(null)), transformer, collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6662,(((collectionA.size()) == size) && (collectionA.contains(1))));
        org.apache.commons.collections4.CollectionUtils.collect(collectionB, null, collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6663,(((collectionA.size()) == size) && (collectionA.contains(1))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void collect_remove1706() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "collect_remove1706");
        final Transformer<java.lang.Number, java.lang.Long> transformer = org.apache.commons.collections4.TransformerUtils.constantTransformer(2L);
        Collection<java.lang.Number> collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterableA, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6656,((collection.size()) == (collectionA.size())));
        ArrayList<java.lang.Number> list;
        list = org.apache.commons.collections4.CollectionUtils.collect(collectionA, transformer, new ArrayList<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6657,((list.size()) == (collectionA.size())));
        assertCollectResult(list);
        Iterator<java.lang.Integer> iterator = null;
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, new ArrayList<java.lang.Number>());
        iterator = iterableA.iterator();
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, list);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6658,((collection.size()) == (collectionA.size())));
        assertCollectResult(collection);
        iterator = collectionA.iterator();
        collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterator, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6659,((collection.size()) == (collectionA.size())));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6660,((collection.contains(2L)) && (!(collection.contains(1)))));
        collection = org.apache.commons.collections4.CollectionUtils.collect(((Iterator<java.lang.Integer>)(null)), ((Transformer<java.lang.Integer, java.lang.Number>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6661,((collection.size()) == 0));
        final int size = collectionA.size();
        collectionB = org.apache.commons.collections4.CollectionUtils.collect(((Collection<java.lang.Integer>)(null)), transformer, collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6662,(((collectionA.size()) == size) && (collectionA.contains(1))));
        org.apache.commons.collections4.CollectionUtils.collect(collectionB, null, collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6663,(((collectionA.size()) == size) && (collectionA.contains(1))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void collect_remove1707() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "collect_remove1707");
        final Transformer<java.lang.Number, java.lang.Long> transformer = org.apache.commons.collections4.TransformerUtils.constantTransformer(2L);
        Collection<java.lang.Number> collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterableA, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6656,((collection.size()) == (collectionA.size())));
        assertCollectResult(collection);
        ArrayList<java.lang.Number> list;
        list = org.apache.commons.collections4.CollectionUtils.collect(collectionA, transformer, new ArrayList<java.lang.Number>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6657,((list.size()) == (collectionA.size())));
        assertCollectResult(list);
        Iterator<java.lang.Integer> iterator = null;
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, new ArrayList<java.lang.Number>());
        iterator = iterableA.iterator();
        list = org.apache.commons.collections4.CollectionUtils.collect(iterator, transformer, list);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6658,((collection.size()) == (collectionA.size())));
        assertCollectResult(collection);
        iterator = collectionA.iterator();
        collection = org.apache.commons.collections4.CollectionUtils.<Integer,Number>collect(iterator, transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6659,((collection.size()) == (collectionA.size())));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6660,((collection.contains(2L)) && (!(collection.contains(1)))));
        collection = org.apache.commons.collections4.CollectionUtils.collect(((Iterator<java.lang.Integer>)(null)), ((Transformer<java.lang.Integer, java.lang.Number>)(null)));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6661,((collection.size()) == 0));
        final int size = collectionA.size();
        collectionB = org.apache.commons.collections4.CollectionUtils.collect(((Collection<java.lang.Integer>)(null)), transformer, collectionB);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6662,(((collectionA.size()) == size) && (collectionA.contains(1))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6663,(((collectionA.size()) == size) && (collectionA.contains(1))));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    private void assertCollectResult(final Collection<java.lang.Number> collection) {
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6572,((collectionA.contains(1)) && (!(collectionA.contains(2L)))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6573,((collection.contains(2L)) && (!(collection.contains(1)))));
    }

    Transformer<java.lang.Object, java.lang.Integer> TRANSFORM_TO_INTEGER = new Transformer<java.lang.Object, java.lang.Integer>() {
        public Integer transform(final Object input) {
            return Integer.valueOf(((Long)(input)).intValue());
        }
    };

    @Test(timeout = 1000)
    public void transform1_add2369() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_add2369");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_add2370() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_add2370");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_add2371() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_add2371");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_add2372() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_add2372");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_add2373() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_add2373");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_add2374() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_add2374");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_add2375() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_add2375");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_add2376() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_add2376");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_add2377() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_add2377");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_add2378() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_add2378");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void transform1() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(2L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void transform1_literalMutation2358() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_literalMutation2358");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(3L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void transform1_literalMutation2359() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_literalMutation2359");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(2L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void transform1_literalMutation2360() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_literalMutation2360");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(2L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void transform1_literalMutation2361() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_literalMutation2361");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(1L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void transform1_literalMutation2362() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_literalMutation2362");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(4L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_remove1871() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_remove1871");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_remove1872() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_remove1872");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_remove1873() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_remove1873");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_remove1874() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_remove1874");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_remove1875() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_remove1875");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_remove1876() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_remove1876");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_remove1877() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_remove1877");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_remove1878() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_remove1878");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_remove1879() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_remove1879");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform1_remove1880() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform1_remove1880");
        List<java.lang.Number> list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7259,list,7258,list.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7261,list,7260,list.get(0));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7263,list,7262,list.get(1));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7265,list,7264,list.get(2));
        list = new ArrayList<java.lang.Number>();
        list.add(1L);
        list.add(2L);
        list.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7267,list,7266,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(list, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7269,list,7268,list.size());
        org.apache.commons.collections4.CollectionUtils.transform(null, null);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7271,list,7270,list.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform2_add2379() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform2_add2379");
        final Set<java.lang.Number> set = new HashSet<java.lang.Number>();
        set.add(1L);
        set.add(1L);
        set.add(2L);
        set.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(set, new Transformer<java.lang.Object, java.lang.Integer>() {
            public Integer transform(final Object input) {
                return 4;
            }
        });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7273,set,7272,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7275,set.iterator(),7274,set.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform2_add2380() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform2_add2380");
        final Set<java.lang.Number> set = new HashSet<java.lang.Number>();
        set.add(1L);
        set.add(2L);
        set.add(2L);
        set.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(set, new Transformer<java.lang.Object, java.lang.Integer>() {
            public Integer transform(final Object input) {
                return 4;
            }
        });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7273,set,7272,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7275,set.iterator(),7274,set.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform2_add2381() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform2_add2381");
        final Set<java.lang.Number> set = new HashSet<java.lang.Number>();
        set.add(1L);
        set.add(2L);
        set.add(3L);
        set.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(set, new Transformer<java.lang.Object, java.lang.Integer>() {
            public Integer transform(final Object input) {
                return 4;
            }
        });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7273,set,7272,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7275,set.iterator(),7274,set.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform2_add2382() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform2_add2382");
        final Set<java.lang.Number> set = new HashSet<java.lang.Number>();
        set.add(1L);
        set.add(2L);
        set.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(set, new Transformer<java.lang.Object, java.lang.Integer>() {
            public Integer transform(final Object input) {
                return 4;
            }
        });
        org.apache.commons.collections4.CollectionUtils.transform(set, new Transformer<java.lang.Object, java.lang.Integer>() {
            public Integer transform(final Object input) {
                return 4;
            }
        });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7273,set,7272,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7275,set.iterator(),7274,set.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform2_add2383() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform2_add2383");
        final Set<java.lang.Number> set = new HashSet<java.lang.Number>();
        set.add(1L);
        set.add(2L);
        set.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(set, new Transformer<java.lang.Object, java.lang.Integer>() {
            public Integer transform(final Object input) {
                return 4;
            }
        });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7273,set,7272,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7275,set.iterator(),7274,set.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void transform2() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform2");
        final Set<java.lang.Number> set = new HashSet<java.lang.Number>();
        set.add(2L);
        set.add(2L);
        set.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(set, new Transformer<java.lang.Object, java.lang.Integer>() {
            public Integer transform(final Object input) {
                return 4;
            }
        });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7273,set,7272,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7275,set.iterator(),7274,set.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void transform2_literalMutation2368() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform2_literalMutation2368");
        final Set<java.lang.Number> set = new HashSet<java.lang.Number>();
        set.add(1L);
        set.add(1L);
        set.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(set, new Transformer<java.lang.Object, java.lang.Integer>() {
            public Integer transform(final Object input) {
                return 4;
            }
        });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7273,set,7272,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7275,set.iterator(),7274,set.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void transform2_literalMutation2369() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform2_literalMutation2369");
        final Set<java.lang.Number> set = new HashSet<java.lang.Number>();
        set.add(1L);
        set.add(2L);
        set.add(2L);
        org.apache.commons.collections4.CollectionUtils.transform(set, new Transformer<java.lang.Object, java.lang.Integer>() {
            public Integer transform(final Object input) {
                return 4;
            }
        });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7273,set,7272,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7275,set.iterator(),7274,set.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void transform2_literalMutation2370() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform2_literalMutation2370");
        final Set<java.lang.Number> set = new HashSet<java.lang.Number>();
        set.add(1L);
        set.add(2L);
        set.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(set, new Transformer<java.lang.Object, java.lang.Integer>() {
            public Integer transform(final Object input) {
                return 5;
            }
        });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7273,set,7272,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7275,set.iterator(),7274,set.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform2_remove1881() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform2_remove1881");
        final Set<java.lang.Number> set = new HashSet<java.lang.Number>();
        set.add(2L);
        set.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(set, new Transformer<java.lang.Object, java.lang.Integer>() {
            public Integer transform(final Object input) {
                return 4;
            }
        });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7273,set,7272,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7275,set.iterator(),7274,set.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform2_remove1882() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform2_remove1882");
        final Set<java.lang.Number> set = new HashSet<java.lang.Number>();
        set.add(2L);
        set.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(set, new Transformer<java.lang.Object, java.lang.Integer>() {
            public Integer transform(final Object input) {
                return 4;
            }
        });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7273,set,7272,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7275,set.iterator(),7274,set.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform2_remove1883() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform2_remove1883");
        final Set<java.lang.Number> set = new HashSet<java.lang.Number>();
        set.add(2L);
        set.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(set, new Transformer<java.lang.Object, java.lang.Integer>() {
            public Integer transform(final Object input) {
                return 4;
            }
        });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7273,set,7272,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7275,set.iterator(),7274,set.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform2_remove1884() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform2_remove1884");
        final Set<java.lang.Number> set = new HashSet<java.lang.Number>();
        set.add(1L);
        set.add(2L);
        set.add(3L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7273,set,7272,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7275,set.iterator(),7274,set.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void transform2_remove1885() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "transform2_remove1885");
        final Set<java.lang.Number> set = new HashSet<java.lang.Number>();
        set.add(1L);
        set.add(2L);
        set.add(3L);
        org.apache.commons.collections4.CollectionUtils.transform(set, new Transformer<java.lang.Object, java.lang.Integer>() {
            public Integer transform(final Object input) {
                return 4;
            }
        });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7273,set,7272,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7275,set.iterator(),7274,set.iterator().next());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void addIgnoreNull_add2164() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addIgnoreNull_add2164");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("1");
        set.add("2");
        set.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6559,null,6558,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6561,set,6560,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6563,null,6562,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6565,set,6564,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6567,null,6566,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "4"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6569,set,6568,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6571,set,6570,set.contains("4"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void addIgnoreNull_add2165() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addIgnoreNull_add2165");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("2");
        set.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6559,null,6558,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6561,set,6560,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6563,null,6562,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6565,set,6564,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6567,null,6566,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "4"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6569,set,6568,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6571,set,6570,set.contains("4"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void addIgnoreNull_add2166() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addIgnoreNull_add2166");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        set.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6559,null,6558,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6561,set,6560,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6563,null,6562,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6565,set,6564,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6567,null,6566,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "4"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6569,set,6568,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6571,set,6570,set.contains("4"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void addIgnoreNull() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addIgnoreNull");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("foo");
        set.add("2");
        set.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6559,null,6558,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6561,set,6560,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6563,null,6562,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6565,set,6564,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6567,null,6566,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "4"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6569,set,6568,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6571,set,6570,set.contains("4"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void addIgnoreNull_literalMutation2075() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addIgnoreNull_literalMutation2075");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("foo");
        set.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6559,null,6558,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6561,set,6560,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6563,null,6562,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6565,set,6564,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6567,null,6566,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "4"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6569,set,6568,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6571,set,6570,set.contains("4"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void addIgnoreNull_literalMutation2076() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addIgnoreNull_literalMutation2076");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6559,null,6558,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6561,set,6560,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6563,null,6562,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6565,set,6564,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6567,null,6566,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "4"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6569,set,6568,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6571,set,6570,set.contains("4"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void addIgnoreNull_remove1685() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addIgnoreNull_remove1685");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("2");
        set.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6559,null,6558,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6561,set,6560,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6563,null,6562,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6565,set,6564,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6567,null,6566,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "4"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6569,set,6568,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6571,set,6570,set.contains("4"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void addIgnoreNull_remove1686() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addIgnoreNull_remove1686");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("2");
        set.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6559,null,6558,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6561,set,6560,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6563,null,6562,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6565,set,6564,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6567,null,6566,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "4"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6569,set,6568,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6571,set,6570,set.contains("4"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void addIgnoreNull_remove1687() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addIgnoreNull_remove1687");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("2");
        set.add("3");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6559,null,6558,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6561,set,6560,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6563,null,6562,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6565,set,6564,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6567,null,6566,org.apache.commons.collections4.CollectionUtils.addIgnoreNull(set, "4"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6569,set,6568,set.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6571,set,6570,set.contains("4"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void predicatedCollection() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "predicatedCollection");
        final Predicate<java.lang.Object> predicate = org.apache.commons.collections4.PredicateUtils.instanceofPredicate(Integer.class);
        Collection<java.lang.Number> collection = org.apache.commons.collections4.CollectionUtils.predicatedCollection(new ArrayList<java.lang.Number>(), predicate);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6940,(collection instanceof org.apache.commons.collections4.collection.PredicatedCollection));
        try {
            org.apache.commons.collections4.CollectionUtils.predicatedCollection(new ArrayList<java.lang.Number>(), null);
            org.apache.commons.collections4.CollectionUtils.predicatedCollection(new ArrayList<java.lang.Number>(), null);
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.predicatedCollection(null, predicate);
        } catch (final IllegalArgumentException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void predicatedCollection_add2279() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "predicatedCollection_add2279");
        final Predicate<java.lang.Object> predicate = org.apache.commons.collections4.PredicateUtils.instanceofPredicate(Integer.class);
        Collection<java.lang.Number> collection = org.apache.commons.collections4.CollectionUtils.predicatedCollection(new ArrayList<java.lang.Number>(), predicate);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6940,(collection instanceof org.apache.commons.collections4.collection.PredicatedCollection));
        try {
            org.apache.commons.collections4.CollectionUtils.predicatedCollection(new ArrayList<java.lang.Number>(), null);
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.predicatedCollection(null, predicate);
            org.apache.commons.collections4.CollectionUtils.predicatedCollection(null, predicate);
        } catch (final IllegalArgumentException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void isFull_add2266() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isFull_add2266");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("1");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.isFull(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6924,null,6923,org.apache.commons.collections4.CollectionUtils.isFull(set));
        final CircularFifoQueue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6926,null,6925,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6928,null,6927,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6930,null,6929,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void isFull_add2267() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isFull_add2267");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.isFull(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6924,null,6923,org.apache.commons.collections4.CollectionUtils.isFull(set));
        final CircularFifoQueue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6926,null,6925,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6928,null,6927,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6930,null,6929,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void isFull_add2268() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isFull_add2268");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.isFull(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6924,null,6923,org.apache.commons.collections4.CollectionUtils.isFull(set));
        final CircularFifoQueue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6926,null,6925,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6928,null,6927,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6930,null,6929,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void isFull_add2269() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isFull_add2269");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.isFull(null);
            org.apache.commons.collections4.CollectionUtils.isFull(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6924,null,6923,org.apache.commons.collections4.CollectionUtils.isFull(set));
        final CircularFifoQueue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6926,null,6925,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6928,null,6927,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6930,null,6929,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void isFull_add2270() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isFull_add2270");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.isFull(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6924,null,6923,org.apache.commons.collections4.CollectionUtils.isFull(set));
        final CircularFifoQueue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6926,null,6925,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.remove("2");
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6928,null,6927,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6930,null,6929,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void isFull_add2271() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isFull_add2271");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.isFull(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6924,null,6923,org.apache.commons.collections4.CollectionUtils.isFull(set));
        final CircularFifoQueue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6926,null,6925,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6928,null,6927,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.add("2");
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6930,null,6929,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void isFull() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isFull");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("foo");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.isFull(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6924,null,6923,org.apache.commons.collections4.CollectionUtils.isFull(set));
        final CircularFifoQueue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6926,null,6925,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6928,null,6927,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6930,null,6929,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void isFull_literalMutation2214() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isFull_literalMutation2214");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("foo");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.isFull(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6924,null,6923,org.apache.commons.collections4.CollectionUtils.isFull(set));
        final CircularFifoQueue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6926,null,6925,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6928,null,6927,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6930,null,6929,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void isFull_literalMutation2215() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isFull_literalMutation2215");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("foo");
        try {
            org.apache.commons.collections4.CollectionUtils.isFull(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6924,null,6923,org.apache.commons.collections4.CollectionUtils.isFull(set));
        final CircularFifoQueue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6926,null,6925,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6928,null,6927,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6930,null,6929,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void isFull_literalMutation2217() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isFull_literalMutation2217");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.isFull(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6924,null,6923,org.apache.commons.collections4.CollectionUtils.isFull(set));
        final CircularFifoQueue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6926,null,6925,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.remove("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6928,null,6927,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6930,null,6929,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void isFull_literalMutation2218() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isFull_literalMutation2218");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.isFull(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6924,null,6923,org.apache.commons.collections4.CollectionUtils.isFull(set));
        final CircularFifoQueue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6926,null,6925,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6928,null,6927,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6930,null,6929,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void isFull_remove1780() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isFull_remove1780");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.isFull(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6924,null,6923,org.apache.commons.collections4.CollectionUtils.isFull(set));
        final CircularFifoQueue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6926,null,6925,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6928,null,6927,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6930,null,6929,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void isFull_remove1781() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isFull_remove1781");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.isFull(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6924,null,6923,org.apache.commons.collections4.CollectionUtils.isFull(set));
        final CircularFifoQueue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6926,null,6925,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6928,null,6927,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6930,null,6929,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void isFull_remove1782() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isFull_remove1782");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.isFull(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6924,null,6923,org.apache.commons.collections4.CollectionUtils.isFull(set));
        final CircularFifoQueue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6926,null,6925,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6928,null,6927,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6930,null,6929,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void isFull_remove1783() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isFull_remove1783");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.isFull(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6924,null,6923,org.apache.commons.collections4.CollectionUtils.isFull(set));
        final CircularFifoQueue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6926,null,6925,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6928,null,6927,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6930,null,6929,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void isFull_remove1784() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isFull_remove1784");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.isFull(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6924,null,6923,org.apache.commons.collections4.CollectionUtils.isFull(set));
        final CircularFifoQueue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6926,null,6925,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6928,null,6927,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6930,null,6929,org.apache.commons.collections4.CollectionUtils.isFull(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void isEmpty() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "isEmpty");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6920,null,6919,org.apache.commons.collections4.CollectionUtils.isNotEmpty(null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6922,null,6921,org.apache.commons.collections4.CollectionUtils.isNotEmpty(collectionA));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void maxSize_add2272() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "maxSize_add2272");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("1");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6931,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6933,null,6932,org.apache.commons.collections4.CollectionUtils.maxSize(set));
        final Queue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6935,null,6934,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6937,null,6936,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6939,null,6938,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void maxSize_add2273() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "maxSize_add2273");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6931,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6933,null,6932,org.apache.commons.collections4.CollectionUtils.maxSize(set));
        final Queue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6935,null,6934,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6937,null,6936,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6939,null,6938,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void maxSize_add2274() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "maxSize_add2274");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6931,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6933,null,6932,org.apache.commons.collections4.CollectionUtils.maxSize(set));
        final Queue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6935,null,6934,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6937,null,6936,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6939,null,6938,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void maxSize_add2275() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "maxSize_add2275");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6931,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6933,null,6932,org.apache.commons.collections4.CollectionUtils.maxSize(set));
        final Queue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6935,null,6934,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6937,null,6936,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6939,null,6938,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void maxSize_add2276() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "maxSize_add2276");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6931,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6933,null,6932,org.apache.commons.collections4.CollectionUtils.maxSize(set));
        final Queue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6935,null,6934,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.remove("2");
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6937,null,6936,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6939,null,6938,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void maxSize_add2277() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "maxSize_add2277");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6931,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6933,null,6932,org.apache.commons.collections4.CollectionUtils.maxSize(set));
        final Queue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6935,null,6934,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6937,null,6936,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.add("2");
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6939,null,6938,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void maxSize() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "maxSize");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("foo");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6931,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6933,null,6932,org.apache.commons.collections4.CollectionUtils.maxSize(set));
        final Queue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6935,null,6934,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6937,null,6936,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6939,null,6938,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void maxSize_literalMutation2220() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "maxSize_literalMutation2220");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("foo");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6931,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6933,null,6932,org.apache.commons.collections4.CollectionUtils.maxSize(set));
        final Queue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6935,null,6934,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6937,null,6936,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6939,null,6938,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void maxSize_literalMutation2221() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "maxSize_literalMutation2221");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("foo");
        try {
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6931,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6933,null,6932,org.apache.commons.collections4.CollectionUtils.maxSize(set));
        final Queue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6935,null,6934,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6937,null,6936,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6939,null,6938,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void maxSize_literalMutation2223() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "maxSize_literalMutation2223");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6931,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6933,null,6932,org.apache.commons.collections4.CollectionUtils.maxSize(set));
        final Queue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6935,null,6934,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.remove("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6937,null,6936,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6939,null,6938,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void maxSize_literalMutation2224() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "maxSize_literalMutation2224");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6931,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6933,null,6932,org.apache.commons.collections4.CollectionUtils.maxSize(set));
        final Queue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6935,null,6934,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6937,null,6936,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6939,null,6938,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void maxSize_remove1785() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "maxSize_remove1785");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6931,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6933,null,6932,org.apache.commons.collections4.CollectionUtils.maxSize(set));
        final Queue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6935,null,6934,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6937,null,6936,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6939,null,6938,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void maxSize_remove1786() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "maxSize_remove1786");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6931,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6933,null,6932,org.apache.commons.collections4.CollectionUtils.maxSize(set));
        final Queue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6935,null,6934,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6937,null,6936,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6939,null,6938,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void maxSize_remove1787() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "maxSize_remove1787");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6931,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6933,null,6932,org.apache.commons.collections4.CollectionUtils.maxSize(set));
        final Queue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6935,null,6934,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6937,null,6936,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6939,null,6938,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void maxSize_remove1788() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "maxSize_remove1788");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6931,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6933,null,6932,org.apache.commons.collections4.CollectionUtils.maxSize(set));
        final Queue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6935,null,6934,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6937,null,6936,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.add("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6939,null,6938,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void maxSize_remove1789() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "maxSize_remove1789");
        final Set<java.lang.String> set = new HashSet<java.lang.String>();
        set.add("1");
        set.add("2");
        set.add("3");
        try {
            org.apache.commons.collections4.CollectionUtils.maxSize(null);
        } catch (final NullPointerException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6931,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6933,null,6932,org.apache.commons.collections4.CollectionUtils.maxSize(set));
        final Queue<java.lang.String> buf = new CircularFifoQueue<java.lang.String>(set);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6935,null,6934,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        buf.remove("2");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6937,null,6936,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6939,null,6938,org.apache.commons.collections4.CollectionUtils.maxSize(buf));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void intersectionUsesMethodEquals_add2264() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "intersectionUsesMethodEquals_add2264");
        final Integer elta = new Integer(17);
        final Integer eltb = new Integer(17);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6903,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6904,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6905,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6906,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6907,(elta != eltb));
        final Collection<java.lang.Number> cola = new ArrayList<java.lang.Number>();
        final Collection<java.lang.Integer> colb = new ArrayList<java.lang.Integer>();
        cola.add(elta);
        cola.add(elta);
        colb.add(eltb);
        final Collection<java.lang.Number> intersection = org.apache.commons.collections4.CollectionUtils.intersection(cola, colb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6909,intersection,6908,intersection.size());
        final Object eltc = intersection.iterator().next();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6910,(((eltc == elta) && (eltc != eltb)) || ((eltc != elta) && (eltc == eltb))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6911,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6912,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6913,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6914,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6915,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6916,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6917,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6918,eltb);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void intersectionUsesMethodEquals_add2265() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "intersectionUsesMethodEquals_add2265");
        final Integer elta = new Integer(17);
        final Integer eltb = new Integer(17);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6903,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6904,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6905,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6906,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6907,(elta != eltb));
        final Collection<java.lang.Number> cola = new ArrayList<java.lang.Number>();
        final Collection<java.lang.Integer> colb = new ArrayList<java.lang.Integer>();
        cola.add(elta);
        colb.add(eltb);
        colb.add(eltb);
        final Collection<java.lang.Number> intersection = org.apache.commons.collections4.CollectionUtils.intersection(cola, colb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6909,intersection,6908,intersection.size());
        final Object eltc = intersection.iterator().next();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6910,(((eltc == elta) && (eltc != eltb)) || ((eltc != elta) && (eltc == eltb))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6911,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6912,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6913,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6914,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6915,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6916,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6917,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6918,eltb);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void intersection() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "intersection");
        final Integer elta = new Integer(16);
        final Integer eltb = new Integer(17);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6903,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6904,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6905,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6906,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6907,(elta != eltb));
        final Collection<java.lang.Number> cola = new ArrayList<java.lang.Number>();
        final Collection<java.lang.Integer> colb = new ArrayList<java.lang.Integer>();
        cola.add(elta);
        colb.add(eltb);
        final Collection<java.lang.Number> intersection = org.apache.commons.collections4.CollectionUtils.intersection(cola, colb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6909,intersection,6908,intersection.size());
        final Object eltc = intersection.iterator().next();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6910,(((eltc == elta) && (eltc != eltb)) || ((eltc != elta) && (eltc == eltb))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6911,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6912,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6913,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6914,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6915,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6916,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6917,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6918,eltb);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void intersectionUsesMethodEquals() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "intersectionUsesMethodEquals");
        final Integer elta = new Integer(17);
        final Integer eltb = new Integer(18);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6903,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6904,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6905,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6906,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6907,(elta != eltb));
        final Collection<java.lang.Number> cola = new ArrayList<java.lang.Number>();
        final Collection<java.lang.Integer> colb = new ArrayList<java.lang.Integer>();
        cola.add(elta);
        colb.add(eltb);
        final Collection<java.lang.Number> intersection = org.apache.commons.collections4.CollectionUtils.intersection(cola, colb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6909,intersection,6908,intersection.size());
        final Object eltc = intersection.iterator().next();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6910,(((eltc == elta) && (eltc != eltb)) || ((eltc != elta) && (eltc == eltb))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6911,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6912,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6913,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6914,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6915,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6916,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6917,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6918,eltb);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void intersectionUsesMethodEquals_remove1778() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "intersectionUsesMethodEquals_remove1778");
        final Integer elta = new Integer(17);
        final Integer eltb = new Integer(17);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6903,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6904,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6905,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6906,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6907,(elta != eltb));
        final Collection<java.lang.Number> cola = new ArrayList<java.lang.Number>();
        final Collection<java.lang.Integer> colb = new ArrayList<java.lang.Integer>();
        colb.add(eltb);
        final Collection<java.lang.Number> intersection = org.apache.commons.collections4.CollectionUtils.intersection(cola, colb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6909,intersection,6908,intersection.size());
        final Object eltc = intersection.iterator().next();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6910,(((eltc == elta) && (eltc != eltb)) || ((eltc != elta) && (eltc == eltb))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6911,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6912,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6913,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6914,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6915,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6916,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6917,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6918,eltb);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void intersectionUsesMethodEquals_remove1779() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "intersectionUsesMethodEquals_remove1779");
        final Integer elta = new Integer(17);
        final Integer eltb = new Integer(17);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6903,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6904,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6905,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6906,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6907,(elta != eltb));
        final Collection<java.lang.Number> cola = new ArrayList<java.lang.Number>();
        final Collection<java.lang.Integer> colb = new ArrayList<java.lang.Integer>();
        colb.add(eltb);
        final Collection<java.lang.Number> intersection = org.apache.commons.collections4.CollectionUtils.intersection(cola, colb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6909,intersection,6908,intersection.size());
        final Object eltc = intersection.iterator().next();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6910,(((eltc == elta) && (eltc != eltb)) || ((eltc != elta) && (eltc == eltb))));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6911,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6912,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6913,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6914,elta);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6915,eltb);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6916,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6917,eltc);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6918,eltb);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testRetainAll() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRetainAll_add2338() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_add2338");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRetainAll_add2339() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_add2339");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRetainAll_add2340() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_add2340");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRetainAll_add2341() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_add2341");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRetainAll_add2342() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_add2342");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRetainAll_add2343() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_add2343");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRetainAll_add2344() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_add2344");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testRetainAll_literalMutation2291() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_literalMutation2291");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("foo");
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testRetainAll_literalMutation2292() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_literalMutation2292");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("foo");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testRetainAll_literalMutation2293() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_literalMutation2293");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("foo");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testRetainAll_literalMutation2294() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_literalMutation2294");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("foo");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testRetainAll_literalMutation2295() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_literalMutation2295");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("foo");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testRetainAll_literalMutation2296() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_literalMutation2296");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("foo");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRetainAll_remove1847() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_remove1847");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRetainAll_remove1848() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_remove1848");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRetainAll_remove1849() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_remove1849");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRetainAll_remove1850() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_remove1850");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRetainAll_remove1851() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_remove1851");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRetainAll_remove1852() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRetainAll_remove1852");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("B");
        base.add("C");
        final List<java.lang.Object> sub = new ArrayList<java.lang.Object>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.retainAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7136,result,7135,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7138,result,7137,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7140,result,7139,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7142,result,7141,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7144,base,7143,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7146,base,7145,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7148,base,7147,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7150,base,7149,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7152,sub,7151,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7154,sub,7153,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7156,sub,7155,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7158,sub,7157,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.retainAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testRemoveAll() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRemoveAll_add2331() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_add2331");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRemoveAll_add2332() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_add2332");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRemoveAll_add2333() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_add2333");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRemoveAll_add2334() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_add2334");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRemoveAll_add2335() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_add2335");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRemoveAll_add2336() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_add2336");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRemoveAll_add2337() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_add2337");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testRemoveAll_literalMutation2283() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_literalMutation2283");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("foo");
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testRemoveAll_literalMutation2284() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_literalMutation2284");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("foo");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testRemoveAll_literalMutation2285() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_literalMutation2285");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("foo");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testRemoveAll_literalMutation2286() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_literalMutation2286");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("foo");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testRemoveAll_literalMutation2287() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_literalMutation2287");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("foo");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testRemoveAll_literalMutation2288() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_literalMutation2288");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("A");
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("foo");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRemoveAll_remove1841() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_remove1841");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRemoveAll_remove1842() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_remove1842");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRemoveAll_remove1843() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_remove1843");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRemoveAll_remove1844() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_remove1844");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRemoveAll_remove1845() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_remove1845");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testRemoveAll_remove1846() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testRemoveAll_remove1846");
        final List<java.lang.String> base = new ArrayList<java.lang.String>();
        base.add("B");
        base.add("C");
        final List<java.lang.String> sub = new ArrayList<java.lang.String>();
        sub.add("A");
        sub.add("C");
        sub.add("X");
        final Collection<java.lang.String> result = org.apache.commons.collections4.CollectionUtils.removeAll(base, sub);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7112,result,7111,result.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7114,result,7113,result.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7116,result,7115,result.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7118,result,7117,result.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7120,base,7119,base.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7122,base,7121,base.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7124,base,7123,base.contains("B"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7126,base,7125,base.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7128,sub,7127,sub.size());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7130,sub,7129,sub.contains("A"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7132,sub,7131,sub.contains("C"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7134,sub,7133,sub.contains("X"));
        try {
            org.apache.commons.collections4.CollectionUtils.removeAll(null, null);
        } catch (final NullPointerException npe) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testTransformedCollection() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedCollection");
        final Transformer<java.lang.Object, java.lang.Object> transformer = org.apache.commons.collections4.TransformerUtils.nopTransformer();
        Collection<java.lang.Object> collection = org.apache.commons.collections4.CollectionUtils.transformingCollection(new ArrayList<java.lang.Object>(), transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7250,(collection instanceof org.apache.commons.collections4.collection.TransformedCollection));
        try {
            org.apache.commons.collections4.CollectionUtils.transformingCollection(new ArrayList<java.lang.Object>(), null);
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.transformingCollection(null, transformer);
        } catch (final IllegalArgumentException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testTransformedCollection_add2363() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedCollection_add2363");
        final Transformer<java.lang.Object, java.lang.Object> transformer = org.apache.commons.collections4.TransformerUtils.nopTransformer();
        Collection<java.lang.Object> collection = org.apache.commons.collections4.CollectionUtils.transformingCollection(new ArrayList<java.lang.Object>(), transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7250,(collection instanceof org.apache.commons.collections4.collection.TransformedCollection));
        try {
            org.apache.commons.collections4.CollectionUtils.transformingCollection(new ArrayList<java.lang.Object>(), null);
            org.apache.commons.collections4.CollectionUtils.transformingCollection(new ArrayList<java.lang.Object>(), null);
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.transformingCollection(null, transformer);
        } catch (final IllegalArgumentException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testTransformedCollection_add2364() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedCollection_add2364");
        final Transformer<java.lang.Object, java.lang.Object> transformer = org.apache.commons.collections4.TransformerUtils.nopTransformer();
        Collection<java.lang.Object> collection = org.apache.commons.collections4.CollectionUtils.transformingCollection(new ArrayList<java.lang.Object>(), transformer);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7250,(collection instanceof org.apache.commons.collections4.collection.TransformedCollection));
        try {
            org.apache.commons.collections4.CollectionUtils.transformingCollection(new ArrayList<java.lang.Object>(), null);
        } catch (final IllegalArgumentException ex) {
        }
        try {
            org.apache.commons.collections4.CollectionUtils.transformingCollection(null, transformer);
            org.apache.commons.collections4.CollectionUtils.transformingCollection(null, transformer);
        } catch (final IllegalArgumentException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testTransformedCollection_2_add2365() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedCollection_2_add2365");
        final List<java.lang.Object> list = new ArrayList<java.lang.Object>();
        list.add("1");
        list.add("1");
        list.add("2");
        list.add("3");
        final Collection<java.lang.Object> result = org.apache.commons.collections4.CollectionUtils.transformingCollection(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7252,result,7251,result.contains("1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7254,result,7253,result.contains("2"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7256,result,7255,result.contains("3"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testTransformedCollection_2_add2366() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedCollection_2_add2366");
        final List<java.lang.Object> list = new ArrayList<java.lang.Object>();
        list.add("1");
        list.add("2");
        list.add("2");
        list.add("3");
        final Collection<java.lang.Object> result = org.apache.commons.collections4.CollectionUtils.transformingCollection(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7252,result,7251,result.contains("1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7254,result,7253,result.contains("2"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7256,result,7255,result.contains("3"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testTransformedCollection_2_add2367() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedCollection_2_add2367");
        final List<java.lang.Object> list = new ArrayList<java.lang.Object>();
        list.add("1");
        list.add("2");
        list.add("3");
        list.add("3");
        final Collection<java.lang.Object> result = org.apache.commons.collections4.CollectionUtils.transformingCollection(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7252,result,7251,result.contains("1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7254,result,7253,result.contains("2"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7256,result,7255,result.contains("3"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testTransformedCollection_2() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedCollection_2");
        final List<java.lang.Object> list = new ArrayList<java.lang.Object>();
        list.add("foo");
        list.add("2");
        list.add("3");
        final Collection<java.lang.Object> result = org.apache.commons.collections4.CollectionUtils.transformingCollection(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7252,result,7251,result.contains("1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7254,result,7253,result.contains("2"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7256,result,7255,result.contains("3"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testTransformedCollection_2_literalMutation2354() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedCollection_2_literalMutation2354");
        final List<java.lang.Object> list = new ArrayList<java.lang.Object>();
        list.add("1");
        list.add("foo");
        list.add("3");
        final Collection<java.lang.Object> result = org.apache.commons.collections4.CollectionUtils.transformingCollection(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7252,result,7251,result.contains("1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7254,result,7253,result.contains("2"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7256,result,7255,result.contains("3"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testTransformedCollection_2_literalMutation2355() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedCollection_2_literalMutation2355");
        final List<java.lang.Object> list = new ArrayList<java.lang.Object>();
        list.add("1");
        list.add("2");
        list.add("foo");
        final Collection<java.lang.Object> result = org.apache.commons.collections4.CollectionUtils.transformingCollection(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7252,result,7251,result.contains("1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7254,result,7253,result.contains("2"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7256,result,7255,result.contains("3"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testTransformedCollection_2_remove1868() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedCollection_2_remove1868");
        final List<java.lang.Object> list = new ArrayList<java.lang.Object>();
        list.add("2");
        list.add("3");
        final Collection<java.lang.Object> result = org.apache.commons.collections4.CollectionUtils.transformingCollection(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7252,result,7251,result.contains("1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7254,result,7253,result.contains("2"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7256,result,7255,result.contains("3"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testTransformedCollection_2_remove1869() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedCollection_2_remove1869");
        final List<java.lang.Object> list = new ArrayList<java.lang.Object>();
        list.add("2");
        list.add("3");
        final Collection<java.lang.Object> result = org.apache.commons.collections4.CollectionUtils.transformingCollection(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7252,result,7251,result.contains("1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7254,result,7253,result.contains("2"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7256,result,7255,result.contains("3"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testTransformedCollection_2_remove1870() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTransformedCollection_2_remove1870");
        final List<java.lang.Object> list = new ArrayList<java.lang.Object>();
        list.add("2");
        list.add("3");
        final Collection<java.lang.Object> result = org.apache.commons.collections4.CollectionUtils.transformingCollection(list, TRANSFORM_TO_INTEGER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7252,result,7251,result.contains("1"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7254,result,7253,result.contains("2"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7256,result,7255,result.contains("3"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSynchronizedCollection() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSynchronizedCollection");
        Collection<java.lang.Object> col = org.apache.commons.collections4.CollectionUtils.synchronizedCollection(new ArrayList<java.lang.Object>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7249,(col instanceof org.apache.commons.collections4.collection.SynchronizedCollection));
        try {
            org.apache.commons.collections4.CollectionUtils.synchronizedCollection(null);
            org.apache.commons.collections4.CollectionUtils.synchronizedCollection(null);
        } catch (final IllegalArgumentException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testUnmodifiableCollection() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnmodifiableCollection");
        Collection<java.lang.Object> col = org.apache.commons.collections4.CollectionUtils.unmodifiableCollection(new ArrayList<java.lang.Object>());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7257,(col instanceof org.apache.commons.collections4.collection.UnmodifiableCollection));
        try {
            org.apache.commons.collections4.CollectionUtils.unmodifiableCollection(null);
            org.apache.commons.collections4.CollectionUtils.unmodifiableCollection(null);
        } catch (final IllegalArgumentException ex) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void emptyCollection() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "emptyCollection");
        final Collection<java.lang.Number> coll = org.apache.commons.collections4.CollectionUtils.emptyCollection();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6750,org.apache.commons.collections4.CollectionUtils.EMPTY_COLLECTION);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6751,coll);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void emptyIfNull() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "emptyIfNull");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6753,org.apache.commons.collections4.CollectionUtils.emptyIfNull(null),6752,org.apache.commons.collections4.CollectionUtils.emptyIfNull(null).isEmpty());
        final Collection<java.lang.Object> collection = new ArrayList<java.lang.Object>();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6754,collection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6756,null,6755,org.apache.commons.collections4.CollectionUtils.emptyIfNull(collection));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_add2148() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_add2148");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_add2149() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_add2149");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_add2150() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_add2150");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_add2151() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_add2151");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_add2152() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_add2152");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_add2153() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_add2153");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_add2154() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_add2154");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_add2155() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_add2155");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_add2156() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_add2156");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_add2157() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_add2157");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_add2158() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_add2158");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_add2159() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_add2159");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_add2160() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_add2160");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_add2161() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_add2161");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_add2162() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_add2162");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_add2163() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_add2163");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test
    public void addAllForIterable() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 2L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test
    public void addAllForIterable_literalMutation2059() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_literalMutation2059");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 3L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test
    public void addAllForIterable_literalMutation2060() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_literalMutation2060");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 2L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test
    public void addAllForIterable_literalMutation2061() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_literalMutation2061");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(true);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test
    public void addAllForIterable_literalMutation2062() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_literalMutation2062");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test
    public void addAllForIterable_literalMutation2063() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_literalMutation2063");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test
    public void addAllForIterable_literalMutation2064() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_literalMutation2064");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test
    public void addAllForIterable_literalMutation2065() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_literalMutation2065");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test
    public void addAllForIterable_literalMutation2066() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_literalMutation2066");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test
    public void addAllForIterable_literalMutation2067() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_literalMutation2067");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test
    public void addAllForIterable_literalMutation2068() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_literalMutation2068");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(false);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test
    public void addAllForIterable_literalMutation2069() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_literalMutation2069");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 0L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test
    public void addAllForIterable_literalMutation2070() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_literalMutation2070");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test
    public void addAllForIterable_literalMutation2071() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_literalMutation2071");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(0L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test
    public void addAllForIterable_literalMutation2072() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_literalMutation2072");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test
    public void addAllForIterable_literalMutation2073() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_literalMutation2073");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_remove1669() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_remove1669");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_remove1670() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_remove1670");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_remove1671() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_remove1671");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_remove1672() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_remove1672");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_remove1673() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_remove1673");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_remove1674() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_remove1674");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_remove1675() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_remove1675");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_remove1676() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_remove1676");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_remove1677() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_remove1677");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_remove1678() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_remove1678");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_remove1679() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_remove1679");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_remove1680() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_remove1680");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_remove1681() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_remove1681");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_remove1682() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_remove1682");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_remove1683() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_remove1683");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        verify();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.
     * Specifically, it uses mocks to ensure that if the passed in
     * {@link Iterable} is a {@link Collection} then
     * {@link Collection#addAll(Collection)} is called instead of iterating.
     */
@Test(timeout = 1000)
    public void addAllForIterable_remove1684() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForIterable_remove1684");
        final Collection<java.lang.Integer> inputCollection = createMock(Collection.class);
        final Iterable<java.lang.Integer> inputIterable = inputCollection;
        final Iterable<java.lang.Long> iterable = createMock(Iterable.class);
        final Iterator<java.lang.Long> iterator = createMock(Iterator.class);
        final Collection<java.lang.Number> c = createMock(Collection.class);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        next(iterator, 2L);
        next(iterator, 3L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(true);
        expect(c.add(2L)).andReturn(true);
        expect(c.add(3L)).andReturn(true);
        expect(c.addAll(inputCollection)).andReturn(true);
        expect(iterable.iterator()).andReturn(iterator);
        next(iterator, 1L);
        expect(iterator.hasNext()).andReturn(false);
        expect(c.add(1L)).andReturn(false);
        expect(c.addAll(inputCollection)).andReturn(false);
        replay();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6551,null,6550,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6553,null,6552,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6555,null,6554,org.apache.commons.collections4.CollectionUtils.addAll(c, iterable));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6557,null,6556,org.apache.commons.collections4.CollectionUtils.addAll(c, inputIterable));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void addAllForEnumeration_add2146() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForEnumeration_add2146");
        final Hashtable<java.lang.Integer, java.lang.Integer> h = new Hashtable<java.lang.Integer, java.lang.Integer>();
        h.put(5, 5);
        h.put(5, 5);
        final Enumeration<? extends java.lang.Integer> enumeration = h.keys();
        org.apache.commons.collections4.CollectionUtils.addAll(collectionA, enumeration);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6549,collectionA,6548,collectionA.contains(5));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void addAllForEnumeration_add2147() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForEnumeration_add2147");
        final Hashtable<java.lang.Integer, java.lang.Integer> h = new Hashtable<java.lang.Integer, java.lang.Integer>();
        h.put(5, 5);
        final Enumeration<? extends java.lang.Integer> enumeration = h.keys();
        org.apache.commons.collections4.CollectionUtils.addAll(collectionA, enumeration);
        org.apache.commons.collections4.CollectionUtils.addAll(collectionA, enumeration);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6549,collectionA,6548,collectionA.contains(5));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void addAllForEnumeration() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForEnumeration");
        final Hashtable<java.lang.Integer, java.lang.Integer> h = new Hashtable<java.lang.Integer, java.lang.Integer>();
        h.put(4, 5);
        final Enumeration<? extends java.lang.Integer> enumeration = h.keys();
        org.apache.commons.collections4.CollectionUtils.addAll(collectionA, enumeration);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6549,collectionA,6548,collectionA.contains(5));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void addAllForEnumeration_literalMutation2057() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForEnumeration_literalMutation2057");
        final Hashtable<java.lang.Integer, java.lang.Integer> h = new Hashtable<java.lang.Integer, java.lang.Integer>();
        h.put(5, 4);
        final Enumeration<? extends java.lang.Integer> enumeration = h.keys();
        org.apache.commons.collections4.CollectionUtils.addAll(collectionA, enumeration);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6549,collectionA,6548,collectionA.contains(5));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void addAllForEnumeration_remove1667() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForEnumeration_remove1667");
        final Hashtable<java.lang.Integer, java.lang.Integer> h = new Hashtable<java.lang.Integer, java.lang.Integer>();
        final Enumeration<? extends java.lang.Integer> enumeration = h.keys();
        org.apache.commons.collections4.CollectionUtils.addAll(collectionA, enumeration);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6549,collectionA,6548,collectionA.contains(5));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void addAllForEnumeration_remove1668() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForEnumeration_remove1668");
        final Hashtable<java.lang.Integer, java.lang.Integer> h = new Hashtable<java.lang.Integer, java.lang.Integer>();
        h.put(5, 5);
        final Enumeration<? extends java.lang.Integer> enumeration = h.keys();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6549,collectionA,6548,collectionA.contains(5));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void addAllForElements_add2145() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForElements_add2145");
        org.apache.commons.collections4.CollectionUtils.addAll(collectionA, new Integer[]{ 5 });
        org.apache.commons.collections4.CollectionUtils.addAll(collectionA, new Integer[]{ 5 });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6547,collectionA,6546,collectionA.contains(5));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void addAllForElements() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForElements");
        org.apache.commons.collections4.CollectionUtils.addAll(collectionA, new Integer[]{ 4 });
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6547,collectionA,6546,collectionA.contains(5));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void addAllForElements_remove1666() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "addAllForElements_remove1666");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6547,collectionA,6546,collectionA.contains(5));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getNegative_add2262() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getNegative_add2262");
        org.apache.commons.collections4.CollectionUtils.get(((Object)(collectionA)), -3);
        org.apache.commons.collections4.CollectionUtils.get(((Object)(collectionA)), -3);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getNegative() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getNegative");
        org.apache.commons.collections4.CollectionUtils.get(((Object)(collectionA)), 2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getNegative_remove1776() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getNegative_remove1776");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getPositiveOutOfBounds_add2263() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getPositiveOutOfBounds_add2263");
        org.apache.commons.collections4.CollectionUtils.get(((Object)(collectionA.iterator())), 30);
        org.apache.commons.collections4.CollectionUtils.get(((Object)(collectionA.iterator())), 30);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getPositiveOutOfBounds() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getPositiveOutOfBounds");
        org.apache.commons.collections4.CollectionUtils.get(((Object)(collectionA.iterator())), 29);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IndexOutOfBoundsException.class, timeout = 1000)
    public void getPositiveOutOfBounds_remove1777() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "getPositiveOutOfBounds_remove1777");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void get1() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "get1");
        org.apache.commons.collections4.CollectionUtils.get(((Object)(null)), 0);
        org.apache.commons.collections4.CollectionUtils.get(((Object)(null)), 0);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class)
    public void get() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "get");
        org.apache.commons.collections4.CollectionUtils.get(((Object)(null)), 1);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void get1_remove1758() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "get1_remove1758");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void reverse() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "reverse");
        org.apache.commons.collections4.CollectionUtils.reverseArray(new Object[]{  });
        org.apache.commons.collections4.CollectionUtils.reverseArray(new Object[]{  });
        final Integer[] a = collectionA.toArray(new Integer[collectionA.size()]);
        org.apache.commons.collections4.CollectionUtils.reverseArray(a);
        java.util.Collections.reverse(collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6941,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6943,null,6942,java.util.Arrays.asList(a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void reverse_add2281() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "reverse_add2281");
        org.apache.commons.collections4.CollectionUtils.reverseArray(new Object[]{  });
        final Integer[] a = collectionA.toArray(new Integer[collectionA.size()]);
        org.apache.commons.collections4.CollectionUtils.reverseArray(a);
        org.apache.commons.collections4.CollectionUtils.reverseArray(a);
        java.util.Collections.reverse(collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6941,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6943,null,6942,java.util.Arrays.asList(a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void reverse_add2282() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "reverse_add2282");
        org.apache.commons.collections4.CollectionUtils.reverseArray(new Object[]{  });
        final Integer[] a = collectionA.toArray(new Integer[collectionA.size()]);
        org.apache.commons.collections4.CollectionUtils.reverseArray(a);
        java.util.Collections.reverse(collectionA);
        java.util.Collections.reverse(collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6941,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6943,null,6942,java.util.Arrays.asList(a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void reverse_remove1790() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "reverse_remove1790");
        final Integer[] a = collectionA.toArray(new Integer[collectionA.size()]);
        org.apache.commons.collections4.CollectionUtils.reverseArray(a);
        java.util.Collections.reverse(collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6941,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6943,null,6942,java.util.Arrays.asList(a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void reverse_remove1791() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "reverse_remove1791");
        final Integer[] a = collectionA.toArray(new Integer[collectionA.size()]);
        org.apache.commons.collections4.CollectionUtils.reverseArray(a);
        java.util.Collections.reverse(collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6941,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6943,null,6942,java.util.Arrays.asList(a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void reverse_remove1792() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "reverse_remove1792");
        org.apache.commons.collections4.CollectionUtils.reverseArray(new Object[]{  });
        final Integer[] a = collectionA.toArray(new Integer[collectionA.size()]);
        org.apache.commons.collections4.CollectionUtils.reverseArray(a);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6941,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6943,null,6942,java.util.Arrays.asList(a));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void extractSingleton_add2204() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "extractSingleton_add2204");
        ArrayList<java.lang.String> coll = null;
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        coll = new ArrayList<java.lang.String>();
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        coll.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6770,null,6769,org.apache.commons.collections4.CollectionUtils.extractSingleton(coll));
        coll.add("bar");
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void extractSingleton_add2205() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "extractSingleton_add2205");
        ArrayList<java.lang.String> coll = null;
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        coll = new ArrayList<java.lang.String>();
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        coll.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6770,null,6769,org.apache.commons.collections4.CollectionUtils.extractSingleton(coll));
        coll.add("bar");
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void extractSingleton_add2206() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "extractSingleton_add2206");
        ArrayList<java.lang.String> coll = null;
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        coll = new ArrayList<java.lang.String>();
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        coll.add("foo");
        coll.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6770,null,6769,org.apache.commons.collections4.CollectionUtils.extractSingleton(coll));
        coll.add("bar");
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void extractSingleton_add2207() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "extractSingleton_add2207");
        ArrayList<java.lang.String> coll = null;
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        coll = new ArrayList<java.lang.String>();
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        coll.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6770,null,6769,org.apache.commons.collections4.CollectionUtils.extractSingleton(coll));
        coll.add("bar");
        coll.add("bar");
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void extractSingleton_add2208() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "extractSingleton_add2208");
        ArrayList<java.lang.String> coll = null;
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        coll = new ArrayList<java.lang.String>();
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        coll.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6770,null,6769,org.apache.commons.collections4.CollectionUtils.extractSingleton(coll));
        coll.add("bar");
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void extractSingleton() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "extractSingleton");
        ArrayList<java.lang.String> coll = null;
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        coll = new ArrayList<java.lang.String>();
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        coll.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6770,null,6769,org.apache.commons.collections4.CollectionUtils.extractSingleton(coll));
        coll.add("bar");
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void extractSingleton_literalMutation2130() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "extractSingleton_literalMutation2130");
        ArrayList<java.lang.String> coll = null;
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        coll = new ArrayList<java.lang.String>();
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        coll.add("foo");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6770,null,6769,org.apache.commons.collections4.CollectionUtils.extractSingleton(coll));
        coll.add("foo");
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void extractSingleton_remove1725() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "extractSingleton_remove1725");
        ArrayList<java.lang.String> coll = null;
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        coll = new ArrayList<java.lang.String>();
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6770,null,6769,org.apache.commons.collections4.CollectionUtils.extractSingleton(coll));
        coll.add("bar");
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void extractSingleton_remove1726() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "extractSingleton_remove1726");
        ArrayList<java.lang.String> coll = null;
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        coll = new ArrayList<java.lang.String>();
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6770,null,6769,org.apache.commons.collections4.CollectionUtils.extractSingleton(coll));
        coll.add("bar");
        try {
            org.apache.commons.collections4.CollectionUtils.extractSingleton(coll);
        } catch (final IllegalArgumentException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * Records the next object returned for a mock iterator
     */
private <T>void next(final Iterator<T> iterator, final T t) {
        expect(iterator.hasNext()).andReturn(true);
        expect(iterator.next()).andReturn(t);
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void collateException1() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "collateException1");
        org.apache.commons.collections4.CollectionUtils.collate(collectionA, null);
        org.apache.commons.collections4.CollectionUtils.collate(collectionA, null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void collateException1_remove1702() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "collateException1_remove1702");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void collateException2() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "collateException2");
        org.apache.commons.collections4.CollectionUtils.collate(collectionA, collectionC, null);
        org.apache.commons.collections4.CollectionUtils.collate(collectionA, collectionC, null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = IllegalArgumentException.class, timeout = 1000)
    public void collateException2_remove1703() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "collateException2_remove1703");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollate_add2291() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollate_add2291");
        List<java.lang.Integer> result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6971,result,6970,result.size());
        result = org.apache.commons.collections4.CollectionUtils.collate(collectionA, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6972,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6973,result);
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6974,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6975,result2);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>();
        combinedList.addAll(collectionD);
        combinedList.addAll(collectionD);
        combinedList.addAll(collectionE);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6976,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6977,result2);
        final Comparator<java.lang.Integer> reverseComparator = org.apache.commons.collections4.ComparatorUtils.reversedComparator(org.apache.commons.collections4.ComparatorUtils.<Integer>naturalComparator());
        result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6979,result,6978,result.size());
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionD)));
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionE)));
        java.util.Collections.reverse(combinedList);
        result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, reverseComparator);
        result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6980,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6981,result2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6982,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6983,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollate_add2292() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollate_add2292");
        List<java.lang.Integer> result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6971,result,6970,result.size());
        result = org.apache.commons.collections4.CollectionUtils.collate(collectionA, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6972,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6973,result);
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6974,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6975,result2);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>();
        combinedList.addAll(collectionD);
        combinedList.addAll(collectionE);
        combinedList.addAll(collectionE);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6976,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6977,result2);
        final Comparator<java.lang.Integer> reverseComparator = org.apache.commons.collections4.ComparatorUtils.reversedComparator(org.apache.commons.collections4.ComparatorUtils.<Integer>naturalComparator());
        result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6979,result,6978,result.size());
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionD)));
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionE)));
        java.util.Collections.reverse(combinedList);
        result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, reverseComparator);
        result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6980,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6981,result2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6982,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6983,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollate_add2293() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollate_add2293");
        List<java.lang.Integer> result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6971,result,6970,result.size());
        result = org.apache.commons.collections4.CollectionUtils.collate(collectionA, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6972,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6973,result);
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6974,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6975,result2);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>();
        combinedList.addAll(collectionD);
        combinedList.addAll(collectionE);
        java.util.Collections.sort(combinedList);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6976,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6977,result2);
        final Comparator<java.lang.Integer> reverseComparator = org.apache.commons.collections4.ComparatorUtils.reversedComparator(org.apache.commons.collections4.ComparatorUtils.<Integer>naturalComparator());
        result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6979,result,6978,result.size());
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionD)));
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionE)));
        java.util.Collections.reverse(combinedList);
        result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, reverseComparator);
        result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6980,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6981,result2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6982,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6983,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollate_add2294() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollate_add2294");
        List<java.lang.Integer> result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6971,result,6970,result.size());
        result = org.apache.commons.collections4.CollectionUtils.collate(collectionA, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6972,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6973,result);
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6974,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6975,result2);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>();
        combinedList.addAll(collectionD);
        combinedList.addAll(collectionE);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6976,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6977,result2);
        final Comparator<java.lang.Integer> reverseComparator = org.apache.commons.collections4.ComparatorUtils.reversedComparator(org.apache.commons.collections4.ComparatorUtils.<Integer>naturalComparator());
        result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6979,result,6978,result.size());
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionD)));
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionD)));
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionE)));
        java.util.Collections.reverse(combinedList);
        result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, reverseComparator);
        result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6980,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6981,result2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6982,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6983,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollate_add2295() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollate_add2295");
        List<java.lang.Integer> result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6971,result,6970,result.size());
        result = org.apache.commons.collections4.CollectionUtils.collate(collectionA, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6972,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6973,result);
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6974,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6975,result2);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>();
        combinedList.addAll(collectionD);
        combinedList.addAll(collectionE);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6976,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6977,result2);
        final Comparator<java.lang.Integer> reverseComparator = org.apache.commons.collections4.ComparatorUtils.reversedComparator(org.apache.commons.collections4.ComparatorUtils.<Integer>naturalComparator());
        result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6979,result,6978,result.size());
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionD)));
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionE)));
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionE)));
        java.util.Collections.reverse(combinedList);
        result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, reverseComparator);
        result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6980,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6981,result2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6982,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6983,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollate_add2296() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollate_add2296");
        List<java.lang.Integer> result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6971,result,6970,result.size());
        result = org.apache.commons.collections4.CollectionUtils.collate(collectionA, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6972,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6973,result);
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6974,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6975,result2);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>();
        combinedList.addAll(collectionD);
        combinedList.addAll(collectionE);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6976,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6977,result2);
        final Comparator<java.lang.Integer> reverseComparator = org.apache.commons.collections4.ComparatorUtils.reversedComparator(org.apache.commons.collections4.ComparatorUtils.<Integer>naturalComparator());
        result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6979,result,6978,result.size());
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionD)));
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionE)));
        java.util.Collections.reverse(combinedList);
        java.util.Collections.reverse(combinedList);
        result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, reverseComparator);
        result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6980,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6981,result2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6982,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6983,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollate_remove1801() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollate_remove1801");
        List<java.lang.Integer> result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6971,result,6970,result.size());
        result = org.apache.commons.collections4.CollectionUtils.collate(collectionA, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6972,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6973,result);
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6974,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6975,result2);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>();
        combinedList.addAll(collectionE);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6976,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6977,result2);
        final Comparator<java.lang.Integer> reverseComparator = org.apache.commons.collections4.ComparatorUtils.reversedComparator(org.apache.commons.collections4.ComparatorUtils.<Integer>naturalComparator());
        result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6979,result,6978,result.size());
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionD)));
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionE)));
        java.util.Collections.reverse(combinedList);
        result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, reverseComparator);
        result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6980,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6981,result2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6982,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6983,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollate_remove1802() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollate_remove1802");
        List<java.lang.Integer> result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6971,result,6970,result.size());
        result = org.apache.commons.collections4.CollectionUtils.collate(collectionA, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6972,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6973,result);
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6974,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6975,result2);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>();
        combinedList.addAll(collectionE);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6976,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6977,result2);
        final Comparator<java.lang.Integer> reverseComparator = org.apache.commons.collections4.ComparatorUtils.reversedComparator(org.apache.commons.collections4.ComparatorUtils.<Integer>naturalComparator());
        result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6979,result,6978,result.size());
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionD)));
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionE)));
        java.util.Collections.reverse(combinedList);
        result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, reverseComparator);
        result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6980,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6981,result2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6982,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6983,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollate_remove1803() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollate_remove1803");
        List<java.lang.Integer> result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6971,result,6970,result.size());
        result = org.apache.commons.collections4.CollectionUtils.collate(collectionA, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6972,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6973,result);
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6974,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6975,result2);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>();
        combinedList.addAll(collectionD);
        combinedList.addAll(collectionE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6976,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6977,result2);
        final Comparator<java.lang.Integer> reverseComparator = org.apache.commons.collections4.ComparatorUtils.reversedComparator(org.apache.commons.collections4.ComparatorUtils.<Integer>naturalComparator());
        result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6979,result,6978,result.size());
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionD)));
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionE)));
        java.util.Collections.reverse(combinedList);
        result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, reverseComparator);
        result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6980,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6981,result2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6982,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6983,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollate_remove1804() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollate_remove1804");
        List<java.lang.Integer> result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6971,result,6970,result.size());
        result = org.apache.commons.collections4.CollectionUtils.collate(collectionA, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6972,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6973,result);
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6974,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6975,result2);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>();
        combinedList.addAll(collectionD);
        combinedList.addAll(collectionE);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6976,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6977,result2);
        final Comparator<java.lang.Integer> reverseComparator = org.apache.commons.collections4.ComparatorUtils.reversedComparator(org.apache.commons.collections4.ComparatorUtils.<Integer>naturalComparator());
        result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6979,result,6978,result.size());
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionE)));
        java.util.Collections.reverse(combinedList);
        result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, reverseComparator);
        result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6980,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6981,result2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6982,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6983,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollate_remove1805() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollate_remove1805");
        List<java.lang.Integer> result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6971,result,6970,result.size());
        result = org.apache.commons.collections4.CollectionUtils.collate(collectionA, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6972,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6973,result);
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6974,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6975,result2);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>();
        combinedList.addAll(collectionD);
        combinedList.addAll(collectionE);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6976,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6977,result2);
        final Comparator<java.lang.Integer> reverseComparator = org.apache.commons.collections4.ComparatorUtils.reversedComparator(org.apache.commons.collections4.ComparatorUtils.<Integer>naturalComparator());
        result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6979,result,6978,result.size());
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionE)));
        java.util.Collections.reverse(combinedList);
        result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, reverseComparator);
        result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6980,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6981,result2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6982,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6983,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollate_remove1806() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollate_remove1806");
        List<java.lang.Integer> result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6971,result,6970,result.size());
        result = org.apache.commons.collections4.CollectionUtils.collate(collectionA, emptyCollection);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6972,collectionA);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6973,result);
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6974,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6975,result2);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>();
        combinedList.addAll(collectionD);
        combinedList.addAll(collectionE);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6976,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6977,result2);
        final Comparator<java.lang.Integer> reverseComparator = org.apache.commons.collections4.ComparatorUtils.reversedComparator(org.apache.commons.collections4.ComparatorUtils.<Integer>naturalComparator());
        result = org.apache.commons.collections4.CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6979,result,6978,result.size());
        java.util.Collections.reverse(((List<java.lang.Integer>)(collectionE)));
        java.util.Collections.reverse(combinedList);
        result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, reverseComparator);
        result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, reverseComparator);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6980,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6981,result2);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6982,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6983,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollateIgnoreDuplicates_add2297() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollateIgnoreDuplicates_add2297");
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, false);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, false);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6966,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6967,result2);
        Set<java.lang.Integer> combinedSet = new HashSet<java.lang.Integer>();
        combinedSet.addAll(collectionD);
        combinedSet.addAll(collectionD);
        combinedSet.addAll(collectionE);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>(combinedSet);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6968,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6969,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollateIgnoreDuplicates_add2298() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollateIgnoreDuplicates_add2298");
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, false);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, false);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6966,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6967,result2);
        Set<java.lang.Integer> combinedSet = new HashSet<java.lang.Integer>();
        combinedSet.addAll(collectionD);
        combinedSet.addAll(collectionE);
        combinedSet.addAll(collectionE);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>(combinedSet);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6968,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6969,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollateIgnoreDuplicates_add2299() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollateIgnoreDuplicates_add2299");
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, false);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, false);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6966,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6967,result2);
        Set<java.lang.Integer> combinedSet = new HashSet<java.lang.Integer>();
        combinedSet.addAll(collectionD);
        combinedSet.addAll(collectionE);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>(combinedSet);
        java.util.Collections.sort(combinedList);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6968,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6969,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testCollate() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollate");
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, false);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, false);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6966,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6967,result2);
        Set<java.lang.Integer> combinedSet = new HashSet<java.lang.Integer>();
        combinedSet.addAll(collectionD);
        combinedSet.addAll(collectionE);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>(combinedSet);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6968,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6969,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testCollateIgnoreDuplicates() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollateIgnoreDuplicates");
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, false);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6966,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6967,result2);
        Set<java.lang.Integer> combinedSet = new HashSet<java.lang.Integer>();
        combinedSet.addAll(collectionD);
        combinedSet.addAll(collectionE);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>(combinedSet);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6968,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6969,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollateIgnoreDuplicates_remove1807() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollateIgnoreDuplicates_remove1807");
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, false);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, false);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6966,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6967,result2);
        Set<java.lang.Integer> combinedSet = new HashSet<java.lang.Integer>();
        combinedSet.addAll(collectionE);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>(combinedSet);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6968,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6969,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollateIgnoreDuplicates_remove1808() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollateIgnoreDuplicates_remove1808");
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, false);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, false);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6966,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6967,result2);
        Set<java.lang.Integer> combinedSet = new HashSet<java.lang.Integer>();
        combinedSet.addAll(collectionE);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>(combinedSet);
        java.util.Collections.sort(combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6968,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6969,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCollateIgnoreDuplicates_remove1809() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCollateIgnoreDuplicates_remove1809");
        List<java.lang.Integer> result1 = org.apache.commons.collections4.CollectionUtils.collate(collectionD, collectionE, false);
        List<java.lang.Integer> result2 = org.apache.commons.collections4.CollectionUtils.collate(collectionE, collectionD, false);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6966,result1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6967,result2);
        Set<java.lang.Integer> combinedSet = new HashSet<java.lang.Integer>();
        combinedSet.addAll(collectionD);
        combinedSet.addAll(collectionE);
        List<java.lang.Integer> combinedList = new ArrayList<java.lang.Integer>(combinedSet);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6968,combinedList);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),6969,result2);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = NullPointerException.class, timeout = 1000)
    public void testPermutationsWithNullCollection() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPermutationsWithNullCollection");
        org.apache.commons.collections4.CollectionUtils.permutations(null);
        org.apache.commons.collections4.CollectionUtils.permutations(null);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(expected = NullPointerException.class, timeout = 1000)
    public void testPermutationsWithNullCollection_remove1840() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPermutationsWithNullCollection_remove1840");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testPermutations() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPermutations");
        List<java.lang.Integer> sample = collectionA.subList(-1, 5);
        Collection<java.util.List<java.lang.Integer>> permutations = org.apache.commons.collections4.CollectionUtils.permutations(sample);
        int collSize = sample.size();
        int factorial = 1;
        for (int i = 1 ; i <= collSize ; i++) {
            factorial *= i;
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7108,factorial);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7110,permutations,7109,permutations.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testPermutations_literalMutation2279() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPermutations_literalMutation2279");
        List<java.lang.Integer> sample = collectionA.subList(0, 6);
        Collection<java.util.List<java.lang.Integer>> permutations = org.apache.commons.collections4.CollectionUtils.permutations(sample);
        int collSize = sample.size();
        int factorial = 1;
        for (int i = 1 ; i <= collSize ; i++) {
            factorial *= i;
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7108,factorial);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7110,permutations,7109,permutations.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testPermutations_literalMutation2280() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPermutations_literalMutation2280");
        List<java.lang.Integer> sample = collectionA.subList(0, 5);
        Collection<java.util.List<java.lang.Integer>> permutations = org.apache.commons.collections4.CollectionUtils.permutations(sample);
        int collSize = sample.size();
        int factorial = 2;
        for (int i = 1 ; i <= collSize ; i++) {
            factorial *= i;
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7108,factorial);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7110,permutations,7109,permutations.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testPermutations_literalMutation2281() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPermutations_literalMutation2281");
        List<java.lang.Integer> sample = collectionA.subList(0, 5);
        Collection<java.util.List<java.lang.Integer>> permutations = org.apache.commons.collections4.CollectionUtils.permutations(sample);
        int collSize = sample.size();
        int factorial = 1;
        for (int i = 2 ; i <= collSize ; i++) {
            factorial *= i;
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7108,factorial);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7110,permutations,7109,permutations.size());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMatchesAll_add2328() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMatchesAll_add2328");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7097,null,7096,org.apache.commons.collections4.CollectionUtils.matchesAll(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7099,null,7098,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, null));
        Predicate<java.lang.Integer> lessThanFive = new Predicate<java.lang.Integer>() {
            public boolean evaluate(Integer object) {
                return object < 5;
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7101,null,7100,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, lessThanFive));
        Predicate<java.lang.Integer> lessThanFour = new Predicate<java.lang.Integer>() {
            public boolean evaluate(Integer object) {
                return object < 4;
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7103,null,7102,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7105,null,7104,org.apache.commons.collections4.CollectionUtils.matchesAll(null, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7107,null,7106,org.apache.commons.collections4.CollectionUtils.matchesAll(emptyCollection, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMatchesAll_add2329() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMatchesAll_add2329");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7097,null,7096,org.apache.commons.collections4.CollectionUtils.matchesAll(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7099,null,7098,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, null));
        Predicate<java.lang.Integer> lessThanFive = new Predicate<java.lang.Integer>() {
            public boolean evaluate(Integer object) {
                return object < 5;
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7101,null,7100,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, lessThanFive));
        Predicate<java.lang.Integer> lessThanFour = new Predicate<java.lang.Integer>() {
            public boolean evaluate(Integer object) {
                return object < 4;
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7103,null,7102,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7105,null,7104,org.apache.commons.collections4.CollectionUtils.matchesAll(null, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7107,null,7106,org.apache.commons.collections4.CollectionUtils.matchesAll(emptyCollection, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testMatchesAll() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMatchesAll");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7097,null,7096,org.apache.commons.collections4.CollectionUtils.matchesAll(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7099,null,7098,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, null));
        Predicate<java.lang.Integer> lessThanFive = new Predicate<java.lang.Integer>() {
            public boolean evaluate(Integer object) {
                return object < 4;
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7101,null,7100,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, lessThanFive));
        Predicate<java.lang.Integer> lessThanFour = new Predicate<java.lang.Integer>() {
            public boolean evaluate(Integer object) {
                return object < 4;
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7103,null,7102,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7105,null,7104,org.apache.commons.collections4.CollectionUtils.matchesAll(null, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7107,null,7106,org.apache.commons.collections4.CollectionUtils.matchesAll(emptyCollection, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test
    public void testMatchesAll_literalMutation2277() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMatchesAll_literalMutation2277");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7097,null,7096,org.apache.commons.collections4.CollectionUtils.matchesAll(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7099,null,7098,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, null));
        Predicate<java.lang.Integer> lessThanFive = new Predicate<java.lang.Integer>() {
            public boolean evaluate(Integer object) {
                return object < 5;
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7101,null,7100,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, lessThanFive));
        Predicate<java.lang.Integer> lessThanFour = new Predicate<java.lang.Integer>() {
            public boolean evaluate(Integer object) {
                return object < 3;
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7103,null,7102,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7105,null,7104,org.apache.commons.collections4.CollectionUtils.matchesAll(null, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7107,null,7106,org.apache.commons.collections4.CollectionUtils.matchesAll(emptyCollection, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMatchesAll_remove1838() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMatchesAll_remove1838");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7097,null,7096,org.apache.commons.collections4.CollectionUtils.matchesAll(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7099,null,7098,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, null));
        Predicate<java.lang.Integer> lessThanFive = new Predicate<java.lang.Integer>() {
            public boolean evaluate(Integer object) {
                return object < 5;
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7101,null,7100,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, lessThanFive));
        Predicate<java.lang.Integer> lessThanFour = new Predicate<java.lang.Integer>() {
            public boolean evaluate(Integer object) {
                return object < 4;
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7103,null,7102,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7105,null,7104,org.apache.commons.collections4.CollectionUtils.matchesAll(null, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7107,null,7106,org.apache.commons.collections4.CollectionUtils.matchesAll(emptyCollection, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMatchesAll_remove1839() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMatchesAll_remove1839");
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7097,null,7096,org.apache.commons.collections4.CollectionUtils.matchesAll(null, null));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7099,null,7098,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, null));
        Predicate<java.lang.Integer> lessThanFive = new Predicate<java.lang.Integer>() {
            public boolean evaluate(Integer object) {
                return object < 5;
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7101,null,7100,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, lessThanFive));
        Predicate<java.lang.Integer> lessThanFour = new Predicate<java.lang.Integer>() {
            public boolean evaluate(Integer object) {
                return object < 4;
            }
        };
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7103,null,7102,org.apache.commons.collections4.CollectionUtils.matchesAll(collectionA, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7105,null,7104,org.apache.commons.collections4.CollectionUtils.matchesAll(null, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),7107,null,7106,org.apache.commons.collections4.CollectionUtils.matchesAll(emptyCollection, lessThanFour));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }
}

