package com.google.gson.stream;

import java.io.EOFException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.junit.Test;
import junit.framework.TestCase;

@SuppressWarnings(value = "resource")
public final class JsonReaderTest extends TestCase {
    @Test(timeout = 1000)
    public void testReadArray_add570() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadArray_add570");
        JsonReader reader = new JsonReader(reader("[true, true]"));
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),707,reader,706,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),709,reader,708,reader.nextBoolean());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),710,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),712,reader,711,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testReadArray_add571() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadArray_add571");
        JsonReader reader = new JsonReader(reader("[true, true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),707,reader,706,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),709,reader,708,reader.nextBoolean());
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),710,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),712,reader,711,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testReadArray() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadArray");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),707,reader,706,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),709,reader,708,reader.nextBoolean());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),710,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),712,reader,711,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testReadArray_remove484() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadArray_remove484");
        JsonReader reader = new JsonReader(reader("[true, true]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),707,reader,706,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),709,reader,708,reader.nextBoolean());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),710,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),712,reader,711,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testReadArray_remove485() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadArray_remove485");
        JsonReader reader = new JsonReader(reader("[true, true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),707,reader,706,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),709,reader,708,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),710,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),712,reader,711,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testReadEmptyArray_add572() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadEmptyArray_add572");
        JsonReader reader = new JsonReader(reader("[]"));
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),714,reader,713,reader.hasNext());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),715,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),717,reader,716,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testReadEmptyArray_add573() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadEmptyArray_add573");
        JsonReader reader = new JsonReader(reader("[]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),714,reader,713,reader.hasNext());
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),715,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),717,reader,716,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testReadEmptyArray() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadEmptyArray");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),714,reader,713,reader.hasNext());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),715,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),717,reader,716,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testReadEmptyArray_remove486() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadEmptyArray_remove486");
        JsonReader reader = new JsonReader(reader("[]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),714,reader,713,reader.hasNext());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),715,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),717,reader,716,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testReadEmptyArray_remove487() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadEmptyArray_remove487");
        JsonReader reader = new JsonReader(reader("[]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),714,reader,713,reader.hasNext());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),715,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),717,reader,716,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testReadObject_add576() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadObject_add576");
        JsonReader reader = new JsonReader(reader("{\"a\": \"android\", \"b\": \"banana\"}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),724,reader,723,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),726,reader,725,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),728,reader,727,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),730,reader,729,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),731,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),733,reader,732,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testReadObject_add577() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadObject_add577");
        JsonReader reader = new JsonReader(reader("{\"a\": \"android\", \"b\": \"banana\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),724,reader,723,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),726,reader,725,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),728,reader,727,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),730,reader,729,reader.nextString());
        reader.endObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),731,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),733,reader,732,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testReadObject() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadObject");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),724,reader,723,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),726,reader,725,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),728,reader,727,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),730,reader,729,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),731,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),733,reader,732,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testReadObject_remove490() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadObject_remove490");
        JsonReader reader = new JsonReader(reader("{\"a\": \"android\", \"b\": \"banana\"}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),724,reader,723,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),726,reader,725,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),728,reader,727,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),730,reader,729,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),731,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),733,reader,732,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testReadObject_remove491() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadObject_remove491");
        JsonReader reader = new JsonReader(reader("{\"a\": \"android\", \"b\": \"banana\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),724,reader,723,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),726,reader,725,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),728,reader,727,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),730,reader,729,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),731,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),733,reader,732,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testReadEmptyObject_add574() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadEmptyObject_add574");
        JsonReader reader = new JsonReader(reader("{}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),719,reader,718,reader.hasNext());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),720,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),722,reader,721,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testReadEmptyObject_add575() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadEmptyObject_add575");
        JsonReader reader = new JsonReader(reader("{}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),719,reader,718,reader.hasNext());
        reader.endObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),720,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),722,reader,721,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testReadEmptyObject() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadEmptyObject");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),719,reader,718,reader.hasNext());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),720,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),722,reader,721,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testReadEmptyObject_remove488() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadEmptyObject_remove488");
        JsonReader reader = new JsonReader(reader("{}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),719,reader,718,reader.hasNext());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),720,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),722,reader,721,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testReadEmptyObject_remove489() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadEmptyObject_remove489");
        JsonReader reader = new JsonReader(reader("{}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),719,reader,718,reader.hasNext());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),720,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),722,reader,721,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipArray_add578() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipArray_add578");
        JsonReader reader = new JsonReader(reader("{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),747,reader,746,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),749,reader,748,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),751,reader,750,reader.nextInt());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),752,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),754,reader,753,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }



    @Test(timeout = 1000)
    public void testSkipArray_add580() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipArray_add580");
        JsonReader reader = new JsonReader(reader("{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),747,reader,746,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),749,reader,748,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),751,reader,750,reader.nextInt());
        reader.endObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),752,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),754,reader,753,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipArray() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipArray");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),747,reader,746,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),749,reader,748,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),751,reader,750,reader.nextInt());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),752,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),754,reader,753,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipArray_remove492() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipArray_remove492");
        JsonReader reader = new JsonReader(reader("{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),747,reader,746,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),749,reader,748,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),751,reader,750,reader.nextInt());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),752,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),754,reader,753,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipArray_remove493() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipArray_remove493");
        JsonReader reader = new JsonReader(reader("{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),747,reader,746,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),749,reader,748,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),751,reader,750,reader.nextInt());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),752,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),754,reader,753,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipArray_remove494() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipArray_remove494");
        JsonReader reader = new JsonReader(reader("{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),747,reader,746,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),749,reader,748,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),751,reader,750,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),752,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),754,reader,753,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipArrayAfterPeek() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipArrayAfterPeek");
        JsonReader reader = new JsonReader(reader("{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),735,reader,734,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),736,com.google.gson.stream.JsonToken.BEGIN_ARRAY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),738,reader,737,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),740,reader,739,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),742,reader,741,reader.nextInt());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),743,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),745,reader,744,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipArrayAfterPeek_add581() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipArrayAfterPeek_add581");
        JsonReader reader = new JsonReader(reader("{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),735,reader,734,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),736,com.google.gson.stream.JsonToken.BEGIN_ARRAY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),738,reader,737,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),740,reader,739,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),742,reader,741,reader.nextInt());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),743,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),745,reader,744,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }


    @Test(timeout = 1000)
    public void testSkipArrayAfterPeek_add583() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipArrayAfterPeek_add583");
        JsonReader reader = new JsonReader(reader("{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),735,reader,734,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),736,com.google.gson.stream.JsonToken.BEGIN_ARRAY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),738,reader,737,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),740,reader,739,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),742,reader,741,reader.nextInt());
        reader.endObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),743,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),745,reader,744,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipArrayAfterPeek_literalMutation535() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipArrayAfterPeek_literalMutation535");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),735,reader,734,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),736,com.google.gson.stream.JsonToken.BEGIN_ARRAY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),738,reader,737,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),740,reader,739,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),742,reader,741,reader.nextInt());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),743,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),745,reader,744,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipArrayAfterPeek_remove495() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipArrayAfterPeek_remove495");
        JsonReader reader = new JsonReader(reader("{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),735,reader,734,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),736,com.google.gson.stream.JsonToken.BEGIN_ARRAY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),738,reader,737,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),740,reader,739,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),742,reader,741,reader.nextInt());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),743,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),745,reader,744,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipArrayAfterPeek_remove496() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipArrayAfterPeek_remove496");
        JsonReader reader = new JsonReader(reader("{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),735,reader,734,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),736,com.google.gson.stream.JsonToken.BEGIN_ARRAY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),738,reader,737,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),740,reader,739,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),742,reader,741,reader.nextInt());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),743,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),745,reader,744,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipArrayAfterPeek_remove497() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipArrayAfterPeek_remove497");
        JsonReader reader = new JsonReader(reader("{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),735,reader,734,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),736,com.google.gson.stream.JsonToken.BEGIN_ARRAY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),738,reader,737,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),740,reader,739,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),742,reader,741,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),743,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),745,reader,744,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }


    public void testSkipTopLevelObject() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipTopLevelObject");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),782,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),784,reader,783,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipTopLevelObject_remove515() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipTopLevelObject_remove515");
        JsonReader reader = new JsonReader(reader("{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),782,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),784,reader,783,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipObject_add592() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObject_add592");
        JsonReader reader = new JsonReader(reader("{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),776,reader,775,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),778,reader,777,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),779,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),781,reader,780,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }




    @Test(timeout = 1000)
    public void testSkipObject_add595() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObject_add595");
        JsonReader reader = new JsonReader(reader("{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),776,reader,775,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),778,reader,777,reader.nextName());
        reader.skipValue();
        reader.endObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),779,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),781,reader,780,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipObject() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObject");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),776,reader,775,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),778,reader,777,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),779,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),781,reader,780,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipObject_remove506() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObject_remove506");
        JsonReader reader = new JsonReader(reader("{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),776,reader,775,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),778,reader,777,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),779,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),781,reader,780,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipObject_remove507() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObject_remove507");
        JsonReader reader = new JsonReader(reader("{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),776,reader,775,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),778,reader,777,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),779,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),781,reader,780,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipObject_remove508() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObject_remove508");
        JsonReader reader = new JsonReader(reader("{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),776,reader,775,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),778,reader,777,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),779,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),781,reader,780,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipObject_remove509() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObject_remove509");
        JsonReader reader = new JsonReader(reader("{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),776,reader,775,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),778,reader,777,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),779,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),781,reader,780,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipObjectAfterPeek_add596() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObjectAfterPeek_add596");
        String json = "{" + ("  \"one\": { \"num\": 1 }" + (", \"two\": { \"num\": 2 }" + (", \"three\": { \"num\": 3 }" + "}")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),766,reader,765,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),767,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),5,reader,4,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),769,reader,768,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),770,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),772,reader,771,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),774,reader,773,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),21,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),23,reader,22,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }




    @Test(timeout = 1000)
    public void testSkipObjectAfterPeek_add600() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObjectAfterPeek_add600");
        String json = "{" + ("  \"one\": { \"num\": 1 }" + (", \"two\": { \"num\": 2 }" + (", \"three\": { \"num\": 3 }" + "}")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),766,reader,765,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),767,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),5,reader,4,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),769,reader,768,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),770,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),772,reader,771,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),774,reader,773,reader.nextName());
        reader.skipValue();
        reader.endObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),21,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),23,reader,22,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipObjectAfterPeek() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObjectAfterPeek");
        String json = "foo" + ("  \"one\": { \"num\": 1 }" + (", \"two\": { \"num\": 2 }" + (", \"three\": { \"num\": 3 }" + "}")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),766,reader,765,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),767,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),5,reader,4,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),769,reader,768,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),770,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),772,reader,771,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),774,reader,773,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),21,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),23,reader,22,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipObjectAfterPeek_literalMutation540() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObjectAfterPeek_literalMutation540");
        String json = "{" + ("foo" + (", \"two\": { \"num\": 2 }" + (", \"three\": { \"num\": 3 }" + "}")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),766,reader,765,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),767,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),5,reader,4,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),769,reader,768,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),770,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),772,reader,771,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),774,reader,773,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),21,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),23,reader,22,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipObjectAfterPeek_literalMutation541() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObjectAfterPeek_literalMutation541");
        String json = "{" + ("  \"one\": { \"num\": 1 }" + ("foo" + (", \"three\": { \"num\": 3 }" + "}")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),766,reader,765,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),767,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),5,reader,4,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),769,reader,768,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),770,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),772,reader,771,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),774,reader,773,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),21,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),23,reader,22,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipObjectAfterPeek_literalMutation542() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObjectAfterPeek_literalMutation542");
        String json = "{" + ("  \"one\": { \"num\": 1 }" + (", \"two\": { \"num\": 2 }" + ("foo" + "}")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),766,reader,765,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),767,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),5,reader,4,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),769,reader,768,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),770,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),772,reader,771,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),774,reader,773,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),21,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),23,reader,22,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipObjectAfterPeek_literalMutation543() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObjectAfterPeek_literalMutation543");
        String json = "{" + ("  \"one\": { \"num\": 1 }" + (", \"two\": { \"num\": 2 }" + (", \"three\": { \"num\": 3 }" + "foo")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),766,reader,765,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),767,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),5,reader,4,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),769,reader,768,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),770,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),772,reader,771,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),774,reader,773,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),21,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),23,reader,22,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipObjectAfterPeek_remove510() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObjectAfterPeek_remove510");
        String json = "{" + ("  \"one\": { \"num\": 1 }" + (", \"two\": { \"num\": 2 }" + (", \"three\": { \"num\": 3 }" + "}")));
        JsonReader reader = new JsonReader(reader(json));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),766,reader,765,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),767,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),5,reader,4,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),769,reader,768,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),770,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),772,reader,771,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),774,reader,773,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),21,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),23,reader,22,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipObjectAfterPeek_remove511() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObjectAfterPeek_remove511");
        String json = "{" + ("  \"one\": { \"num\": 1 }" + (", \"two\": { \"num\": 2 }" + (", \"three\": { \"num\": 3 }" + "}")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),766,reader,765,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),767,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),5,reader,4,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),769,reader,768,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),770,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),772,reader,771,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),774,reader,773,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),21,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),23,reader,22,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipObjectAfterPeek_remove512() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObjectAfterPeek_remove512");
        String json = "{" + ("  \"one\": { \"num\": 1 }" + (", \"two\": { \"num\": 2 }" + (", \"three\": { \"num\": 3 }" + "}")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),766,reader,765,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),767,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),5,reader,4,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),769,reader,768,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),770,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),772,reader,771,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),774,reader,773,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),21,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),23,reader,22,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipObjectAfterPeek_remove513() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObjectAfterPeek_remove513");
        String json = "{" + ("  \"one\": { \"num\": 1 }" + (", \"two\": { \"num\": 2 }" + (", \"three\": { \"num\": 3 }" + "}")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),766,reader,765,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),767,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),5,reader,4,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),769,reader,768,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),770,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),772,reader,771,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),774,reader,773,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),21,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),23,reader,22,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipObjectAfterPeek_remove514() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipObjectAfterPeek_remove514");
        String json = "{" + ("  \"one\": { \"num\": 1 }" + (", \"two\": { \"num\": 2 }" + (", \"three\": { \"num\": 3 }" + "}")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),766,reader,765,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),767,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),5,reader,4,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),769,reader,768,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),770,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),772,reader,771,reader.peek());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),774,reader,773,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),21,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),23,reader,22,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipInteger_add588() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipInteger_add588");
        JsonReader reader = new JsonReader(reader("{\"a\":123456789,\"b\":-123456789}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),763,reader,762,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),61,reader,60,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),764,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),69,reader,68,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }



    @Test(timeout = 1000)
    public void testSkipInteger_add591() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipInteger_add591");
        JsonReader reader = new JsonReader(reader("{\"a\":123456789,\"b\":-123456789}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),763,reader,762,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),61,reader,60,reader.nextName());
        reader.skipValue();
        reader.endObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),764,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),69,reader,68,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipInteger() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipInteger");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),763,reader,762,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),61,reader,60,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),764,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),69,reader,68,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipInteger_remove502() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipInteger_remove502");
        JsonReader reader = new JsonReader(reader("{\"a\":123456789,\"b\":-123456789}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),763,reader,762,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),61,reader,60,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),764,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),69,reader,68,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipInteger_remove503() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipInteger_remove503");
        JsonReader reader = new JsonReader(reader("{\"a\":123456789,\"b\":-123456789}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),763,reader,762,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),61,reader,60,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),764,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),69,reader,68,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipInteger_remove504() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipInteger_remove504");
        JsonReader reader = new JsonReader(reader("{\"a\":123456789,\"b\":-123456789}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),763,reader,762,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),61,reader,60,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),764,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),69,reader,68,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipInteger_remove505() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipInteger_remove505");
        JsonReader reader = new JsonReader(reader("{\"a\":123456789,\"b\":-123456789}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),763,reader,762,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),61,reader,60,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),764,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),69,reader,68,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipDouble_add584() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipDouble_add584");
        JsonReader reader = new JsonReader(reader("{\"a\":-123.456e-789,\"b\":123456789.0}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),756,reader,755,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),758,reader,757,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),759,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),761,reader,760,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }




    @Test(timeout = 1000)
    public void testSkipDouble_add587() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipDouble_add587");
        JsonReader reader = new JsonReader(reader("{\"a\":-123.456e-789,\"b\":123456789.0}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),756,reader,755,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),758,reader,757,reader.nextName());
        reader.skipValue();
        reader.endObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),759,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),761,reader,760,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipDouble() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipDouble");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),756,reader,755,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),758,reader,757,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),759,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),761,reader,760,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipDouble_remove498() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipDouble_remove498");
        JsonReader reader = new JsonReader(reader("{\"a\":-123.456e-789,\"b\":123456789.0}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),756,reader,755,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),758,reader,757,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),759,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),761,reader,760,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipDouble_remove499() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipDouble_remove499");
        JsonReader reader = new JsonReader(reader("{\"a\":-123.456e-789,\"b\":123456789.0}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),756,reader,755,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),758,reader,757,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),759,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),761,reader,760,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipDouble_remove500() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipDouble_remove500");
        JsonReader reader = new JsonReader(reader("{\"a\":-123.456e-789,\"b\":123456789.0}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),756,reader,755,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),758,reader,757,reader.nextName());
        reader.skipValue();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),759,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),761,reader,760,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipDouble_remove501() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipDouble_remove501");
        JsonReader reader = new JsonReader(reader("{\"a\":-123.456e-789,\"b\":123456789.0}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),756,reader,755,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),758,reader,757,reader.nextName());
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),759,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),761,reader,760,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testHelloWorld_add373() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHelloWorld_add373");
        String json = "{\n" + ("   \"hello\": true,\n" + ("   \"foo\": [\"world\"]\n" + "}"));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),509,reader,508,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),511,reader,510,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),513,reader,512,reader.nextName());
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),515,reader,514,reader.nextString());
        reader.endArray();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),516,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),518,reader,517,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testHelloWorld_add374() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHelloWorld_add374");
        String json = "{\n" + ("   \"hello\": true,\n" + ("   \"foo\": [\"world\"]\n" + "}"));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),509,reader,508,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),511,reader,510,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),513,reader,512,reader.nextName());
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),515,reader,514,reader.nextString());
        reader.endArray();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),516,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),518,reader,517,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testHelloWorld_add375() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHelloWorld_add375");
        String json = "{\n" + ("   \"hello\": true,\n" + ("   \"foo\": [\"world\"]\n" + "}"));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),509,reader,508,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),511,reader,510,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),513,reader,512,reader.nextName());
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),515,reader,514,reader.nextString());
        reader.endArray();
        reader.endArray();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),516,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),518,reader,517,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testHelloWorld_add376() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHelloWorld_add376");
        String json = "{\n" + ("   \"hello\": true,\n" + ("   \"foo\": [\"world\"]\n" + "}"));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),509,reader,508,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),511,reader,510,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),513,reader,512,reader.nextName());
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),515,reader,514,reader.nextString());
        reader.endArray();
        reader.endObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),516,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),518,reader,517,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testHelloWorld() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHelloWorld");
        String json = "foo" + ("   \"hello\": true,\n" + ("   \"foo\": [\"world\"]\n" + "}"));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),509,reader,508,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),511,reader,510,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),513,reader,512,reader.nextName());
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),515,reader,514,reader.nextString());
        reader.endArray();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),516,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),518,reader,517,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testHelloWorld_literalMutation378() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHelloWorld_literalMutation378");
        String json = "{\n" + ("foo" + ("   \"foo\": [\"world\"]\n" + "}"));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),509,reader,508,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),511,reader,510,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),513,reader,512,reader.nextName());
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),515,reader,514,reader.nextString());
        reader.endArray();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),516,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),518,reader,517,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testHelloWorld_literalMutation379() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHelloWorld_literalMutation379");
        String json = "{\n" + ("   \"hello\": true,\n" + ("foo" + "}"));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),509,reader,508,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),511,reader,510,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),513,reader,512,reader.nextName());
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),515,reader,514,reader.nextString());
        reader.endArray();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),516,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),518,reader,517,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testHelloWorld_literalMutation380() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHelloWorld_literalMutation380");
        String json = "{\n" + ("   \"hello\": true,\n" + ("   \"foo\": [\"world\"]\n" + "foo"));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),509,reader,508,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),511,reader,510,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),513,reader,512,reader.nextName());
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),515,reader,514,reader.nextString());
        reader.endArray();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),516,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),518,reader,517,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testHelloWorld_remove321() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHelloWorld_remove321");
        String json = "{\n" + ("   \"hello\": true,\n" + ("   \"foo\": [\"world\"]\n" + "}"));
        JsonReader reader = new JsonReader(reader(json));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),509,reader,508,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),511,reader,510,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),513,reader,512,reader.nextName());
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),515,reader,514,reader.nextString());
        reader.endArray();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),516,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),518,reader,517,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testHelloWorld_remove322() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHelloWorld_remove322");
        String json = "{\n" + ("   \"hello\": true,\n" + ("   \"foo\": [\"world\"]\n" + "}"));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),509,reader,508,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),511,reader,510,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),513,reader,512,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),515,reader,514,reader.nextString());
        reader.endArray();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),516,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),518,reader,517,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testHelloWorld_remove323() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHelloWorld_remove323");
        String json = "{\n" + ("   \"hello\": true,\n" + ("   \"foo\": [\"world\"]\n" + "}"));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),509,reader,508,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),511,reader,510,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),513,reader,512,reader.nextName());
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),515,reader,514,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),516,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),518,reader,517,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testHelloWorld_remove324() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHelloWorld_remove324");
        String json = "{\n" + ("   \"hello\": true,\n" + ("   \"foo\": [\"world\"]\n" + "}"));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),509,reader,508,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),511,reader,510,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),513,reader,512,reader.nextName());
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),515,reader,514,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),516,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),518,reader,517,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testNulls() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNulls");
        try {
            new JsonReader(null);
        } catch (NullPointerException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testEmptyString_add343() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmptyString_add343");
        try {
            new JsonReader(reader("")).beginArray();
            new JsonReader(reader("")).beginArray();
        } catch (IOException expected) {
        }
        try {
            new JsonReader(reader("")).beginObject();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testEmptyString_add344() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmptyString_add344");
        try {
            new JsonReader(reader("")).beginArray();
        } catch (IOException expected) {
        }
        try {
            new JsonReader(reader("")).beginObject();
            new JsonReader(reader("")).beginObject();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testEmptyString() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmptyString");
        try {
            new JsonReader(reader("foo")).beginArray();
        } catch (IOException expected) {
        }
        try {
            new JsonReader(reader("")).beginObject();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testEmptyString_literalMutation350() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmptyString_literalMutation350");
        try {
            new JsonReader(reader("")).beginArray();
        } catch (IOException expected) {
        }
        try {
            new JsonReader(reader("foo")).beginObject();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNoTopLevelObject_add539() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNoTopLevelObject_add539");
        try {
            new JsonReader(reader("true")).nextBoolean();
            new JsonReader(reader("true")).nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testNoTopLevelObject() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNoTopLevelObject");
        try {
            new JsonReader(reader("foo")).nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCharacterUnescaping_add327() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_add327");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCharacterUnescaping_add328() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_add328");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping");
        String json = "foo" + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation303() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation303");
        String json = "[\"a\"," + ("foo" + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation304() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation304");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("foo" + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation305() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation305");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("foo" + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation306() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation306");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("foo" + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation307() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation307");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("foo" + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation308() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation308");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("foo" + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation309() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation309");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("foo" + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation310() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation310");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("foo" + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation311() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation311");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("foo" + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation312() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation312");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("foo" + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation313() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation313");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("foo" + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation314() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation314");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("foo" + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation315() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation315");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("foo" + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation316() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation316");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("foo" + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation317() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation317");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("foo" + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation318() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation318");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("foo" + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation319() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation319");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("foo" + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation320() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation320");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("foo" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCharacterUnescaping_literalMutation321() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_literalMutation321");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "foo"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCharacterUnescaping_remove281() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_remove281");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCharacterUnescaping_remove282() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCharacterUnescaping_remove282");
        String json = "[\"a\"," + ("\"a\\\"\"," + ("\"\\\"\"," + ("\":\"," + ("\",\"," + ("\"\\b\"," + ("\"\\f\"," + ("\"\\n\"," + ("\"\\r\"," + ("\"\\t\"," + ("\" \"," + ("\"\\\\\"," + ("\"{\"," + ("\"}\"," + ("\"[\"," + ("\"]\"," + ("\"\\u0000\"," + ("\"\\u0019\"," + ("\"\\u20AC\"" + "]"))))))))))))))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),392,reader,391,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),394,reader,393,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),396,reader,395,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),398,reader,397,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),400,reader,399,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),402,reader,401,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),404,reader,403,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),406,reader,405,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),408,reader,407,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),410,reader,409,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),412,reader,411,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),414,reader,413,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),416,reader,415,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),418,reader,417,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),420,reader,419,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),422,reader,421,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),424,reader,423,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),426,reader,425,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),428,reader,427,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),429,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),431,reader,430,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testUnescapingInvalidCharacters_add709() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnescapingInvalidCharacters_add709");
        String json = "[\"\\u000g\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.nextString();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testUnescapingInvalidCharacters_add710() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnescapingInvalidCharacters_add710");
        String json = "[\"\\u000g\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.nextString();
            reader.nextString();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testUnescapingInvalidCharacters() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnescapingInvalidCharacters");
        String json = "foo";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.nextString();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testUnescapingInvalidCharacters_remove575() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnescapingInvalidCharacters_remove575");
        String json = "[\"\\u000g\"]";
        JsonReader reader = new JsonReader(reader(json));
        try {
            reader.nextString();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testUnescapingTruncatedCharacters_add711() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnescapingTruncatedCharacters_add711");
        String json = "[\"\\u000";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testUnescapingTruncatedCharacters_add712() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnescapingTruncatedCharacters_add712");
        String json = "[\"\\u000";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.nextString();
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testUnescapingTruncatedCharacters() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnescapingTruncatedCharacters");
        String json = "foo";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testUnescapingTruncatedCharacters_remove576() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnescapingTruncatedCharacters_remove576");
        String json = "[\"\\u000";
        JsonReader reader = new JsonReader(reader(json));
        try {
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testUnescapingTruncatedSequence_add713() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnescapingTruncatedSequence_add713");
        String json = "[\"\\";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testUnescapingTruncatedSequence_add714() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnescapingTruncatedSequence_add714");
        String json = "[\"\\";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.nextString();
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testUnescapingTruncatedSequence() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnescapingTruncatedSequence");
        String json = "foo";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testUnescapingTruncatedSequence_remove577() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnescapingTruncatedSequence_remove577");
        String json = "[\"\\";
        JsonReader reader = new JsonReader(reader(json));
        try {
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIntegersWithFractionalPartSpecified_add380() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIntegersWithFractionalPartSpecified_add380");
        JsonReader reader = new JsonReader(reader("[1.0,1.0,1.0]"));
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),522,reader,521,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),524,reader,523,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),526,reader,525,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIntegersWithFractionalPartSpecified() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIntegersWithFractionalPartSpecified");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),522,reader,521,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),524,reader,523,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),526,reader,525,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIntegersWithFractionalPartSpecified_remove327() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIntegersWithFractionalPartSpecified_remove327");
        JsonReader reader = new JsonReader(reader("[1.0,1.0,1.0]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),522,reader,521,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),524,reader,523,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),526,reader,525,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testDoubles_add341() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDoubles_add341");
        String json = "[-0.0," + ("1.0," + ("1.7976931348623157E308," + ("4.9E-324," + ("0.0," + ("-0.5," + ("2.2250738585072014E-308," + ("3.141592653589793," + "2.718281828459045]")))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),458,-0.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),460,reader,459,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),462,reader,461,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),464,reader,463,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),466,reader,465,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),468,reader,467,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),469,-0.5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),471,reader,470,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),473,reader,472,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),475,reader,474,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),477,reader,476,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),478,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),480,reader,479,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testDoubles_add342() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDoubles_add342");
        String json = "[-0.0," + ("1.0," + ("1.7976931348623157E308," + ("4.9E-324," + ("0.0," + ("-0.5," + ("2.2250738585072014E-308," + ("3.141592653589793," + "2.718281828459045]")))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),458,-0.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),460,reader,459,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),462,reader,461,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),464,reader,463,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),466,reader,465,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),468,reader,467,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),469,-0.5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),471,reader,470,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),473,reader,472,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),475,reader,474,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),477,reader,476,reader.nextDouble());
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),478,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),480,reader,479,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDoubles() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDoubles");
        String json = "foo" + ("1.0," + ("1.7976931348623157E308," + ("4.9E-324," + ("0.0," + ("-0.5," + ("2.2250738585072014E-308," + ("3.141592653589793," + "2.718281828459045]")))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),458,-0.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),460,reader,459,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),462,reader,461,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),464,reader,463,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),466,reader,465,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),468,reader,467,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),469,-0.5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),471,reader,470,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),473,reader,472,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),475,reader,474,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),477,reader,476,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),478,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),480,reader,479,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDoubles_literalMutation341() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDoubles_literalMutation341");
        String json = "[-0.0," + ("foo" + ("1.7976931348623157E308," + ("4.9E-324," + ("0.0," + ("-0.5," + ("2.2250738585072014E-308," + ("3.141592653589793," + "2.718281828459045]")))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),458,-0.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),460,reader,459,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),462,reader,461,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),464,reader,463,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),466,reader,465,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),468,reader,467,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),469,-0.5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),471,reader,470,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),473,reader,472,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),475,reader,474,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),477,reader,476,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),478,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),480,reader,479,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDoubles_literalMutation342() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDoubles_literalMutation342");
        String json = "[-0.0," + ("1.0," + ("foo" + ("4.9E-324," + ("0.0," + ("-0.5," + ("2.2250738585072014E-308," + ("3.141592653589793," + "2.718281828459045]")))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),458,-0.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),460,reader,459,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),462,reader,461,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),464,reader,463,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),466,reader,465,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),468,reader,467,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),469,-0.5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),471,reader,470,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),473,reader,472,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),475,reader,474,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),477,reader,476,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),478,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),480,reader,479,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDoubles_literalMutation343() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDoubles_literalMutation343");
        String json = "[-0.0," + ("1.0," + ("1.7976931348623157E308," + ("foo" + ("0.0," + ("-0.5," + ("2.2250738585072014E-308," + ("3.141592653589793," + "2.718281828459045]")))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),458,-0.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),460,reader,459,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),462,reader,461,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),464,reader,463,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),466,reader,465,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),468,reader,467,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),469,-0.5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),471,reader,470,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),473,reader,472,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),475,reader,474,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),477,reader,476,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),478,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),480,reader,479,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDoubles_literalMutation344() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDoubles_literalMutation344");
        String json = "[-0.0," + ("1.0," + ("1.7976931348623157E308," + ("4.9E-324," + ("foo" + ("-0.5," + ("2.2250738585072014E-308," + ("3.141592653589793," + "2.718281828459045]")))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),458,-0.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),460,reader,459,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),462,reader,461,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),464,reader,463,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),466,reader,465,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),468,reader,467,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),469,-0.5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),471,reader,470,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),473,reader,472,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),475,reader,474,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),477,reader,476,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),478,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),480,reader,479,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDoubles_literalMutation345() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDoubles_literalMutation345");
        String json = "[-0.0," + ("1.0," + ("1.7976931348623157E308," + ("4.9E-324," + ("0.0," + ("foo" + ("2.2250738585072014E-308," + ("3.141592653589793," + "2.718281828459045]")))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),458,-0.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),460,reader,459,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),462,reader,461,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),464,reader,463,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),466,reader,465,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),468,reader,467,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),469,-0.5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),471,reader,470,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),473,reader,472,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),475,reader,474,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),477,reader,476,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),478,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),480,reader,479,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDoubles_literalMutation346() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDoubles_literalMutation346");
        String json = "[-0.0," + ("1.0," + ("1.7976931348623157E308," + ("4.9E-324," + ("0.0," + ("-0.5," + ("foo" + ("3.141592653589793," + "2.718281828459045]")))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),458,-0.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),460,reader,459,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),462,reader,461,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),464,reader,463,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),466,reader,465,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),468,reader,467,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),469,-0.5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),471,reader,470,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),473,reader,472,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),475,reader,474,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),477,reader,476,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),478,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),480,reader,479,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDoubles_literalMutation347() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDoubles_literalMutation347");
        String json = "[-0.0," + ("1.0," + ("1.7976931348623157E308," + ("4.9E-324," + ("0.0," + ("-0.5," + ("2.2250738585072014E-308," + ("foo" + "2.718281828459045]")))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),458,-0.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),460,reader,459,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),462,reader,461,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),464,reader,463,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),466,reader,465,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),468,reader,467,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),469,-0.5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),471,reader,470,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),473,reader,472,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),475,reader,474,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),477,reader,476,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),478,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),480,reader,479,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDoubles_literalMutation348() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDoubles_literalMutation348");
        String json = "[-0.0," + ("1.0," + ("1.7976931348623157E308," + ("4.9E-324," + ("0.0," + ("-0.5," + ("2.2250738585072014E-308," + ("3.141592653589793," + "foo")))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),458,-0.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),460,reader,459,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),462,reader,461,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),464,reader,463,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),466,reader,465,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),468,reader,467,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),469,-0.5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),471,reader,470,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),473,reader,472,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),475,reader,474,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),477,reader,476,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),478,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),480,reader,479,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testDoubles_remove294() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDoubles_remove294");
        String json = "[-0.0," + ("1.0," + ("1.7976931348623157E308," + ("4.9E-324," + ("0.0," + ("-0.5," + ("2.2250738585072014E-308," + ("3.141592653589793," + "2.718281828459045]")))))));
        JsonReader reader = new JsonReader(reader(json));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),458,-0.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),460,reader,459,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),462,reader,461,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),464,reader,463,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),466,reader,465,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),468,reader,467,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),469,-0.5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),471,reader,470,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),473,reader,472,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),475,reader,474,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),477,reader,476,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),478,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),480,reader,479,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testDoubles_remove295() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDoubles_remove295");
        String json = "[-0.0," + ("1.0," + ("1.7976931348623157E308," + ("4.9E-324," + ("0.0," + ("-0.5," + ("2.2250738585072014E-308," + ("3.141592653589793," + "2.718281828459045]")))))));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),458,-0.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),460,reader,459,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),462,reader,461,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),464,reader,463,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),466,reader,465,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),468,reader,467,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),469,-0.5);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),471,reader,470,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),473,reader,472,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),475,reader,474,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),477,reader,476,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),478,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),480,reader,479,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictNonFiniteDoubles_add643() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNonFiniteDoubles_add643");
        String json = "[NaN]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictNonFiniteDoubles_add644() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNonFiniteDoubles_add644");
        String json = "[NaN]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.nextDouble();
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictNonFiniteDoubles() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNonFiniteDoubles");
        String json = "foo";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictNonFiniteDoubles_remove542() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNonFiniteDoubles_remove542");
        String json = "[NaN]";
        JsonReader reader = new JsonReader(reader(json));
        try {
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictQuotedNonFiniteDoubles_add647() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictQuotedNonFiniteDoubles_add647");
        String json = "[\"NaN\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictQuotedNonFiniteDoubles_add648() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictQuotedNonFiniteDoubles_add648");
        String json = "[\"NaN\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.nextDouble();
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictQuotedNonFiniteDoubles() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictQuotedNonFiniteDoubles");
        String json = "foo";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictQuotedNonFiniteDoubles_remove544() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictQuotedNonFiniteDoubles_remove544");
        String json = "[\"NaN\"]";
        JsonReader reader = new JsonReader(reader(json));
        try {
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonFiniteDoubles_add405() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonFiniteDoubles_add405");
        String json = "[NaN, -Infinity, Infinity]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),557,null,556,java.lang.Double.isNaN(reader.nextDouble()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),558,java.lang.Double.NEGATIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),560,reader,559,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),561,java.lang.Double.POSITIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),563,reader,562,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonFiniteDoubles_add406() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonFiniteDoubles_add406");
        String json = "[NaN, -Infinity, Infinity]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),557,null,556,java.lang.Double.isNaN(reader.nextDouble()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),558,java.lang.Double.NEGATIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),560,reader,559,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),561,java.lang.Double.POSITIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),563,reader,562,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonFiniteDoubles_add407() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonFiniteDoubles_add407");
        String json = "[NaN, -Infinity, Infinity]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),557,null,556,java.lang.Double.isNaN(reader.nextDouble()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),558,java.lang.Double.NEGATIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),560,reader,559,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),561,java.lang.Double.POSITIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),563,reader,562,reader.nextDouble());
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientNonFiniteDoubles() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonFiniteDoubles");
        String json = "foo";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),557,null,556,java.lang.Double.isNaN(reader.nextDouble()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),558,java.lang.Double.NEGATIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),560,reader,559,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),561,java.lang.Double.POSITIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),563,reader,562,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientNonFiniteDoubles_literalMutation402() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonFiniteDoubles_literalMutation402");
        String json = "[NaN, -Infinity, Infinity]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),557,null,556,java.lang.Double.isNaN(reader.nextDouble()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),558,java.lang.Double.NEGATIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),560,reader,559,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),561,java.lang.Double.POSITIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),563,reader,562,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonFiniteDoubles_remove351() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonFiniteDoubles_remove351");
        String json = "[NaN, -Infinity, Infinity]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),557,null,556,java.lang.Double.isNaN(reader.nextDouble()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),558,java.lang.Double.NEGATIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),560,reader,559,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),561,java.lang.Double.POSITIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),563,reader,562,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonFiniteDoubles_remove352() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonFiniteDoubles_remove352");
        String json = "[NaN, -Infinity, Infinity]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),557,null,556,java.lang.Double.isNaN(reader.nextDouble()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),558,java.lang.Double.NEGATIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),560,reader,559,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),561,java.lang.Double.POSITIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),563,reader,562,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonFiniteDoubles_remove353() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonFiniteDoubles_remove353");
        String json = "[NaN, -Infinity, Infinity]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),557,null,556,java.lang.Double.isNaN(reader.nextDouble()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),558,java.lang.Double.NEGATIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),560,reader,559,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),561,java.lang.Double.POSITIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),563,reader,562,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientQuotedNonFiniteDoubles_add410() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientQuotedNonFiniteDoubles_add410");
        String json = "[\"NaN\", \"-Infinity\", \"Infinity\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),567,null,566,java.lang.Double.isNaN(reader.nextDouble()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),568,java.lang.Double.NEGATIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),570,reader,569,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),571,java.lang.Double.POSITIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),573,reader,572,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientQuotedNonFiniteDoubles_add411() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientQuotedNonFiniteDoubles_add411");
        String json = "[\"NaN\", \"-Infinity\", \"Infinity\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),567,null,566,java.lang.Double.isNaN(reader.nextDouble()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),568,java.lang.Double.NEGATIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),570,reader,569,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),571,java.lang.Double.POSITIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),573,reader,572,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientQuotedNonFiniteDoubles_add412() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientQuotedNonFiniteDoubles_add412");
        String json = "[\"NaN\", \"-Infinity\", \"Infinity\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),567,null,566,java.lang.Double.isNaN(reader.nextDouble()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),568,java.lang.Double.NEGATIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),570,reader,569,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),571,java.lang.Double.POSITIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),573,reader,572,reader.nextDouble());
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientQuotedNonFiniteDoubles() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientQuotedNonFiniteDoubles");
        String json = "foo";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),567,null,566,java.lang.Double.isNaN(reader.nextDouble()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),568,java.lang.Double.NEGATIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),570,reader,569,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),571,java.lang.Double.POSITIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),573,reader,572,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientQuotedNonFiniteDoubles_literalMutation406() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientQuotedNonFiniteDoubles_literalMutation406");
        String json = "[\"NaN\", \"-Infinity\", \"Infinity\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(false);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),567,null,566,java.lang.Double.isNaN(reader.nextDouble()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),568,java.lang.Double.NEGATIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),570,reader,569,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),571,java.lang.Double.POSITIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),573,reader,572,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientQuotedNonFiniteDoubles_remove355() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientQuotedNonFiniteDoubles_remove355");
        String json = "[\"NaN\", \"-Infinity\", \"Infinity\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),567,null,566,java.lang.Double.isNaN(reader.nextDouble()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),568,java.lang.Double.NEGATIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),570,reader,569,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),571,java.lang.Double.POSITIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),573,reader,572,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientQuotedNonFiniteDoubles_remove356() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientQuotedNonFiniteDoubles_remove356");
        String json = "[\"NaN\", \"-Infinity\", \"Infinity\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),567,null,566,java.lang.Double.isNaN(reader.nextDouble()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),568,java.lang.Double.NEGATIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),570,reader,569,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),571,java.lang.Double.POSITIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),573,reader,572,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientQuotedNonFiniteDoubles_remove357() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientQuotedNonFiniteDoubles_remove357");
        String json = "[\"NaN\", \"-Infinity\", \"Infinity\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),567,null,566,java.lang.Double.isNaN(reader.nextDouble()));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),568,java.lang.Double.NEGATIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),570,reader,569,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),571,java.lang.Double.POSITIVE_INFINITY);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),573,reader,572,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictNonFiniteDoublesWithSkipValue_add645() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNonFiniteDoublesWithSkipValue_add645");
        String json = "[NaN]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }


    public void testStrictNonFiniteDoublesWithSkipValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNonFiniteDoublesWithSkipValue");
        String json = "foo";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictNonFiniteDoublesWithSkipValue_remove543() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNonFiniteDoublesWithSkipValue_remove543");
        String json = "[NaN]";
        JsonReader reader = new JsonReader(reader(json));
        try {
            reader.skipValue();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLongs_add453() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongs_add453");
        String json = "[0,0,0," + ("1,1,1," + ("-1,-1,-1," + ("-9223372036854775808," + "9223372036854775807]")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),622,reader,621,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),624,reader,623,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),626,reader,625,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),628,reader,627,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),630,reader,629,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),632,reader,631,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),633,-1L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),635,reader,634,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),636,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),638,reader,637,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),639,-1.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),641,reader,640,reader.nextDouble());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),642,java.lang.Long.MIN_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),644,reader,643,reader.nextLong());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),645,java.lang.Long.MAX_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),647,reader,646,reader.nextLong());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),648,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),650,reader,649,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLongs_add454() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongs_add454");
        String json = "[0,0,0," + ("1,1,1," + ("-1,-1,-1," + ("-9223372036854775808," + "9223372036854775807]")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),622,reader,621,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),624,reader,623,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),626,reader,625,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),628,reader,627,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),630,reader,629,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),632,reader,631,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),633,-1L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),635,reader,634,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),636,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),638,reader,637,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),639,-1.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),641,reader,640,reader.nextDouble());
        try {
            reader.nextInt();
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),642,java.lang.Long.MIN_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),644,reader,643,reader.nextLong());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),645,java.lang.Long.MAX_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),647,reader,646,reader.nextLong());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),648,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),650,reader,649,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLongs_add455() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongs_add455");
        String json = "[0,0,0," + ("1,1,1," + ("-1,-1,-1," + ("-9223372036854775808," + "9223372036854775807]")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),622,reader,621,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),624,reader,623,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),626,reader,625,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),628,reader,627,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),630,reader,629,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),632,reader,631,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),633,-1L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),635,reader,634,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),636,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),638,reader,637,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),639,-1.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),641,reader,640,reader.nextDouble());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),642,java.lang.Long.MIN_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),644,reader,643,reader.nextLong());
        try {
            reader.nextInt();
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),645,java.lang.Long.MAX_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),647,reader,646,reader.nextLong());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),648,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),650,reader,649,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLongs_add456() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongs_add456");
        String json = "[0,0,0," + ("1,1,1," + ("-1,-1,-1," + ("-9223372036854775808," + "9223372036854775807]")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),622,reader,621,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),624,reader,623,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),626,reader,625,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),628,reader,627,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),630,reader,629,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),632,reader,631,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),633,-1L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),635,reader,634,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),636,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),638,reader,637,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),639,-1.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),641,reader,640,reader.nextDouble());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),642,java.lang.Long.MIN_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),644,reader,643,reader.nextLong());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),645,java.lang.Long.MAX_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),647,reader,646,reader.nextLong());
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),648,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),650,reader,649,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLongs() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongs");
        String json = "foo" + ("1,1,1," + ("-1,-1,-1," + ("-9223372036854775808," + "9223372036854775807]")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),622,reader,621,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),624,reader,623,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),626,reader,625,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),628,reader,627,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),630,reader,629,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),632,reader,631,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),633,-1L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),635,reader,634,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),636,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),638,reader,637,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),639,-1.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),641,reader,640,reader.nextDouble());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),642,java.lang.Long.MIN_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),644,reader,643,reader.nextLong());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),645,java.lang.Long.MAX_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),647,reader,646,reader.nextLong());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),648,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),650,reader,649,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLongs_literalMutation441() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongs_literalMutation441");
        String json = "[0,0,0," + ("foo" + ("-1,-1,-1," + ("-9223372036854775808," + "9223372036854775807]")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),622,reader,621,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),624,reader,623,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),626,reader,625,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),628,reader,627,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),630,reader,629,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),632,reader,631,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),633,-1L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),635,reader,634,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),636,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),638,reader,637,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),639,-1.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),641,reader,640,reader.nextDouble());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),642,java.lang.Long.MIN_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),644,reader,643,reader.nextLong());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),645,java.lang.Long.MAX_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),647,reader,646,reader.nextLong());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),648,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),650,reader,649,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLongs_literalMutation442() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongs_literalMutation442");
        String json = "[0,0,0," + ("1,1,1," + ("foo" + ("-9223372036854775808," + "9223372036854775807]")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),622,reader,621,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),624,reader,623,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),626,reader,625,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),628,reader,627,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),630,reader,629,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),632,reader,631,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),633,-1L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),635,reader,634,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),636,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),638,reader,637,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),639,-1.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),641,reader,640,reader.nextDouble());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),642,java.lang.Long.MIN_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),644,reader,643,reader.nextLong());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),645,java.lang.Long.MAX_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),647,reader,646,reader.nextLong());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),648,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),650,reader,649,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLongs_literalMutation443() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongs_literalMutation443");
        String json = "[0,0,0," + ("1,1,1," + ("-1,-1,-1," + ("foo" + "9223372036854775807]")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),622,reader,621,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),624,reader,623,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),626,reader,625,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),628,reader,627,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),630,reader,629,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),632,reader,631,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),633,-1L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),635,reader,634,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),636,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),638,reader,637,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),639,-1.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),641,reader,640,reader.nextDouble());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),642,java.lang.Long.MIN_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),644,reader,643,reader.nextLong());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),645,java.lang.Long.MAX_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),647,reader,646,reader.nextLong());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),648,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),650,reader,649,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLongs_literalMutation444() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongs_literalMutation444");
        String json = "[0,0,0," + ("1,1,1," + ("-1,-1,-1," + ("-9223372036854775808," + "foo")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),622,reader,621,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),624,reader,623,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),626,reader,625,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),628,reader,627,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),630,reader,629,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),632,reader,631,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),633,-1L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),635,reader,634,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),636,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),638,reader,637,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),639,-1.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),641,reader,640,reader.nextDouble());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),642,java.lang.Long.MIN_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),644,reader,643,reader.nextLong());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),645,java.lang.Long.MAX_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),647,reader,646,reader.nextLong());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),648,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),650,reader,649,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLongs_remove396() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongs_remove396");
        String json = "[0,0,0," + ("1,1,1," + ("-1,-1,-1," + ("-9223372036854775808," + "9223372036854775807]")));
        JsonReader reader = new JsonReader(reader(json));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),622,reader,621,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),624,reader,623,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),626,reader,625,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),628,reader,627,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),630,reader,629,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),632,reader,631,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),633,-1L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),635,reader,634,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),636,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),638,reader,637,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),639,-1.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),641,reader,640,reader.nextDouble());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),642,java.lang.Long.MIN_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),644,reader,643,reader.nextLong());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),645,java.lang.Long.MAX_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),647,reader,646,reader.nextLong());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),648,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),650,reader,649,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLongs_remove397() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongs_remove397");
        String json = "[0,0,0," + ("1,1,1," + ("-1,-1,-1," + ("-9223372036854775808," + "9223372036854775807]")));
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),622,reader,621,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),624,reader,623,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),626,reader,625,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),628,reader,627,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),630,reader,629,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),632,reader,631,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),633,-1L);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),635,reader,634,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),636,-1);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),638,reader,637,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),639,-1.0);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),641,reader,640,reader.nextDouble());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),642,java.lang.Long.MIN_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),644,reader,643,reader.nextLong());
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),645,java.lang.Long.MAX_VALUE);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),647,reader,646,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),648,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),650,reader,649,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void disabled_testNumberWithOctalPrefix_add309() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testNumberWithOctalPrefix_add309");
        String json = "[01]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextInt();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextLong();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),371,reader,370,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),372,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),374,reader,373,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void disabled_testNumberWithOctalPrefix_add310() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testNumberWithOctalPrefix_add310");
        String json = "[01]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.peek();
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextInt();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextLong();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),371,reader,370,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),372,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),374,reader,373,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void disabled_testNumberWithOctalPrefix_add311() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testNumberWithOctalPrefix_add311");
        String json = "[01]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextInt();
            reader.nextInt();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextLong();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),371,reader,370,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),372,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),374,reader,373,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void disabled_testNumberWithOctalPrefix_add312() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testNumberWithOctalPrefix_add312");
        String json = "[01]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextInt();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextLong();
            reader.nextLong();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),371,reader,370,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),372,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),374,reader,373,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void disabled_testNumberWithOctalPrefix_add313() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testNumberWithOctalPrefix_add313");
        String json = "[01]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextInt();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextLong();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextDouble();
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),371,reader,370,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),372,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),374,reader,373,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void disabled_testNumberWithOctalPrefix_add314() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testNumberWithOctalPrefix_add314");
        String json = "[01]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextInt();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextLong();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),371,reader,370,reader.nextString());
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),372,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),374,reader,373,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void disabled_testNumberWithOctalPrefix() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testNumberWithOctalPrefix");
        String json = "foo";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextInt();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextLong();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),371,reader,370,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),372,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),374,reader,373,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void disabled_testNumberWithOctalPrefix_remove270() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testNumberWithOctalPrefix_remove270");
        String json = "[01]";
        JsonReader reader = new JsonReader(reader(json));
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextInt();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextLong();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),371,reader,370,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),372,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),374,reader,373,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void disabled_testNumberWithOctalPrefix_remove271() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testNumberWithOctalPrefix_remove271");
        String json = "[01]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextInt();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextLong();
        } catch (MalformedJsonException expected) {
        }
        try {
            reader.nextDouble();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),371,reader,370,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),372,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),374,reader,373,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testBooleans() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testBooleans");
        JsonReader reader = new JsonReader(reader("[true,false]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),385,reader,384,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),387,reader,386,reader.nextBoolean());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),388,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),390,reader,389,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testBooleans_add325() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testBooleans_add325");
        JsonReader reader = new JsonReader(reader("[true,false]"));
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),385,reader,384,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),387,reader,386,reader.nextBoolean());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),388,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),390,reader,389,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testBooleans_add326() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testBooleans_add326");
        JsonReader reader = new JsonReader(reader("[true,false]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),385,reader,384,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),387,reader,386,reader.nextBoolean());
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),388,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),390,reader,389,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testBooleans_literalMutation301() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testBooleans_literalMutation301");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),385,reader,384,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),387,reader,386,reader.nextBoolean());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),388,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),390,reader,389,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testBooleans_remove279() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testBooleans_remove279");
        JsonReader reader = new JsonReader(reader("[true,false]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),385,reader,384,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),387,reader,386,reader.nextBoolean());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),388,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),390,reader,389,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testBooleans_remove280() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testBooleans_remove280");
        JsonReader reader = new JsonReader(reader("[true,false]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),385,reader,384,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),387,reader,386,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),388,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),390,reader,389,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekingUnquotedStringsPrefixedWithBooleans_add549() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekingUnquotedStringsPrefixedWithBooleans_add549");
        JsonReader reader = new JsonReader(reader("[truey]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),687,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),689,reader,688,reader.peek());
        try {
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),691,reader,690,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekingUnquotedStringsPrefixedWithBooleans_add550() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekingUnquotedStringsPrefixedWithBooleans_add550");
        JsonReader reader = new JsonReader(reader("[truey]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),687,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),689,reader,688,reader.peek());
        try {
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),691,reader,690,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekingUnquotedStringsPrefixedWithBooleans_add551() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekingUnquotedStringsPrefixedWithBooleans_add551");
        JsonReader reader = new JsonReader(reader("[truey]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),687,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),689,reader,688,reader.peek());
        try {
            reader.nextBoolean();
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),691,reader,690,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekingUnquotedStringsPrefixedWithBooleans_add552() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekingUnquotedStringsPrefixedWithBooleans_add552");
        JsonReader reader = new JsonReader(reader("[truey]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),687,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),689,reader,688,reader.peek());
        try {
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),691,reader,690,reader.nextString());
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPeekingUnquotedStringsPrefixedWithBooleans() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekingUnquotedStringsPrefixedWithBooleans");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),687,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),689,reader,688,reader.peek());
        try {
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),691,reader,690,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPeekingUnquotedStringsPrefixedWithBooleans_literalMutation521() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekingUnquotedStringsPrefixedWithBooleans_literalMutation521");
        JsonReader reader = new JsonReader(reader("[truey]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),687,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),689,reader,688,reader.peek());
        try {
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),691,reader,690,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekingUnquotedStringsPrefixedWithBooleans_remove476() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekingUnquotedStringsPrefixedWithBooleans_remove476");
        JsonReader reader = new JsonReader(reader("[truey]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),687,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),689,reader,688,reader.peek());
        try {
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),691,reader,690,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekingUnquotedStringsPrefixedWithBooleans_remove477() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekingUnquotedStringsPrefixedWithBooleans_remove477");
        JsonReader reader = new JsonReader(reader("[truey]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),687,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),689,reader,688,reader.peek());
        try {
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),691,reader,690,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekingUnquotedStringsPrefixedWithBooleans_remove478() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekingUnquotedStringsPrefixedWithBooleans_remove478");
        JsonReader reader = new JsonReader(reader("[truey]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),687,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),689,reader,688,reader.peek());
        try {
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),691,reader,690,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add496() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add496");
        assertNotANumber("-");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add497() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add497");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add498() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add498");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add499() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add499");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add500() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add500");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add501() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add501");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add502() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add502");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add503() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add503");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add504() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add504");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add505() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add505");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add506() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add506");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add507() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add507");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add508() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add508");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add509() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add509");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add510() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add510");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add511() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add511");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add512() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add512");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add513() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add513");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add514() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add514");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add515() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add515");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add516() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add516");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add517() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add517");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add518() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add518");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_add519() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_add519");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers");
        assertNotANumber("foo");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation485() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation485");
        assertNotANumber("-");
        assertNotANumber("foo");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation486() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation486");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("foo");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation487() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation487");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("foo");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation488() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation488");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber("foo");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation489() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation489");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("foo");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation490() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation490");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("foo");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation491() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation491");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("foo");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation492() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation492");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber("foo");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation493() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation493");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("foo");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation494() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation494");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("foo");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation495() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation495");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("foo");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation496() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation496");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("foo");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation497() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation497");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("foo");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation498() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation498");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("foo");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation499() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation499");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("foo");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation500() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation500");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("foo");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation501() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation501");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("foo");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation502() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation502");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("foo");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation503() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation503");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("foo");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation504() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation504");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber("foo");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation505() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation505");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("foo");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation506() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation506");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber("foo");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedNumbers_literalMutation507() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_literalMutation507");
        assertNotANumber("-");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("foo");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove437() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove437");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove438() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove438");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove439() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove439");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove440() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove440");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove441() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove441");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove442() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove442");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove443() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove443");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove444() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove444");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove445() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove445");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove446() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove446");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove447() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove447");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove448() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove448");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove449() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove449");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove450() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove450");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove451() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove451");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove452() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove452");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove453() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove453");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove454() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove454");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove455() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove455");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove456() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove456");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove457() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove457");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove458() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove458");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove459() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove459");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedNumbers_remove460() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedNumbers_remove460");
        assertNotANumber(".");
        assertNotANumber("e");
        assertNotANumber("0e");
        assertNotANumber(".e");
        assertNotANumber("0.e");
        assertNotANumber("-.0e");
        assertNotANumber("e1");
        assertNotANumber(".e1");
        assertNotANumber("-e1");
        assertNotANumber("1x");
        assertNotANumber("1.1x");
        assertNotANumber("1e1x");
        assertNotANumber("1ex");
        assertNotANumber("1.1ex");
        assertNotANumber("1.1e1x");
        assertNotANumber("0.");
        assertNotANumber("-0.");
        assertNotANumber("0.e1");
        assertNotANumber("-0.e1");
        assertNotANumber(".0");
        assertNotANumber("-.0");
        assertNotANumber(".0e1");
        assertNotANumber("-.0e1");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    private void assertNotANumber(String s) throws IOException {
        JsonReader reader = new JsonReader(reader((("[" + s) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),362,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),364,reader,363,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),365,s);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),367,reader,366,reader.nextString());
        reader.endArray();
    }

    @Test(timeout = 1000)
    public void testPeekingUnquotedStringsPrefixedWithIntegers_add553() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekingUnquotedStringsPrefixedWithIntegers_add553");
        JsonReader reader = new JsonReader(reader("[12.34e5x]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),692,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),694,reader,693,reader.peek());
        try {
            reader.nextInt();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),696,reader,695,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekingUnquotedStringsPrefixedWithIntegers_add554() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekingUnquotedStringsPrefixedWithIntegers_add554");
        JsonReader reader = new JsonReader(reader("[12.34e5x]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),692,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),694,reader,693,reader.peek());
        try {
            reader.nextInt();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),696,reader,695,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekingUnquotedStringsPrefixedWithIntegers_add555() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekingUnquotedStringsPrefixedWithIntegers_add555");
        JsonReader reader = new JsonReader(reader("[12.34e5x]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),692,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),694,reader,693,reader.peek());
        try {
            reader.nextInt();
            reader.nextInt();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),696,reader,695,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekingUnquotedStringsPrefixedWithIntegers");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),692,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),694,reader,693,reader.peek());
        try {
            reader.nextInt();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),696,reader,695,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPeekingUnquotedStringsPrefixedWithIntegers_literalMutation523() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekingUnquotedStringsPrefixedWithIntegers_literalMutation523");
        JsonReader reader = new JsonReader(reader("[12.34e5x]"));
        reader.setLenient(false);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),692,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),694,reader,693,reader.peek());
        try {
            reader.nextInt();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),696,reader,695,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekingUnquotedStringsPrefixedWithIntegers_remove479() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekingUnquotedStringsPrefixedWithIntegers_remove479");
        JsonReader reader = new JsonReader(reader("[12.34e5x]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),692,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),694,reader,693,reader.peek());
        try {
            reader.nextInt();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),696,reader,695,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekingUnquotedStringsPrefixedWithIntegers_remove480() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekingUnquotedStringsPrefixedWithIntegers_remove480");
        JsonReader reader = new JsonReader(reader("[12.34e5x]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),692,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),694,reader,693,reader.peek());
        try {
            reader.nextInt();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),696,reader,695,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekLongMinValue_add544() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekLongMinValue_add544");
        JsonReader reader = new JsonReader(reader("[-9223372036854775808]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),676,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),678,reader,677,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),680,reader,679,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekLongMinValue_add545() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekLongMinValue_add545");
        JsonReader reader = new JsonReader(reader("[-9223372036854775808]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),676,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),678,reader,677,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),680,reader,679,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPeekLongMinValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekLongMinValue");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),676,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),678,reader,677,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),680,reader,679,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPeekLongMinValue_literalMutation517() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekLongMinValue_literalMutation517");
        JsonReader reader = new JsonReader(reader("[-9223372036854775808]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),676,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),678,reader,677,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),680,reader,679,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekLongMinValue_remove472() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekLongMinValue_remove472");
        JsonReader reader = new JsonReader(reader("[-9223372036854775808]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),676,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),678,reader,677,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),680,reader,679,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekLongMinValue_remove473() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekLongMinValue_remove473");
        JsonReader reader = new JsonReader(reader("[-9223372036854775808]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),676,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),678,reader,677,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),680,reader,679,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekLongMaxValue_add542() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekLongMaxValue_add542");
        JsonReader reader = new JsonReader(reader("[9223372036854775807]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),671,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),673,reader,672,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),675,reader,674,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekLongMaxValue_add543() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekLongMaxValue_add543");
        JsonReader reader = new JsonReader(reader("[9223372036854775807]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),671,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),673,reader,672,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),675,reader,674,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPeekLongMaxValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekLongMaxValue");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),671,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),673,reader,672,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),675,reader,674,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPeekLongMaxValue_literalMutation515() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekLongMaxValue_literalMutation515");
        JsonReader reader = new JsonReader(reader("[9223372036854775807]"));
        reader.setLenient(false);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),671,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),673,reader,672,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),675,reader,674,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekLongMaxValue_remove470() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekLongMaxValue_remove470");
        JsonReader reader = new JsonReader(reader("[9223372036854775807]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),671,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),673,reader,672,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),675,reader,674,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekLongMaxValue_remove471() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekLongMaxValue_remove471");
        JsonReader reader = new JsonReader(reader("[9223372036854775807]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),671,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),673,reader,672,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),675,reader,674,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLongLargerThanMaxLongThatWrapsAround_add447() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongLargerThanMaxLongThatWrapsAround_add447");
        JsonReader reader = new JsonReader(reader("[22233720368547758070]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),615,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),617,reader,616,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLongLargerThanMaxLongThatWrapsAround_add448() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongLargerThanMaxLongThatWrapsAround_add448");
        JsonReader reader = new JsonReader(reader("[22233720368547758070]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),615,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),617,reader,616,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLongLargerThanMaxLongThatWrapsAround_add449() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongLargerThanMaxLongThatWrapsAround_add449");
        JsonReader reader = new JsonReader(reader("[22233720368547758070]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),615,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),617,reader,616,reader.peek());
        try {
            reader.nextLong();
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLongLargerThanMaxLongThatWrapsAround() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongLargerThanMaxLongThatWrapsAround");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),615,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),617,reader,616,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLongLargerThanMaxLongThatWrapsAround_literalMutation437() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongLargerThanMaxLongThatWrapsAround_literalMutation437");
        JsonReader reader = new JsonReader(reader("[22233720368547758070]"));
        reader.setLenient(false);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),615,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),617,reader,616,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLongLargerThanMaxLongThatWrapsAround_remove392() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongLargerThanMaxLongThatWrapsAround_remove392");
        JsonReader reader = new JsonReader(reader("[22233720368547758070]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),615,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),617,reader,616,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLongLargerThanMaxLongThatWrapsAround_remove393() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongLargerThanMaxLongThatWrapsAround_remove393");
        JsonReader reader = new JsonReader(reader("[22233720368547758070]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),615,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),617,reader,616,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLongLargerThanMinLongThatWrapsAround_add450() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongLargerThanMinLongThatWrapsAround_add450");
        JsonReader reader = new JsonReader(reader("[-22233720368547758070]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),618,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),620,reader,619,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLongLargerThanMinLongThatWrapsAround_add451() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongLargerThanMinLongThatWrapsAround_add451");
        JsonReader reader = new JsonReader(reader("[-22233720368547758070]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),618,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),620,reader,619,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLongLargerThanMinLongThatWrapsAround_add452() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongLargerThanMinLongThatWrapsAround_add452");
        JsonReader reader = new JsonReader(reader("[-22233720368547758070]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),618,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),620,reader,619,reader.peek());
        try {
            reader.nextLong();
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLongLargerThanMinLongThatWrapsAround() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongLargerThanMinLongThatWrapsAround");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),618,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),620,reader,619,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLongLargerThanMinLongThatWrapsAround_literalMutation439() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongLargerThanMinLongThatWrapsAround_literalMutation439");
        JsonReader reader = new JsonReader(reader("[-22233720368547758070]"));
        reader.setLenient(false);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),618,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),620,reader,619,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLongLargerThanMinLongThatWrapsAround_remove394() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongLargerThanMinLongThatWrapsAround_remove394");
        JsonReader reader = new JsonReader(reader("[-22233720368547758070]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),618,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),620,reader,619,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLongLargerThanMinLongThatWrapsAround_remove395() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLongLargerThanMinLongThatWrapsAround_remove395");
        JsonReader reader = new JsonReader(reader("[-22233720368547758070]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),618,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),620,reader,619,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for 9223372036854775808, and our
     * long parsing uses Double.parseDouble() for fractional values.
     */
@Test(timeout = 1000)
    public void disabled_testPeekLargerThanLongMaxValue_add315() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testPeekLargerThanLongMaxValue_add315");
        JsonReader reader = new JsonReader(reader("[9223372036854775808]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),375,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),377,reader,376,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for 9223372036854775808, and our
     * long parsing uses Double.parseDouble() for fractional values.
     */
@Test(timeout = 1000)
    public void disabled_testPeekLargerThanLongMaxValue_add316() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testPeekLargerThanLongMaxValue_add316");
        JsonReader reader = new JsonReader(reader("[9223372036854775808]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),375,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),377,reader,376,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for 9223372036854775808, and our
     * long parsing uses Double.parseDouble() for fractional values.
     */
@Test(timeout = 1000)
    public void disabled_testPeekLargerThanLongMaxValue_add317() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testPeekLargerThanLongMaxValue_add317");
        JsonReader reader = new JsonReader(reader("[9223372036854775808]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),375,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),377,reader,376,reader.peek());
        try {
            reader.nextLong();
            reader.nextLong();
        } catch (NumberFormatException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for 9223372036854775808, and our
     * long parsing uses Double.parseDouble() for fractional values.
     */
public void disabled_testPeekLargerThanLongMaxValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testPeekLargerThanLongMaxValue");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),375,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),377,reader,376,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for 9223372036854775808, and our
     * long parsing uses Double.parseDouble() for fractional values.
     */
public void disabled_testPeekLargerThanLongMaxValue_literalMutation296() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testPeekLargerThanLongMaxValue_literalMutation296");
        JsonReader reader = new JsonReader(reader("[9223372036854775808]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),375,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),377,reader,376,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for 9223372036854775808, and our
     * long parsing uses Double.parseDouble() for fractional values.
     */
@Test(timeout = 1000)
    public void disabled_testPeekLargerThanLongMaxValue_remove272() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testPeekLargerThanLongMaxValue_remove272");
        JsonReader reader = new JsonReader(reader("[9223372036854775808]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),375,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),377,reader,376,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for 9223372036854775808, and our
     * long parsing uses Double.parseDouble() for fractional values.
     */
@Test(timeout = 1000)
    public void disabled_testPeekLargerThanLongMaxValue_remove273() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testPeekLargerThanLongMaxValue_remove273");
        JsonReader reader = new JsonReader(reader("[9223372036854775808]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),375,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),377,reader,376,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException e) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for -9223372036854775809, and our
     * long parsing uses Double.parseDouble() for fractional values.
     */
@Test(timeout = 1000)
    public void disabled_testPeekLargerThanLongMinValue_add318() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testPeekLargerThanLongMinValue_add318");
        JsonReader reader = new JsonReader(reader("[-9223372036854775809]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),378,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),380,reader,379,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),381,-9.223372036854776E18);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),383,reader,382,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for -9223372036854775809, and our
     * long parsing uses Double.parseDouble() for fractional values.
     */
@Test(timeout = 1000)
    public void disabled_testPeekLargerThanLongMinValue_add319() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testPeekLargerThanLongMinValue_add319");
        JsonReader reader = new JsonReader(reader("[-9223372036854775809]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),378,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),380,reader,379,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),381,-9.223372036854776E18);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),383,reader,382,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for -9223372036854775809, and our
     * long parsing uses Double.parseDouble() for fractional values.
     */
@Test(timeout = 1000)
    public void disabled_testPeekLargerThanLongMinValue_add320() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testPeekLargerThanLongMinValue_add320");
        JsonReader reader = new JsonReader(reader("[-9223372036854775809]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),378,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),380,reader,379,reader.peek());
        try {
            reader.nextLong();
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),381,-9.223372036854776E18);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),383,reader,382,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for -9223372036854775809, and our
     * long parsing uses Double.parseDouble() for fractional values.
     */
public void disabled_testPeekLargerThanLongMinValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testPeekLargerThanLongMinValue");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),378,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),380,reader,379,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),381,-9.223372036854776E18);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),383,reader,382,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for -9223372036854775809, and our
     * long parsing uses Double.parseDouble() for fractional values.
     */
public void disabled_testPeekLargerThanLongMinValue_literalMutation298() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testPeekLargerThanLongMinValue_literalMutation298");
        JsonReader reader = new JsonReader(reader("[-9223372036854775809]"));
        reader.setLenient(false);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),378,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),380,reader,379,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),381,-9.223372036854776E18);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),383,reader,382,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for -9223372036854775809, and our
     * long parsing uses Double.parseDouble() for fractional values.
     */
@Test(timeout = 1000)
    public void disabled_testPeekLargerThanLongMinValue_remove274() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testPeekLargerThanLongMinValue_remove274");
        JsonReader reader = new JsonReader(reader("[-9223372036854775809]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),378,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),380,reader,379,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),381,-9.223372036854776E18);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),383,reader,382,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for -9223372036854775809, and our
     * long parsing uses Double.parseDouble() for fractional values.
     */
@Test(timeout = 1000)
    public void disabled_testPeekLargerThanLongMinValue_remove275() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testPeekLargerThanLongMinValue_remove275");
        JsonReader reader = new JsonReader(reader("[-9223372036854775809]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),378,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),380,reader,379,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),381,-9.223372036854776E18);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),383,reader,382,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for 9223372036854775806, and
     * our long parsing uses Double.parseDouble() for fractional values.
     */
@Test(timeout = 1000)
    public void disabled_testHighPrecisionLong_add307() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testHighPrecisionLong_add307");
        String json = "[9223372036854775806.000]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),369,reader,368,reader.nextLong());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for 9223372036854775806, and
     * our long parsing uses Double.parseDouble() for fractional values.
     */
@Test(timeout = 1000)
    public void disabled_testHighPrecisionLong_add308() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testHighPrecisionLong_add308");
        String json = "[9223372036854775806.000]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),369,reader,368,reader.nextLong());
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for 9223372036854775806, and
     * our long parsing uses Double.parseDouble() for fractional values.
     */
public void disabled_testHighPrecisionLong() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testHighPrecisionLong");
        String json = "foo";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),369,reader,368,reader.nextLong());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for 9223372036854775806, and
     * our long parsing uses Double.parseDouble() for fractional values.
     */
@Test(timeout = 1000)
    public void disabled_testHighPrecisionLong_remove268() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testHighPrecisionLong_remove268");
        String json = "[9223372036854775806.000]";
        JsonReader reader = new JsonReader(reader(json));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),369,reader,368,reader.nextLong());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test fails because there's no double for 9223372036854775806, and
     * our long parsing uses Double.parseDouble() for fractional values.
     */
@Test(timeout = 1000)
    public void disabled_testHighPrecisionLong_remove269() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "disabled_testHighPrecisionLong_remove269");
        String json = "[9223372036854775806.000]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),369,reader,368,reader.nextLong());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekMuchLargerThanLongMinValue_add546() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekMuchLargerThanLongMinValue_add546");
        JsonReader reader = new JsonReader(reader("[-92233720368547758080]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),681,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),683,reader,682,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),684,-9.223372036854776E19);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),686,reader,685,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekMuchLargerThanLongMinValue_add547() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekMuchLargerThanLongMinValue_add547");
        JsonReader reader = new JsonReader(reader("[-92233720368547758080]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),681,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),683,reader,682,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),684,-9.223372036854776E19);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),686,reader,685,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekMuchLargerThanLongMinValue_add548() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekMuchLargerThanLongMinValue_add548");
        JsonReader reader = new JsonReader(reader("[-92233720368547758080]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),681,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),683,reader,682,reader.peek());
        try {
            reader.nextLong();
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),684,-9.223372036854776E19);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),686,reader,685,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPeekMuchLargerThanLongMinValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekMuchLargerThanLongMinValue");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),681,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),683,reader,682,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),684,-9.223372036854776E19);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),686,reader,685,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPeekMuchLargerThanLongMinValue_literalMutation519() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekMuchLargerThanLongMinValue_literalMutation519");
        JsonReader reader = new JsonReader(reader("[-92233720368547758080]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),681,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),683,reader,682,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),684,-9.223372036854776E19);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),686,reader,685,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekMuchLargerThanLongMinValue_remove474() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekMuchLargerThanLongMinValue_remove474");
        JsonReader reader = new JsonReader(reader("[-92233720368547758080]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),681,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),683,reader,682,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),684,-9.223372036854776E19);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),686,reader,685,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPeekMuchLargerThanLongMinValue_remove475() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPeekMuchLargerThanLongMinValue_remove475");
        JsonReader reader = new JsonReader(reader("[-92233720368547758080]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),681,com.google.gson.stream.JsonToken.NUMBER);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),683,reader,682,reader.peek());
        try {
            reader.nextLong();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),684,-9.223372036854776E19);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),686,reader,685,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testQuotedNumberWithEscape_add568() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testQuotedNumberWithEscape_add568");
        JsonReader reader = new JsonReader(reader("[\"1234\"]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),701,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),703,reader,702,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),705,reader,704,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testQuotedNumberWithEscape_add569() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testQuotedNumberWithEscape_add569");
        JsonReader reader = new JsonReader(reader("[\"1234\"]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),701,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),703,reader,702,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),705,reader,704,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testQuotedNumberWithEscape() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testQuotedNumberWithEscape");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),701,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),703,reader,702,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),705,reader,704,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testQuotedNumberWithEscape_literalMutation529() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testQuotedNumberWithEscape_literalMutation529");
        JsonReader reader = new JsonReader(reader("[\"1234\"]"));
        reader.setLenient(false);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),701,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),703,reader,702,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),705,reader,704,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testQuotedNumberWithEscape_remove482() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testQuotedNumberWithEscape_remove482");
        JsonReader reader = new JsonReader(reader("[\"1234\"]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),701,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),703,reader,702,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),705,reader,704,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testQuotedNumberWithEscape_remove483() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testQuotedNumberWithEscape_remove483");
        JsonReader reader = new JsonReader(reader("[\"1234\"]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),701,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),703,reader,702,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),705,reader,704,reader.nextInt());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMixedCaseLiterals_add522() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMixedCaseLiterals_add522");
        JsonReader reader = new JsonReader(reader("[True,TruE,False,FALSE,NULL,nulL]"));
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),654,reader,653,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),656,reader,655,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),658,reader,657,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),660,reader,659,reader.nextBoolean());
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),661,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),663,reader,662,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMixedCaseLiterals_add523() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMixedCaseLiterals_add523");
        JsonReader reader = new JsonReader(reader("[True,TruE,False,FALSE,NULL,nulL]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),654,reader,653,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),656,reader,655,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),658,reader,657,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),660,reader,659,reader.nextBoolean());
        reader.nextNull();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),661,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),663,reader,662,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMixedCaseLiterals_add524() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMixedCaseLiterals_add524");
        JsonReader reader = new JsonReader(reader("[True,TruE,False,FALSE,NULL,nulL]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),654,reader,653,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),656,reader,655,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),658,reader,657,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),660,reader,659,reader.nextBoolean());
        reader.nextNull();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),661,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),663,reader,662,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMixedCaseLiterals_add525() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMixedCaseLiterals_add525");
        JsonReader reader = new JsonReader(reader("[True,TruE,False,FALSE,NULL,nulL]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),654,reader,653,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),656,reader,655,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),658,reader,657,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),660,reader,659,reader.nextBoolean());
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),661,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),663,reader,662,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMixedCaseLiterals() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMixedCaseLiterals");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),654,reader,653,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),656,reader,655,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),658,reader,657,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),660,reader,659,reader.nextBoolean());
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),661,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),663,reader,662,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMixedCaseLiterals_remove462() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMixedCaseLiterals_remove462");
        JsonReader reader = new JsonReader(reader("[True,TruE,False,FALSE,NULL,nulL]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),654,reader,653,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),656,reader,655,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),658,reader,657,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),660,reader,659,reader.nextBoolean());
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),661,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),663,reader,662,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMixedCaseLiterals_remove463() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMixedCaseLiterals_remove463");
        JsonReader reader = new JsonReader(reader("[True,TruE,False,FALSE,NULL,nulL]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),654,reader,653,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),656,reader,655,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),658,reader,657,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),660,reader,659,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),661,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),663,reader,662,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMixedCaseLiterals_remove464() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMixedCaseLiterals_remove464");
        JsonReader reader = new JsonReader(reader("[True,TruE,False,FALSE,NULL,nulL]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),654,reader,653,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),656,reader,655,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),658,reader,657,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),660,reader,659,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),661,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),663,reader,662,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMixedCaseLiterals_remove465() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMixedCaseLiterals_remove465");
        JsonReader reader = new JsonReader(reader("[True,TruE,False,FALSE,NULL,nulL]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),654,reader,653,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),656,reader,655,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),658,reader,657,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),660,reader,659,reader.nextBoolean());
        reader.nextNull();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),661,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),663,reader,662,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMissingValue_add520() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMissingValue_add520");
        JsonReader reader = new JsonReader(reader("{\"a\":}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),652,reader,651,reader.nextName());
        try {
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMissingValue_add521() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMissingValue_add521");
        JsonReader reader = new JsonReader(reader("{\"a\":}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),652,reader,651,reader.nextName());
        try {
            reader.nextString();
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMissingValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMissingValue");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),652,reader,651,reader.nextName());
        try {
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMissingValue_remove461() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMissingValue_remove461");
        JsonReader reader = new JsonReader(reader("{\"a\":}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),652,reader,651,reader.nextName());
        try {
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPrematureEndOfInput_add556() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematureEndOfInput_add556");
        JsonReader reader = new JsonReader(reader("{\"a\":true,"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),698,reader,697,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),700,reader,699,reader.nextBoolean());
        try {
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPrematureEndOfInput_add557() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematureEndOfInput_add557");
        JsonReader reader = new JsonReader(reader("{\"a\":true,"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),698,reader,697,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),700,reader,699,reader.nextBoolean());
        try {
            reader.nextName();
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPrematureEndOfInput() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematureEndOfInput");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),698,reader,697,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),700,reader,699,reader.nextBoolean());
        try {
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPrematureEndOfInput_remove481() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematureEndOfInput_remove481");
        JsonReader reader = new JsonReader(reader("{\"a\":true,"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),698,reader,697,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),700,reader,699,reader.nextBoolean());
        try {
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPrematurelyClosed_add558() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematurelyClosed_add558");
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.beginObject();
            reader.beginObject();
            reader.close();
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.close();
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":true}"));
            reader.beginObject();
            reader.nextName();
            reader.peek();
            reader.close();
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPrematurelyClosed_add559() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematurelyClosed_add559");
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.beginObject();
            reader.close();
            reader.close();
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.close();
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":true}"));
            reader.beginObject();
            reader.nextName();
            reader.peek();
            reader.close();
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPrematurelyClosed_add560() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematurelyClosed_add560");
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.beginObject();
            reader.close();
            reader.nextName();
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.close();
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":true}"));
            reader.beginObject();
            reader.nextName();
            reader.peek();
            reader.close();
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPrematurelyClosed_add561() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematurelyClosed_add561");
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.beginObject();
            reader.close();
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.close();
            reader.close();
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":true}"));
            reader.beginObject();
            reader.nextName();
            reader.peek();
            reader.close();
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPrematurelyClosed_add562() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematurelyClosed_add562");
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.beginObject();
            reader.close();
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.close();
            reader.beginObject();
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":true}"));
            reader.beginObject();
            reader.nextName();
            reader.peek();
            reader.close();
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPrematurelyClosed_add563() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematurelyClosed_add563");
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.beginObject();
            reader.close();
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.close();
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":true}"));
            reader.beginObject();
            reader.beginObject();
            reader.nextName();
            reader.peek();
            reader.close();
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPrematurelyClosed_add564() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematurelyClosed_add564");
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.beginObject();
            reader.close();
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.close();
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":true}"));
            reader.beginObject();
            reader.nextName();
            reader.nextName();
            reader.peek();
            reader.close();
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPrematurelyClosed_add565() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematurelyClosed_add565");
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.beginObject();
            reader.close();
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.close();
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":true}"));
            reader.beginObject();
            reader.nextName();
            reader.peek();
            reader.peek();
            reader.close();
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPrematurelyClosed_add566() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematurelyClosed_add566");
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.beginObject();
            reader.close();
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.close();
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":true}"));
            reader.beginObject();
            reader.nextName();
            reader.peek();
            reader.close();
            reader.close();
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testPrematurelyClosed_add567() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematurelyClosed_add567");
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.beginObject();
            reader.close();
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.close();
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":true}"));
            reader.beginObject();
            reader.nextName();
            reader.peek();
            reader.close();
            reader.nextBoolean();
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPrematurelyClosed() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematurelyClosed");
        try {
            JsonReader reader = new JsonReader(reader("foo"));
            reader.beginObject();
            reader.close();
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.close();
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":true}"));
            reader.beginObject();
            reader.nextName();
            reader.peek();
            reader.close();
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPrematurelyClosed_literalMutation526() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematurelyClosed_literalMutation526");
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.beginObject();
            reader.close();
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("foo"));
            reader.close();
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":true}"));
            reader.beginObject();
            reader.nextName();
            reader.peek();
            reader.close();
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testPrematurelyClosed_literalMutation527() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrematurelyClosed_literalMutation527");
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.beginObject();
            reader.close();
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
            reader.close();
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            JsonReader reader = new JsonReader(reader("foo"));
            reader.beginObject();
            reader.nextName();
            reader.peek();
            reader.close();
            reader.nextBoolean();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNextFailuresDoNotAdvance_add526() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance_add526");
        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
        reader.beginObject();
        reader.beginObject();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        reader.close();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNextFailuresDoNotAdvance_add527() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance_add527");
        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
        reader.beginObject();
        try {
            reader.nextString();
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        reader.close();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNextFailuresDoNotAdvance_add528() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance_add528");
        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
        reader.beginObject();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        reader.close();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNextFailuresDoNotAdvance_add529() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance_add529");
        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
        reader.beginObject();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        reader.close();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNextFailuresDoNotAdvance_add530() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance_add530");
        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
        reader.beginObject();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        reader.close();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNextFailuresDoNotAdvance_add531() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance_add531");
        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
        reader.beginObject();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        reader.close();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNextFailuresDoNotAdvance_add532() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance_add532");
        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
        reader.beginObject();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        reader.close();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNextFailuresDoNotAdvance_add533() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance_add533");
        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
        reader.beginObject();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        reader.close();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNextFailuresDoNotAdvance_add534() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance_add534");
        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
        reader.beginObject();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        reader.close();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNextFailuresDoNotAdvance_add535() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance_add535");
        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
        reader.beginObject();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        reader.close();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNextFailuresDoNotAdvance_add536() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance_add536");
        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
        reader.beginObject();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        reader.close();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNextFailuresDoNotAdvance_add537() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance_add537");
        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
        reader.beginObject();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        reader.close();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNextFailuresDoNotAdvance_add538() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance_add538");
        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
        reader.beginObject();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        reader.close();
        reader.close();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testNextFailuresDoNotAdvance() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        reader.close();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNextFailuresDoNotAdvance_remove466() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance_remove466");
        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        reader.close();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNextFailuresDoNotAdvance_remove467() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance_remove467");
        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
        reader.beginObject();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        reader.close();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNextFailuresDoNotAdvance_remove468() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNextFailuresDoNotAdvance_remove468");
        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
        reader.beginObject();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),665,reader,664,reader.nextName());
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),667,reader,666,reader.nextBoolean());
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),668,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),670,reader,669,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIntegerMismatchFailuresDoNotAdvance_add377() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIntegerMismatchFailuresDoNotAdvance_add377");
        JsonReader reader = new JsonReader(reader("[1.5]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),520,reader,519,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIntegerMismatchFailuresDoNotAdvance_add378() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIntegerMismatchFailuresDoNotAdvance_add378");
        JsonReader reader = new JsonReader(reader("[1.5]"));
        reader.beginArray();
        try {
            reader.nextInt();
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),520,reader,519,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIntegerMismatchFailuresDoNotAdvance_add379() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIntegerMismatchFailuresDoNotAdvance_add379");
        JsonReader reader = new JsonReader(reader("[1.5]"));
        reader.beginArray();
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),520,reader,519,reader.nextDouble());
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testIntegerMismatchFailuresDoNotAdvance() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIntegerMismatchFailuresDoNotAdvance");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),520,reader,519,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIntegerMismatchFailuresDoNotAdvance_remove325() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIntegerMismatchFailuresDoNotAdvance_remove325");
        JsonReader reader = new JsonReader(reader("[1.5]"));
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),520,reader,519,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testIntegerMismatchFailuresDoNotAdvance_remove326() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIntegerMismatchFailuresDoNotAdvance_remove326");
        JsonReader reader = new JsonReader(reader("[1.5]"));
        reader.beginArray();
        try {
            reader.nextInt();
        } catch (NumberFormatException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),520,reader,519,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringNullIsNotNull_add705() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringNullIsNotNull_add705");
        JsonReader reader = new JsonReader(reader("[\"null\"]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringNullIsNotNull_add706() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringNullIsNotNull_add706");
        JsonReader reader = new JsonReader(reader("[\"null\"]"));
        reader.beginArray();
        try {
            reader.nextNull();
            reader.nextNull();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStringNullIsNotNull() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringNullIsNotNull");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringNullIsNotNull_remove573() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringNullIsNotNull_remove573");
        JsonReader reader = new JsonReader(reader("[\"null\"]"));
        try {
            reader.nextNull();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNullLiteralIsNotAString_add540() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNullLiteralIsNotAString_add540");
        JsonReader reader = new JsonReader(reader("[null]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNullLiteralIsNotAString_add541() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNullLiteralIsNotAString_add541");
        JsonReader reader = new JsonReader(reader("[null]"));
        reader.beginArray();
        try {
            reader.nextString();
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testNullLiteralIsNotAString() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNullLiteralIsNotAString");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testNullLiteralIsNotAString_remove469() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNullLiteralIsNotAString_remove469");
        JsonReader reader = new JsonReader(reader("[null]"));
        try {
            reader.nextString();
        } catch (IllegalStateException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictNameValueSeparator_add633() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNameValueSeparator_add633");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),800,reader,799,reader.nextName());
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),802,reader,801,reader.nextName());
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictNameValueSeparator_add634() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNameValueSeparator_add634");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),800,reader,799,reader.nextName());
        try {
            reader.nextBoolean();
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),802,reader,801,reader.nextName());
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictNameValueSeparator_add635() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNameValueSeparator_add635");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),800,reader,799,reader.nextName());
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),802,reader,801,reader.nextName());
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictNameValueSeparator_add636() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNameValueSeparator_add636");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),800,reader,799,reader.nextName());
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),802,reader,801,reader.nextName());
        try {
            reader.nextBoolean();
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictNameValueSeparator() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNameValueSeparator");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),800,reader,799,reader.nextName());
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),802,reader,801,reader.nextName());
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictNameValueSeparator_literalMutation572() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNameValueSeparator_literalMutation572");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),800,reader,799,reader.nextName());
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),802,reader,801,reader.nextName());
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictNameValueSeparator_remove538() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNameValueSeparator_remove538");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),800,reader,799,reader.nextName());
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),802,reader,801,reader.nextName());
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictNameValueSeparator_remove539() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNameValueSeparator_remove539");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),800,reader,799,reader.nextName());
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),802,reader,801,reader.nextName());
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNameValueSeparator_add395() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNameValueSeparator_add395");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),543,reader,542,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),545,reader,544,reader.nextBoolean());
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),547,reader,546,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),549,reader,548,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNameValueSeparator_add396() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNameValueSeparator_add396");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.setLenient(true);
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),543,reader,542,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),545,reader,544,reader.nextBoolean());
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),547,reader,546,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),549,reader,548,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNameValueSeparator_add397() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNameValueSeparator_add397");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),543,reader,542,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),545,reader,544,reader.nextBoolean());
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),547,reader,546,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),549,reader,548,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNameValueSeparator_add398() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNameValueSeparator_add398");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),543,reader,542,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),545,reader,544,reader.nextBoolean());
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.setLenient(true);
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),547,reader,546,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),549,reader,548,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientNameValueSeparator() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNameValueSeparator");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),543,reader,542,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),545,reader,544,reader.nextBoolean());
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),547,reader,546,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),549,reader,548,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientNameValueSeparator_literalMutation394() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNameValueSeparator_literalMutation394");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),543,reader,542,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),545,reader,544,reader.nextBoolean());
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),547,reader,546,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),549,reader,548,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientNameValueSeparator_literalMutation395() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNameValueSeparator_literalMutation395");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),543,reader,542,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),545,reader,544,reader.nextBoolean());
        reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),547,reader,546,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),549,reader,548,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientNameValueSeparator_literalMutation396() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNameValueSeparator_literalMutation396");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),543,reader,542,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),545,reader,544,reader.nextBoolean());
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),547,reader,546,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),549,reader,548,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNameValueSeparator_remove341() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNameValueSeparator_remove341");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),543,reader,542,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),545,reader,544,reader.nextBoolean());
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),547,reader,546,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),549,reader,548,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNameValueSeparator_remove342() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNameValueSeparator_remove342");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),543,reader,542,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),545,reader,544,reader.nextBoolean());
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),547,reader,546,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),549,reader,548,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNameValueSeparator_remove343() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNameValueSeparator_remove343");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),543,reader,542,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),545,reader,544,reader.nextBoolean());
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),547,reader,546,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),549,reader,548,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNameValueSeparator_remove344() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNameValueSeparator_remove344");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),543,reader,542,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),545,reader,544,reader.nextBoolean());
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),547,reader,546,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),549,reader,548,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictNameValueSeparatorWithSkipValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNameValueSeparatorWithSkipValue");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),796,reader,795,reader.nextName());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),798,reader,797,reader.nextName());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictNameValueSeparatorWithSkipValue_add637() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNameValueSeparatorWithSkipValue_add637");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),796,reader,795,reader.nextName());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),798,reader,797,reader.nextName());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }



    @Test(timeout = 1000)
    public void testStrictNameValueSeparatorWithSkipValue_add639() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNameValueSeparatorWithSkipValue_add639");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),796,reader,795,reader.nextName());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),798,reader,797,reader.nextName());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }



    public void testStrictNameValueSeparatorWithSkipValue_literalMutation573() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNameValueSeparatorWithSkipValue_literalMutation573");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),796,reader,795,reader.nextName());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),798,reader,797,reader.nextName());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictNameValueSeparatorWithSkipValue_literalMutation574() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNameValueSeparatorWithSkipValue_literalMutation574");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),796,reader,795,reader.nextName());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),798,reader,797,reader.nextName());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictNameValueSeparatorWithSkipValue_remove540() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNameValueSeparatorWithSkipValue_remove540");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),796,reader,795,reader.nextName());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),798,reader,797,reader.nextName());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictNameValueSeparatorWithSkipValue_remove541() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNameValueSeparatorWithSkipValue_remove541");
        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),796,reader,795,reader.nextName());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("{\"a\"=>true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),798,reader,797,reader.nextName());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCommentsInStringValue_add329() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCommentsInStringValue_add329");
        JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),433,reader,432,reader.nextString());
        reader.endArray();
        reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),435,reader,434,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),437,reader,436,reader.nextString());
        reader.endObject();
        reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),439,reader,438,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),441,reader,440,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCommentsInStringValue_add330() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCommentsInStringValue_add330");
        JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),433,reader,432,reader.nextString());
        reader.endArray();
        reader.endArray();
        reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),435,reader,434,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),437,reader,436,reader.nextString());
        reader.endObject();
        reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),439,reader,438,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),441,reader,440,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCommentsInStringValue_add331() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCommentsInStringValue_add331");
        JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),433,reader,432,reader.nextString());
        reader.endArray();
        reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),435,reader,434,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),437,reader,436,reader.nextString());
        reader.endObject();
        reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),439,reader,438,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),441,reader,440,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCommentsInStringValue_add332() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCommentsInStringValue_add332");
        JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),433,reader,432,reader.nextString());
        reader.endArray();
        reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),435,reader,434,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),437,reader,436,reader.nextString());
        reader.endObject();
        reader.endObject();
        reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),439,reader,438,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),441,reader,440,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCommentsInStringValue_add333() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCommentsInStringValue_add333");
        JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),433,reader,432,reader.nextString());
        reader.endArray();
        reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),435,reader,434,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),437,reader,436,reader.nextString());
        reader.endObject();
        reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),439,reader,438,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),441,reader,440,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCommentsInStringValue_add334() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCommentsInStringValue_add334");
        JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),433,reader,432,reader.nextString());
        reader.endArray();
        reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),435,reader,434,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),437,reader,436,reader.nextString());
        reader.endObject();
        reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),439,reader,438,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),441,reader,440,reader.nextString());
        reader.endObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCommentsInStringValue() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCommentsInStringValue");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),433,reader,432,reader.nextString());
        reader.endArray();
        reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),435,reader,434,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),437,reader,436,reader.nextString());
        reader.endObject();
        reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),439,reader,438,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),441,reader,440,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCommentsInStringValue_literalMutation323() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCommentsInStringValue_literalMutation323");
        JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),433,reader,432,reader.nextString());
        reader.endArray();
        reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),435,reader,434,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),437,reader,436,reader.nextString());
        reader.endObject();
        reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),439,reader,438,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),441,reader,440,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testCommentsInStringValue_literalMutation324() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCommentsInStringValue_literalMutation324");
        JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),433,reader,432,reader.nextString());
        reader.endArray();
        reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),435,reader,434,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),437,reader,436,reader.nextString());
        reader.endObject();
        reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),439,reader,438,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),441,reader,440,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCommentsInStringValue_remove283() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCommentsInStringValue_remove283");
        JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),433,reader,432,reader.nextString());
        reader.endArray();
        reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),435,reader,434,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),437,reader,436,reader.nextString());
        reader.endObject();
        reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),439,reader,438,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),441,reader,440,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCommentsInStringValue_remove284() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCommentsInStringValue_remove284");
        JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),433,reader,432,reader.nextString());
        reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),435,reader,434,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),437,reader,436,reader.nextString());
        reader.endObject();
        reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),439,reader,438,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),441,reader,440,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCommentsInStringValue_remove285() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCommentsInStringValue_remove285");
        JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),433,reader,432,reader.nextString());
        reader.endArray();
        reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),435,reader,434,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),437,reader,436,reader.nextString());
        reader.endObject();
        reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),439,reader,438,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),441,reader,440,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCommentsInStringValue_remove286() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCommentsInStringValue_remove286");
        JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),433,reader,432,reader.nextString());
        reader.endArray();
        reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),435,reader,434,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),437,reader,436,reader.nextString());
        reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),439,reader,438,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),441,reader,440,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCommentsInStringValue_remove287() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCommentsInStringValue_remove287");
        JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),433,reader,432,reader.nextString());
        reader.endArray();
        reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),435,reader,434,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),437,reader,436,reader.nextString());
        reader.endObject();
        reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),439,reader,438,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),441,reader,440,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testCommentsInStringValue_remove288() throws Exception {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCommentsInStringValue_remove288");
        JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),433,reader,432,reader.nextString());
        reader.endArray();
        reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),435,reader,434,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),437,reader,436,reader.nextString());
        reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),439,reader,438,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),441,reader,440,reader.nextString());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictComments_add613() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictComments_add613");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictComments_add614() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictComments_add614");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictComments_add615() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictComments_add615");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictComments_add616() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictComments_add616");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictComments_add617() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictComments_add617");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictComments_add618() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictComments_add618");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictComments() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictComments");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictComments_literalMutation563() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictComments_literalMutation563");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictComments_literalMutation564() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictComments_literalMutation564");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictComments_remove527() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictComments_remove527");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictComments_remove528() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictComments_remove528");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictComments_remove529() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictComments_remove529");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientComments_add381() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_add381");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientComments_add382() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_add382");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientComments_add383() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_add383");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientComments_add384() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_add384");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientComments_add385() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_add385");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientComments_add386() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_add386");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientComments() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientComments_literalMutation384() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_literalMutation384");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.setLenient(false);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientComments_literalMutation385() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_literalMutation385");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientComments_literalMutation386() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_literalMutation386");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(false);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientComments_literalMutation387() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_literalMutation387");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientComments_literalMutation388() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_literalMutation388");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientComments_remove328() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_remove328");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientComments_remove329() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_remove329");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientComments_remove330() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_remove330");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientComments_remove331() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_remove331");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientComments_remove332() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_remove332");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientComments_remove333() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientComments_remove333");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),528,reader,527,reader.nextBoolean());
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),530,reader,529,reader.nextBoolean());
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),532,reader,531,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictCommentsWithSkipValue_add619() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictCommentsWithSkipValue_add619");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }


    @Test(timeout = 1000)
    public void testStrictCommentsWithSkipValue_add621() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictCommentsWithSkipValue_add621");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }



    @Test(timeout = 1000)
    public void testStrictCommentsWithSkipValue_add623() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictCommentsWithSkipValue_add623");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }



    public void testStrictCommentsWithSkipValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictCommentsWithSkipValue");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictCommentsWithSkipValue_literalMutation566() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictCommentsWithSkipValue_literalMutation566");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictCommentsWithSkipValue_literalMutation567() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictCommentsWithSkipValue_literalMutation567");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictCommentsWithSkipValue_remove530() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictCommentsWithSkipValue_remove530");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictCommentsWithSkipValue_remove531() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictCommentsWithSkipValue_remove531");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictCommentsWithSkipValue_remove532() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictCommentsWithSkipValue_remove532");
        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnquotedNames_add688() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnquotedNames_add688");
        JsonReader reader = new JsonReader(reader("{a:true}"));
        reader.beginObject();
        reader.beginObject();
        try {
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnquotedNames_add689() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnquotedNames_add689");
        JsonReader reader = new JsonReader(reader("{a:true}"));
        reader.beginObject();
        try {
            reader.nextName();
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictUnquotedNames() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnquotedNames");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        try {
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnquotedNames_remove561() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnquotedNames_remove561");
        JsonReader reader = new JsonReader(reader("{a:true}"));
        try {
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnquotedNames_add440() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnquotedNames_add440");
        JsonReader reader = new JsonReader(reader("{a:true}"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),604,reader,603,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnquotedNames_add441() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnquotedNames_add441");
        JsonReader reader = new JsonReader(reader("{a:true}"));
        reader.setLenient(true);
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),604,reader,603,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientUnquotedNames() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnquotedNames");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),604,reader,603,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientUnquotedNames_literalMutation428() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnquotedNames_literalMutation428");
        JsonReader reader = new JsonReader(reader("{a:true}"));
        reader.setLenient(false);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),604,reader,603,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnquotedNames_remove385() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnquotedNames_remove385");
        JsonReader reader = new JsonReader(reader("{a:true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),604,reader,603,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnquotedNames_remove386() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnquotedNames_remove386");
        JsonReader reader = new JsonReader(reader("{a:true}"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),604,reader,603,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnquotedNamesWithSkipValue_add690() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnquotedNamesWithSkipValue_add690");
        JsonReader reader = new JsonReader(reader("{a:true}"));
        reader.beginObject();
        reader.beginObject();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }



    public void testStrictUnquotedNamesWithSkipValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnquotedNamesWithSkipValue");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnquotedNamesWithSkipValue_remove562() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnquotedNamesWithSkipValue_remove562");
        JsonReader reader = new JsonReader(reader("{a:true}"));
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSingleQuotedNames_add661() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSingleQuotedNames_add661");
        JsonReader reader = new JsonReader(reader("{\'a\':true}"));
        reader.beginObject();
        reader.beginObject();
        try {
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSingleQuotedNames_add662() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSingleQuotedNames_add662");
        JsonReader reader = new JsonReader(reader("{\'a\':true}"));
        reader.beginObject();
        try {
            reader.nextName();
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictSingleQuotedNames() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSingleQuotedNames");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        try {
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSingleQuotedNames_remove549() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSingleQuotedNames_remove549");
        JsonReader reader = new JsonReader(reader("{\'a\':true}"));
        try {
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientSingleQuotedNames_add417() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSingleQuotedNames_add417");
        JsonReader reader = new JsonReader(reader("{\'a\':true}"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),585,reader,584,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientSingleQuotedNames_add418() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSingleQuotedNames_add418");
        JsonReader reader = new JsonReader(reader("{\'a\':true}"));
        reader.setLenient(true);
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),585,reader,584,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientSingleQuotedNames() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSingleQuotedNames");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),585,reader,584,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientSingleQuotedNames_literalMutation412() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSingleQuotedNames_literalMutation412");
        JsonReader reader = new JsonReader(reader("{\'a\':true}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),585,reader,584,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientSingleQuotedNames_remove362() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSingleQuotedNames_remove362");
        JsonReader reader = new JsonReader(reader("{\'a\':true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),585,reader,584,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientSingleQuotedNames_remove363() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSingleQuotedNames_remove363");
        JsonReader reader = new JsonReader(reader("{\'a\':true}"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),585,reader,584,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSingleQuotedNamesWithSkipValue_add663() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSingleQuotedNamesWithSkipValue_add663");
        JsonReader reader = new JsonReader(reader("{\'a\':true}"));
        reader.beginObject();
        reader.beginObject();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }



    public void testStrictSingleQuotedNamesWithSkipValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSingleQuotedNamesWithSkipValue");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSingleQuotedNamesWithSkipValue_remove550() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSingleQuotedNamesWithSkipValue_remove550");
        JsonReader reader = new JsonReader(reader("{\'a\':true}"));
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnquotedStrings_add692() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnquotedStrings_add692");
        JsonReader reader = new JsonReader(reader("[a]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.nextString();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnquotedStrings_add693() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnquotedStrings_add693");
        JsonReader reader = new JsonReader(reader("[a]"));
        reader.beginArray();
        try {
            reader.nextString();
            reader.nextString();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictUnquotedStrings() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnquotedStrings");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.nextString();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnquotedStrings_remove563() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnquotedStrings_remove563");
        JsonReader reader = new JsonReader(reader("[a]"));
        try {
            reader.nextString();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictUnquotedStringsWithSkipValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnquotedStringsWithSkipValue");
        JsonReader reader = new JsonReader(reader("[a]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnquotedStringsWithSkipValue_add694() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnquotedStringsWithSkipValue_add694");
        JsonReader reader = new JsonReader(reader("[a]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }


    public void testStrictUnquotedStringsWithSkipValue_literalMutation602() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnquotedStringsWithSkipValue_literalMutation602");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnquotedStringsWithSkipValue_remove564() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnquotedStringsWithSkipValue_remove564");
        JsonReader reader = new JsonReader(reader("[a]"));
        try {
            reader.skipValue();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnquotedStrings_add442() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnquotedStrings_add442");
        JsonReader reader = new JsonReader(reader("[a]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),606,reader,605,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnquotedStrings_add443() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnquotedStrings_add443");
        JsonReader reader = new JsonReader(reader("[a]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),606,reader,605,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientUnquotedStrings() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnquotedStrings");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),606,reader,605,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientUnquotedStrings_literalMutation430() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnquotedStrings_literalMutation430");
        JsonReader reader = new JsonReader(reader("[a]"));
        reader.setLenient(false);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),606,reader,605,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnquotedStrings_remove387() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnquotedStrings_remove387");
        JsonReader reader = new JsonReader(reader("[a]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),606,reader,605,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnquotedStrings_remove388() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnquotedStrings_remove388");
        JsonReader reader = new JsonReader(reader("[a]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),606,reader,605,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSingleQuotedStrings_add665() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSingleQuotedStrings_add665");
        JsonReader reader = new JsonReader(reader("[\'a\']"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSingleQuotedStrings_add666() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSingleQuotedStrings_add666");
        JsonReader reader = new JsonReader(reader("[\'a\']"));
        reader.beginArray();
        try {
            reader.nextString();
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictSingleQuotedStrings() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSingleQuotedStrings");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSingleQuotedStrings_remove551() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSingleQuotedStrings_remove551");
        JsonReader reader = new JsonReader(reader("[\'a\']"));
        try {
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientSingleQuotedStrings_add419() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSingleQuotedStrings_add419");
        JsonReader reader = new JsonReader(reader("[\'a\']"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),587,reader,586,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientSingleQuotedStrings_add420() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSingleQuotedStrings_add420");
        JsonReader reader = new JsonReader(reader("[\'a\']"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),587,reader,586,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientSingleQuotedStrings() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSingleQuotedStrings");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),587,reader,586,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientSingleQuotedStrings_literalMutation414() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSingleQuotedStrings_literalMutation414");
        JsonReader reader = new JsonReader(reader("[\'a\']"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),587,reader,586,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientSingleQuotedStrings_remove364() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSingleQuotedStrings_remove364");
        JsonReader reader = new JsonReader(reader("[\'a\']"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),587,reader,586,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientSingleQuotedStrings_remove365() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSingleQuotedStrings_remove365");
        JsonReader reader = new JsonReader(reader("[\'a\']"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),587,reader,586,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSingleQuotedStringsWithSkipValue_add667() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSingleQuotedStringsWithSkipValue_add667");
        JsonReader reader = new JsonReader(reader("[\'a\']"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSingleQuotedStringsWithSkipValue_add668() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSingleQuotedStringsWithSkipValue_add668");
        JsonReader reader = new JsonReader(reader("[\'a\']"));
        reader.beginArray();
        try {
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictSingleQuotedStringsWithSkipValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSingleQuotedStringsWithSkipValue");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSingleQuotedStringsWithSkipValue_remove552() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSingleQuotedStringsWithSkipValue_remove552");
        JsonReader reader = new JsonReader(reader("[\'a\']"));
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSemicolonDelimitedArray_add649() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedArray_add649");
        JsonReader reader = new JsonReader(reader("[true;true]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.nextBoolean();
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSemicolonDelimitedArray_add650() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedArray_add650");
        JsonReader reader = new JsonReader(reader("[true;true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
            reader.nextBoolean();
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSemicolonDelimitedArray_add651() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedArray_add651");
        JsonReader reader = new JsonReader(reader("[true;true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
            reader.nextBoolean();
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictSemicolonDelimitedArray() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedArray");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.nextBoolean();
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSemicolonDelimitedArray_remove545() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedArray_remove545");
        JsonReader reader = new JsonReader(reader("[true;true]"));
        try {
            reader.nextBoolean();
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientSemicolonDelimitedArray_add413() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSemicolonDelimitedArray_add413");
        JsonReader reader = new JsonReader(reader("[true;true]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),575,reader,574,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),577,reader,576,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientSemicolonDelimitedArray_add414() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSemicolonDelimitedArray_add414");
        JsonReader reader = new JsonReader(reader("[true;true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),575,reader,574,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),577,reader,576,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientSemicolonDelimitedArray() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSemicolonDelimitedArray");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),575,reader,574,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),577,reader,576,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientSemicolonDelimitedArray_literalMutation408() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSemicolonDelimitedArray_literalMutation408");
        JsonReader reader = new JsonReader(reader("[true;true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),575,reader,574,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),577,reader,576,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientSemicolonDelimitedArray_remove358() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSemicolonDelimitedArray_remove358");
        JsonReader reader = new JsonReader(reader("[true;true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),575,reader,574,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),577,reader,576,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientSemicolonDelimitedArray_remove359() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSemicolonDelimitedArray_remove359");
        JsonReader reader = new JsonReader(reader("[true;true]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),575,reader,574,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),577,reader,576,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSemicolonDelimitedArrayWithSkipValue_add652() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedArrayWithSkipValue_add652");
        JsonReader reader = new JsonReader(reader("[true;true]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSemicolonDelimitedArrayWithSkipValue_add653() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedArrayWithSkipValue_add653");
        JsonReader reader = new JsonReader(reader("[true;true]"));
        reader.beginArray();
        try {
            reader.skipValue();
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSemicolonDelimitedArrayWithSkipValue_add654() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedArrayWithSkipValue_add654");
        JsonReader reader = new JsonReader(reader("[true;true]"));
        reader.beginArray();
        try {
            reader.skipValue();
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictSemicolonDelimitedArrayWithSkipValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedArrayWithSkipValue");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSemicolonDelimitedArrayWithSkipValue_remove546() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedArrayWithSkipValue_remove546");
        JsonReader reader = new JsonReader(reader("[true;true]"));
        try {
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSemicolonDelimitedNameValuePair_add655() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedNameValuePair_add655");
        JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),806,reader,805,reader.nextName());
        try {
            reader.nextBoolean();
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSemicolonDelimitedNameValuePair_add656() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedNameValuePair_add656");
        JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),806,reader,805,reader.nextName());
        try {
            reader.nextBoolean();
            reader.nextBoolean();
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSemicolonDelimitedNameValuePair_add657() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedNameValuePair_add657");
        JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),806,reader,805,reader.nextName());
        try {
            reader.nextBoolean();
            reader.nextName();
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictSemicolonDelimitedNameValuePair() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedNameValuePair");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),806,reader,805,reader.nextName());
        try {
            reader.nextBoolean();
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSemicolonDelimitedNameValuePair_remove547() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedNameValuePair_remove547");
        JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),806,reader,805,reader.nextName());
        try {
            reader.nextBoolean();
            reader.nextName();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientSemicolonDelimitedNameValuePair_add415() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSemicolonDelimitedNameValuePair_add415");
        JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),579,reader,578,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),581,reader,580,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),583,reader,582,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientSemicolonDelimitedNameValuePair_add416() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSemicolonDelimitedNameValuePair_add416");
        JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
        reader.setLenient(true);
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),579,reader,578,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),581,reader,580,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),583,reader,582,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientSemicolonDelimitedNameValuePair() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSemicolonDelimitedNameValuePair");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),579,reader,578,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),581,reader,580,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),583,reader,582,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientSemicolonDelimitedNameValuePair_literalMutation410() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSemicolonDelimitedNameValuePair_literalMutation410");
        JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),579,reader,578,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),581,reader,580,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),583,reader,582,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientSemicolonDelimitedNameValuePair_remove360() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSemicolonDelimitedNameValuePair_remove360");
        JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),579,reader,578,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),581,reader,580,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),583,reader,582,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientSemicolonDelimitedNameValuePair_remove361() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientSemicolonDelimitedNameValuePair_remove361");
        JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),579,reader,578,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),581,reader,580,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),583,reader,582,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSemicolonDelimitedNameValuePairWithSkipValue_add658() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedNameValuePairWithSkipValue_add658");
        JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),804,reader,803,reader.nextName());
        try {
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSemicolonDelimitedNameValuePairWithSkipValue_add659() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedNameValuePairWithSkipValue_add659");
        JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),804,reader,803,reader.nextName());
        try {
            reader.skipValue();
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSemicolonDelimitedNameValuePairWithSkipValue_add660() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedNameValuePairWithSkipValue_add660");
        JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),804,reader,803,reader.nextName());
        try {
            reader.skipValue();
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictSemicolonDelimitedNameValuePairWithSkipValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedNameValuePairWithSkipValue");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),804,reader,803,reader.nextName());
        try {
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictSemicolonDelimitedNameValuePairWithSkipValue_remove548() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictSemicolonDelimitedNameValuePairWithSkipValue_remove548");
        JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),804,reader,803,reader.nextName());
        try {
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparators_add672() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparators_add672");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),812,reader,811,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),814,reader,813,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparators_add673() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparators_add673");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),812,reader,811,reader.nextBoolean());
        try {
            reader.nextNull();
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),814,reader,813,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparators_add674() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparators_add674");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),812,reader,811,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),814,reader,813,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparators_add675() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparators_add675");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),812,reader,811,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.nextNull();
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),814,reader,813,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparators_add676() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparators_add676");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),812,reader,811,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),814,reader,813,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparators_add677() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparators_add677");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),812,reader,811,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),814,reader,813,reader.nextBoolean());
        try {
            reader.nextNull();
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparators_add678() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparators_add678");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),812,reader,811,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),814,reader,813,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparators_add679() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparators_add679");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),812,reader,811,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),814,reader,813,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.nextNull();
            reader.nextNull();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictUnnecessaryArraySeparators() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparators");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),812,reader,811,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),814,reader,813,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictUnnecessaryArraySeparators_literalMutation592() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparators_literalMutation592");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),812,reader,811,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),814,reader,813,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictUnnecessaryArraySeparators_literalMutation593() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparators_literalMutation593");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),812,reader,811,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("foo"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),814,reader,813,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictUnnecessaryArraySeparators_literalMutation594() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparators_literalMutation594");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),812,reader,811,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),814,reader,813,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparators_remove553() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparators_remove553");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),812,reader,811,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),814,reader,813,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparators_remove554() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparators_remove554");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),812,reader,811,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),814,reader,813,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparators_remove555() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparators_remove555");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),812,reader,811,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),814,reader,813,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparators_remove556() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparators_remove556");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),812,reader,811,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),814,reader,813,reader.nextBoolean());
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.nextNull();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add423() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add423");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add424() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add424");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add425() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add425");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add426() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add426");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add427() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add427");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add428() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add428");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add429() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add429");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add430() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add430");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add431() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add431");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add432() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add432");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add433() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add433");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add434() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add434");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add435() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add435");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add436() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add436");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add437() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add437");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add438() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add438");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_add439() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_add439");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientUnnecessaryArraySeparators() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientUnnecessaryArraySeparators_literalMutation420() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_literalMutation420");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientUnnecessaryArraySeparators_literalMutation421() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_literalMutation421");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientUnnecessaryArraySeparators_literalMutation422() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_literalMutation422");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(false);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientUnnecessaryArraySeparators_literalMutation423() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_literalMutation423");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientUnnecessaryArraySeparators_literalMutation424() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_literalMutation424");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(false);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientUnnecessaryArraySeparators_literalMutation425() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_literalMutation425");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientUnnecessaryArraySeparators_literalMutation426() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_literalMutation426");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(false);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove368() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove368");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove369() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove369");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove370() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove370");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove371() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove371");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove372() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove372");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove373() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove373");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove374() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove374");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove375() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove375");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove376() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove376");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove377() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove377");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove378() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove378");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove379() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove379");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove380() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove380");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove381() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove381");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove382() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove382");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove383() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove383");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientUnnecessaryArraySeparators_remove384() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientUnnecessaryArraySeparators_remove384");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),596,reader,595,reader.nextBoolean());
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),598,reader,597,reader.nextBoolean());
        reader = new JsonReader(reader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),600,reader,599,reader.nextBoolean());
        reader.endArray();
        reader = new JsonReader(reader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),602,reader,601,reader.nextBoolean());
        reader.nextNull();
        reader.endArray();
        reader = new JsonReader(reader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_add680() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparatorsWithSkipValue_add680");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),808,reader,807,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),810,reader,809,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_add681() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparatorsWithSkipValue_add681");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),808,reader,807,reader.nextBoolean());
        try {
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),810,reader,809,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_add682() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparatorsWithSkipValue_add682");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),808,reader,807,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),810,reader,809,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_add683() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparatorsWithSkipValue_add683");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),808,reader,807,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),810,reader,809,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_add684() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparatorsWithSkipValue_add684");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),808,reader,807,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),810,reader,809,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_add685() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparatorsWithSkipValue_add685");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),808,reader,807,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),810,reader,809,reader.nextBoolean());
        try {
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_add686() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparatorsWithSkipValue_add686");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),808,reader,807,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),810,reader,809,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_add687() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparatorsWithSkipValue_add687");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),808,reader,807,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),810,reader,809,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictUnnecessaryArraySeparatorsWithSkipValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparatorsWithSkipValue");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),808,reader,807,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),810,reader,809,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_literalMutation596() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparatorsWithSkipValue_literalMutation596");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),808,reader,807,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),810,reader,809,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_literalMutation597() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparatorsWithSkipValue_literalMutation597");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),808,reader,807,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("foo"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),810,reader,809,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_literalMutation598() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparatorsWithSkipValue_literalMutation598");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),808,reader,807,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),810,reader,809,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_remove557() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparatorsWithSkipValue_remove557");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),808,reader,807,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),810,reader,809,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_remove558() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparatorsWithSkipValue_remove558");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),808,reader,807,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),810,reader,809,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_remove559() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparatorsWithSkipValue_remove559");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),808,reader,807,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),810,reader,809,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_remove560() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictUnnecessaryArraySeparatorsWithSkipValue_remove560");
        JsonReader reader = new JsonReader(reader("[true,,true]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),808,reader,807,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,true]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[true,]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),810,reader,809,reader.nextBoolean());
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        reader = new JsonReader(reader("[,]"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictMultipleTopLevelValues_add627() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictMultipleTopLevelValues_add627");
        JsonReader reader = new JsonReader(reader("[] []"));
        reader.beginArray();
        reader.beginArray();
        reader.endArray();
        try {
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictMultipleTopLevelValues_add628() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictMultipleTopLevelValues_add628");
        JsonReader reader = new JsonReader(reader("[] []"));
        reader.beginArray();
        reader.endArray();
        reader.endArray();
        try {
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictMultipleTopLevelValues_add629() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictMultipleTopLevelValues_add629");
        JsonReader reader = new JsonReader(reader("[] []"));
        reader.beginArray();
        reader.endArray();
        try {
            reader.peek();
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictMultipleTopLevelValues() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictMultipleTopLevelValues");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        reader.endArray();
        try {
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictMultipleTopLevelValues_remove534() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictMultipleTopLevelValues_remove534");
        JsonReader reader = new JsonReader(reader("[] []"));
        reader.endArray();
        try {
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictMultipleTopLevelValues_remove535() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictMultipleTopLevelValues_remove535");
        JsonReader reader = new JsonReader(reader("[] []"));
        reader.beginArray();
        try {
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientMultipleTopLevelValues_add390() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientMultipleTopLevelValues_add390");
        JsonReader reader = new JsonReader(reader("[] true {}"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),538,reader,537,reader.nextBoolean());
        reader.beginObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),539,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),541,reader,540,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientMultipleTopLevelValues_add391() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientMultipleTopLevelValues_add391");
        JsonReader reader = new JsonReader(reader("[] true {}"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),538,reader,537,reader.nextBoolean());
        reader.beginObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),539,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),541,reader,540,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientMultipleTopLevelValues_add392() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientMultipleTopLevelValues_add392");
        JsonReader reader = new JsonReader(reader("[] true {}"));
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),538,reader,537,reader.nextBoolean());
        reader.beginObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),539,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),541,reader,540,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientMultipleTopLevelValues_add393() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientMultipleTopLevelValues_add393");
        JsonReader reader = new JsonReader(reader("[] true {}"));
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),538,reader,537,reader.nextBoolean());
        reader.beginObject();
        reader.beginObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),539,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),541,reader,540,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientMultipleTopLevelValues_add394() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientMultipleTopLevelValues_add394");
        JsonReader reader = new JsonReader(reader("[] true {}"));
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),538,reader,537,reader.nextBoolean());
        reader.beginObject();
        reader.endObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),539,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),541,reader,540,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientMultipleTopLevelValues() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientMultipleTopLevelValues");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),538,reader,537,reader.nextBoolean());
        reader.beginObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),539,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),541,reader,540,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientMultipleTopLevelValues_literalMutation392() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientMultipleTopLevelValues_literalMutation392");
        JsonReader reader = new JsonReader(reader("[] true {}"));
        reader.setLenient(false);
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),538,reader,537,reader.nextBoolean());
        reader.beginObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),539,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),541,reader,540,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientMultipleTopLevelValues_remove336() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientMultipleTopLevelValues_remove336");
        JsonReader reader = new JsonReader(reader("[] true {}"));
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),538,reader,537,reader.nextBoolean());
        reader.beginObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),539,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),541,reader,540,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientMultipleTopLevelValues_remove337() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientMultipleTopLevelValues_remove337");
        JsonReader reader = new JsonReader(reader("[] true {}"));
        reader.setLenient(true);
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),538,reader,537,reader.nextBoolean());
        reader.beginObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),539,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),541,reader,540,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientMultipleTopLevelValues_remove338() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientMultipleTopLevelValues_remove338");
        JsonReader reader = new JsonReader(reader("[] true {}"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),538,reader,537,reader.nextBoolean());
        reader.beginObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),539,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),541,reader,540,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientMultipleTopLevelValues_remove339() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientMultipleTopLevelValues_remove339");
        JsonReader reader = new JsonReader(reader("[] true {}"));
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),538,reader,537,reader.nextBoolean());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),539,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),541,reader,540,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientMultipleTopLevelValues_remove340() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientMultipleTopLevelValues_remove340");
        JsonReader reader = new JsonReader(reader("[] true {}"));
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),538,reader,537,reader.nextBoolean());
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),539,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),541,reader,540,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictMultipleTopLevelValuesWithSkipValue_add630() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictMultipleTopLevelValuesWithSkipValue_add630");
        JsonReader reader = new JsonReader(reader("[] []"));
        reader.beginArray();
        reader.beginArray();
        reader.endArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictMultipleTopLevelValuesWithSkipValue_add631() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictMultipleTopLevelValuesWithSkipValue_add631");
        JsonReader reader = new JsonReader(reader("[] []"));
        reader.beginArray();
        reader.endArray();
        reader.endArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictMultipleTopLevelValuesWithSkipValue_add632() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictMultipleTopLevelValuesWithSkipValue_add632");
        JsonReader reader = new JsonReader(reader("[] []"));
        reader.beginArray();
        reader.endArray();
        try {
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictMultipleTopLevelValuesWithSkipValue() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictMultipleTopLevelValuesWithSkipValue");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        reader.endArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictMultipleTopLevelValuesWithSkipValue_remove536() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictMultipleTopLevelValuesWithSkipValue_remove536");
        JsonReader reader = new JsonReader(reader("[] []"));
        reader.endArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictMultipleTopLevelValuesWithSkipValue_remove537() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictMultipleTopLevelValuesWithSkipValue_remove537");
        JsonReader reader = new JsonReader(reader("[] []"));
        reader.beginArray();
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictTopLevelString_add669() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictTopLevelString_add669");
        JsonReader reader = new JsonReader(reader("\"a\""));
        try {
            reader.nextString();
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictTopLevelString() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictTopLevelString");
        JsonReader reader = new JsonReader(reader("foo"));
        try {
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientTopLevelString_add421() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientTopLevelString_add421");
        JsonReader reader = new JsonReader(reader("\"a\""));
        reader.setLenient(true);
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),589,reader,588,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),590,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),592,reader,591,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientTopLevelString() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientTopLevelString");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),589,reader,588,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),590,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),592,reader,591,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientTopLevelString_literalMutation416() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientTopLevelString_literalMutation416");
        JsonReader reader = new JsonReader(reader("\"a\""));
        reader.setLenient(false);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),589,reader,588,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),590,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),592,reader,591,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientTopLevelString_remove366() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientTopLevelString_remove366");
        JsonReader reader = new JsonReader(reader("\"a\""));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),589,reader,588,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),590,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),592,reader,591,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictTopLevelValueType_add670() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictTopLevelValueType_add670");
        JsonReader reader = new JsonReader(reader("true"));
        try {
            reader.nextBoolean();
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictTopLevelValueType() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictTopLevelValueType");
        JsonReader reader = new JsonReader(reader("foo"));
        try {
            reader.nextBoolean();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientTopLevelValueType_add422() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientTopLevelValueType_add422");
        JsonReader reader = new JsonReader(reader("true"));
        reader.setLenient(true);
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),594,reader,593,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientTopLevelValueType() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientTopLevelValueType");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),594,reader,593,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientTopLevelValueType_literalMutation418() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientTopLevelValueType_literalMutation418");
        JsonReader reader = new JsonReader(reader("true"));
        reader.setLenient(false);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),594,reader,593,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientTopLevelValueType_remove367() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientTopLevelValueType_remove367");
        JsonReader reader = new JsonReader(reader("true"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),594,reader,593,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictTopLevelValueTypeWithSkipValue_add671() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictTopLevelValueTypeWithSkipValue_add671");
        JsonReader reader = new JsonReader(reader("true"));
        try {
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictTopLevelValueTypeWithSkipValue() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictTopLevelValueTypeWithSkipValue");
        JsonReader reader = new JsonReader(reader("foo"));
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictNonExecutePrefix_add641() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNonExecutePrefix_add641");
        JsonReader reader = new JsonReader(reader(")]}\'\n []"));
        try {
            reader.beginArray();
            reader.beginArray();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictNonExecutePrefix() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNonExecutePrefix");
        JsonReader reader = new JsonReader(reader("foo"));
        try {
            reader.beginArray();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictNonExecutePrefixWithSkipValue_add642() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNonExecutePrefixWithSkipValue_add642");
        JsonReader reader = new JsonReader(reader(")]}\'\n []"));
        try {
            reader.skipValue();
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictNonExecutePrefixWithSkipValue() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictNonExecutePrefixWithSkipValue");
        JsonReader reader = new JsonReader(reader("foo"));
        try {
            reader.skipValue();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonExecutePrefix_add399() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonExecutePrefix_add399");
        JsonReader reader = new JsonReader(reader(")]}\'\n []"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),553,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),555,reader,554,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonExecutePrefix_add400() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonExecutePrefix_add400");
        JsonReader reader = new JsonReader(reader(")]}\'\n []"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),553,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),555,reader,554,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonExecutePrefix_add401() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonExecutePrefix_add401");
        JsonReader reader = new JsonReader(reader(")]}\'\n []"));
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),553,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),555,reader,554,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientNonExecutePrefix() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonExecutePrefix");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),553,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),555,reader,554,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientNonExecutePrefix_literalMutation398() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonExecutePrefix_literalMutation398");
        JsonReader reader = new JsonReader(reader(")]}\'\n []"));
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),553,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),555,reader,554,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonExecutePrefix_remove345() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonExecutePrefix_remove345");
        JsonReader reader = new JsonReader(reader(")]}\'\n []"));
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),553,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),555,reader,554,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonExecutePrefix_remove346() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonExecutePrefix_remove346");
        JsonReader reader = new JsonReader(reader(")]}\'\n []"));
        reader.setLenient(true);
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),553,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),555,reader,554,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonExecutePrefix_remove347() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonExecutePrefix_remove347");
        JsonReader reader = new JsonReader(reader(")]}\'\n []"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),553,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),555,reader,554,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonExecutePrefixWithLeadingWhitespace_add402() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonExecutePrefixWithLeadingWhitespace_add402");
        JsonReader reader = new JsonReader(reader("\r\n \t)]}\'\n []"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),550,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),552,reader,551,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonExecutePrefixWithLeadingWhitespace_add403() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonExecutePrefixWithLeadingWhitespace_add403");
        JsonReader reader = new JsonReader(reader("\r\n \t)]}\'\n []"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),550,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),552,reader,551,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonExecutePrefixWithLeadingWhitespace_add404() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonExecutePrefixWithLeadingWhitespace_add404");
        JsonReader reader = new JsonReader(reader("\r\n \t)]}\'\n []"));
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),550,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),552,reader,551,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonExecutePrefixWithLeadingWhitespace");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),550,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),552,reader,551,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientNonExecutePrefixWithLeadingWhitespace_literalMutation400() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonExecutePrefixWithLeadingWhitespace_literalMutation400");
        JsonReader reader = new JsonReader(reader("\r\n \t)]}\'\n []"));
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),550,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),552,reader,551,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonExecutePrefixWithLeadingWhitespace_remove348() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonExecutePrefixWithLeadingWhitespace_remove348");
        JsonReader reader = new JsonReader(reader("\r\n \t)]}\'\n []"));
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),550,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),552,reader,551,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonExecutePrefixWithLeadingWhitespace_remove349() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonExecutePrefixWithLeadingWhitespace_remove349");
        JsonReader reader = new JsonReader(reader("\r\n \t)]}\'\n []"));
        reader.setLenient(true);
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),550,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),552,reader,551,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientNonExecutePrefixWithLeadingWhitespace_remove350() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientNonExecutePrefixWithLeadingWhitespace_remove350");
        JsonReader reader = new JsonReader(reader("\r\n \t)]}\'\n []"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),550,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),552,reader,551,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientPartialNonExecutePrefix_add408() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientPartialNonExecutePrefix_add408");
        JsonReader reader = new JsonReader(reader(")]}\' []"));
        reader.setLenient(true);
        reader.setLenient(true);
        try {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),565,reader,564,reader.nextString());
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientPartialNonExecutePrefix_add409() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientPartialNonExecutePrefix_add409");
        JsonReader reader = new JsonReader(reader(")]}\' []"));
        reader.setLenient(true);
        try {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),565,reader,564,reader.nextString());
            reader.nextString();
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientPartialNonExecutePrefix() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientPartialNonExecutePrefix");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        try {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),565,reader,564,reader.nextString());
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientPartialNonExecutePrefix_literalMutation404() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientPartialNonExecutePrefix_literalMutation404");
        JsonReader reader = new JsonReader(reader(")]}\' []"));
        reader.setLenient(true);
        try {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),565,reader,564,reader.nextString());
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientPartialNonExecutePrefix_remove354() {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientPartialNonExecutePrefix_remove354");
        JsonReader reader = new JsonReader(reader(")]}\' []"));
        try {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),565,reader,564,reader.nextString());
            reader.nextString();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testBomIgnoredAsFirstCharacterOfDocument_add323() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testBomIgnoredAsFirstCharacterOfDocument_add323");
        JsonReader reader = new JsonReader(reader("﻿[]"));
        reader.beginArray();
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testBomIgnoredAsFirstCharacterOfDocument_add324() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testBomIgnoredAsFirstCharacterOfDocument_add324");
        JsonReader reader = new JsonReader(reader("﻿[]"));
        reader.beginArray();
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testBomIgnoredAsFirstCharacterOfDocument() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testBomIgnoredAsFirstCharacterOfDocument");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testBomIgnoredAsFirstCharacterOfDocument_remove277() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testBomIgnoredAsFirstCharacterOfDocument_remove277");
        JsonReader reader = new JsonReader(reader("﻿[]"));
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testBomIgnoredAsFirstCharacterOfDocument_remove278() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testBomIgnoredAsFirstCharacterOfDocument_remove278");
        JsonReader reader = new JsonReader(reader("﻿[]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testBomForbiddenAsOtherCharacterInDocument_add321() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testBomForbiddenAsOtherCharacterInDocument_add321");
        JsonReader reader = new JsonReader(reader("[﻿]"));
        reader.beginArray();
        reader.beginArray();
        try {
            reader.endArray();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testBomForbiddenAsOtherCharacterInDocument_add322() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testBomForbiddenAsOtherCharacterInDocument_add322");
        JsonReader reader = new JsonReader(reader("[﻿]"));
        reader.beginArray();
        try {
            reader.endArray();
            reader.endArray();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testBomForbiddenAsOtherCharacterInDocument() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testBomForbiddenAsOtherCharacterInDocument");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        try {
            reader.endArray();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testBomForbiddenAsOtherCharacterInDocument_remove276() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testBomForbiddenAsOtherCharacterInDocument_remove276");
        JsonReader reader = new JsonReader(reader("[﻿]"));
        try {
            reader.endArray();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPosition_add349() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_add349");
        testFailWithPosition("Expected value at line 6 column 5 path $[1]", "[\n\n\n\n\n\"a\",}]");
        testFailWithPosition("Expected value at line 6 column 5 path $[1]", "[\n\n\n\n\n\"a\",}]");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPosition() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition");
        testFailWithPosition("foo", "[\n\n\n\n\n\"a\",}]");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPosition_literalMutation356() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_literalMutation356");
        testFailWithPosition("Expected value at line 6 column 5 path $[1]", "foo");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPosition_remove300() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_remove300");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionGreaterThanBufferSize_add366() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionGreaterThanBufferSize_add366");
        String spaces = repeat(' ', 8192);
        testFailWithPosition("Expected value at line 6 column 5 path $[1]", (("[\n\n" + spaces) + "\n\n\n\"a\",}]"));
        testFailWithPosition("Expected value at line 6 column 5 path $[1]", (("[\n\n" + spaces) + "\n\n\n\"a\",}]"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionGreaterThanBufferSize() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionGreaterThanBufferSize");
        String spaces = repeat(' ', 8191);
        testFailWithPosition("Expected value at line 6 column 5 path $[1]", (("[\n\n" + spaces) + "\n\n\n\"a\",}]"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionGreaterThanBufferSize_literalMutation362() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionGreaterThanBufferSize_literalMutation362");
        String spaces = repeat(' ', 8192);
        testFailWithPosition("foo", (("[\n\n" + spaces) + "\n\n\n\"a\",}]"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionGreaterThanBufferSize_literalMutation363() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionGreaterThanBufferSize_literalMutation363");
        String spaces = repeat(' ', 8192);
        testFailWithPosition("Expected value at line 6 column 5 path $[1]", (("foo" + spaces) + "\n\n\n\"a\",}]"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionGreaterThanBufferSize_literalMutation364() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionGreaterThanBufferSize_literalMutation364");
        String spaces = repeat(' ', 8192);
        testFailWithPosition("Expected value at line 6 column 5 path $[1]", (("[\n\n" + spaces) + "foo"));
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionGreaterThanBufferSize_remove314() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionGreaterThanBufferSize_remove314");
        String spaces = repeat(' ', 8192);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionOverSlashSlashEndOfLineComment_add371() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverSlashSlashEndOfLineComment_add371");
        testFailWithPosition("Expected value at line 5 column 6 path $[1]", "\n// foo\n\n//bar\r\n[\"a\",}");
        testFailWithPosition("Expected value at line 5 column 6 path $[1]", "\n// foo\n\n//bar\r\n[\"a\",}");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionOverSlashSlashEndOfLineComment() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverSlashSlashEndOfLineComment");
        testFailWithPosition("foo", "\n// foo\n\n//bar\r\n[\"a\",}");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionOverSlashSlashEndOfLineComment_literalMutation374() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverSlashSlashEndOfLineComment_literalMutation374");
        testFailWithPosition("Expected value at line 5 column 6 path $[1]", "foo");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionOverSlashSlashEndOfLineComment_remove319() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverSlashSlashEndOfLineComment_remove319");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionOverHashEndOfLineComment_add369() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverHashEndOfLineComment_add369");
        testFailWithPosition("Expected value at line 5 column 6 path $[1]", "\n# foo\n\n#bar\r\n[\"a\",}");
        testFailWithPosition("Expected value at line 5 column 6 path $[1]", "\n# foo\n\n#bar\r\n[\"a\",}");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionOverHashEndOfLineComment() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverHashEndOfLineComment");
        testFailWithPosition("foo", "\n# foo\n\n#bar\r\n[\"a\",}");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionOverHashEndOfLineComment_literalMutation370() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverHashEndOfLineComment_literalMutation370");
        testFailWithPosition("Expected value at line 5 column 6 path $[1]", "foo");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionOverHashEndOfLineComment_remove317() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverHashEndOfLineComment_remove317");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionOverCStyleComment_add368() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverCStyleComment_add368");
        testFailWithPosition("Expected value at line 6 column 12 path $[1]", "\n\n/* foo\n*\n*\r\nbar */[\"a\",}");
        testFailWithPosition("Expected value at line 6 column 12 path $[1]", "\n\n/* foo\n*\n*\r\nbar */[\"a\",}");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionOverCStyleComment() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverCStyleComment");
        testFailWithPosition("foo", "\n\n/* foo\n*\n*\r\nbar */[\"a\",}");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionOverCStyleComment_literalMutation368() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverCStyleComment_literalMutation368");
        testFailWithPosition("Expected value at line 6 column 12 path $[1]", "foo");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionOverCStyleComment_remove316() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverCStyleComment_remove316");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionOverQuotedString_add370() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverQuotedString_add370");
        testFailWithPosition("Expected value at line 5 column 3 path $[1]", "[\"foo\nbar\r\nbaz\n\",\n  }");
        testFailWithPosition("Expected value at line 5 column 3 path $[1]", "[\"foo\nbar\r\nbaz\n\",\n  }");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionOverQuotedString() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverQuotedString");
        testFailWithPosition("foo", "[\"foo\nbar\r\nbaz\n\",\n  }");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionOverQuotedString_literalMutation372() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverQuotedString_literalMutation372");
        testFailWithPosition("Expected value at line 5 column 3 path $[1]", "foo");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionOverQuotedString_remove318() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverQuotedString_remove318");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionOverUnquotedString_add372() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverUnquotedString_add372");
        testFailWithPosition("Expected value at line 5 column 2 path $[1]", "[\n\nabcd\n\n,}");
        testFailWithPosition("Expected value at line 5 column 2 path $[1]", "[\n\nabcd\n\n,}");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionOverUnquotedString() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverUnquotedString");
        testFailWithPosition("foo", "[\n\nabcd\n\n,}");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionOverUnquotedString_literalMutation376() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverUnquotedString_literalMutation376");
        testFailWithPosition("Expected value at line 5 column 2 path $[1]", "foo");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionOverUnquotedString_remove320() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionOverUnquotedString_remove320");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithEscapedNewlineCharacter_add348() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithEscapedNewlineCharacter_add348");
        testFailWithPosition("Expected value at line 5 column 3 path $[1]", "[\n\n\"\\\n\n\",}");
        testFailWithPosition("Expected value at line 5 column 3 path $[1]", "[\n\n\"\\\n\n\",}");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithEscapedNewlineCharacter() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithEscapedNewlineCharacter");
        testFailWithPosition("foo", "[\n\n\"\\\n\n\",}");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithEscapedNewlineCharacter_literalMutation354() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithEscapedNewlineCharacter_literalMutation354");
        testFailWithPosition("Expected value at line 5 column 3 path $[1]", "foo");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithEscapedNewlineCharacter_remove299() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithEscapedNewlineCharacter_remove299");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionIsOffsetByBom_add367() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionIsOffsetByBom_add367");
        testFailWithPosition("Expected value at line 1 column 6 path $[1]", "﻿[\"a\",}]");
        testFailWithPosition("Expected value at line 1 column 6 path $[1]", "﻿[\"a\",}]");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionIsOffsetByBom() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionIsOffsetByBom");
        testFailWithPosition("foo", "﻿[\"a\",}]");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionIsOffsetByBom_literalMutation366() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionIsOffsetByBom_literalMutation366");
        testFailWithPosition("Expected value at line 1 column 6 path $[1]", "foo");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionIsOffsetByBom_remove315() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionIsOffsetByBom_remove315");
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    private void testFailWithPosition_add350(String message, String json) throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_add350");
        JsonReader reader1 = new JsonReader(reader(json));
        reader1.setLenient(true);
        reader1.setLenient(true);
        reader1.beginArray();
        reader1.nextString();
        try {
            reader1.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),502,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),504,expected,503,expected.getMessage());
        }
        JsonReader reader2 = new JsonReader(reader(json));
        reader2.setLenient(true);
        reader2.beginArray();
        reader2.skipValue();
        try {
            reader2.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),505,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),507,expected,506,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    private void testFailWithPosition_add351(String message, String json) throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_add351");
        JsonReader reader1 = new JsonReader(reader(json));
        reader1.setLenient(true);
        reader1.beginArray();
        reader1.beginArray();
        reader1.nextString();
        try {
            reader1.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),502,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),504,expected,503,expected.getMessage());
        }
        JsonReader reader2 = new JsonReader(reader(json));
        reader2.setLenient(true);
        reader2.beginArray();
        reader2.skipValue();
        try {
            reader2.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),505,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),507,expected,506,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    private void testFailWithPosition_add352(String message, String json) throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_add352");
        JsonReader reader1 = new JsonReader(reader(json));
        reader1.setLenient(true);
        reader1.beginArray();
        reader1.nextString();
        reader1.nextString();
        try {
            reader1.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),502,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),504,expected,503,expected.getMessage());
        }
        JsonReader reader2 = new JsonReader(reader(json));
        reader2.setLenient(true);
        reader2.beginArray();
        reader2.skipValue();
        try {
            reader2.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),505,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),507,expected,506,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    private void testFailWithPosition_add353(String message, String json) throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_add353");
        JsonReader reader1 = new JsonReader(reader(json));
        reader1.setLenient(true);
        reader1.beginArray();
        reader1.nextString();
        try {
            reader1.peek();
            reader1.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),502,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),504,expected,503,expected.getMessage());
        }
        JsonReader reader2 = new JsonReader(reader(json));
        reader2.setLenient(true);
        reader2.beginArray();
        reader2.skipValue();
        try {
            reader2.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),505,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),507,expected,506,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    private void testFailWithPosition_add354(String message, String json) throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_add354");
        JsonReader reader1 = new JsonReader(reader(json));
        reader1.setLenient(true);
        reader1.beginArray();
        reader1.nextString();
        try {
            reader1.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),502,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),504,expected,503,expected.getMessage());
        }
        JsonReader reader2 = new JsonReader(reader(json));
        reader2.setLenient(true);
        reader2.setLenient(true);
        reader2.beginArray();
        reader2.skipValue();
        try {
            reader2.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),505,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),507,expected,506,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    private void testFailWithPosition_add355(String message, String json) throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_add355");
        JsonReader reader1 = new JsonReader(reader(json));
        reader1.setLenient(true);
        reader1.beginArray();
        reader1.nextString();
        try {
            reader1.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),502,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),504,expected,503,expected.getMessage());
        }
        JsonReader reader2 = new JsonReader(reader(json));
        reader2.setLenient(true);
        reader2.beginArray();
        reader2.beginArray();
        reader2.skipValue();
        try {
            reader2.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),505,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),507,expected,506,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    private void testFailWithPosition_add356(String message, String json) throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_add356");
        JsonReader reader1 = new JsonReader(reader(json));
        reader1.setLenient(true);
        reader1.beginArray();
        reader1.nextString();
        try {
            reader1.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),502,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),504,expected,503,expected.getMessage());
        }
        JsonReader reader2 = new JsonReader(reader(json));
        reader2.setLenient(true);
        reader2.beginArray();
        reader2.skipValue();
        reader2.skipValue();
        try {
            reader2.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),505,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),507,expected,506,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    private void testFailWithPosition_add357(String message, String json) throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_add357");
        JsonReader reader1 = new JsonReader(reader(json));
        reader1.setLenient(true);
        reader1.beginArray();
        reader1.nextString();
        try {
            reader1.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),502,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),504,expected,503,expected.getMessage());
        }
        JsonReader reader2 = new JsonReader(reader(json));
        reader2.setLenient(true);
        reader2.beginArray();
        reader2.skipValue();
        try {
            reader2.peek();
            reader2.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),505,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),507,expected,506,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    private void testFailWithPosition(String message, String json) throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition");
        JsonReader reader1 = new JsonReader(reader(json));
        reader1.setLenient(true);
        reader1.beginArray();
        reader1.nextString();
        try {
            reader1.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),502,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),504,expected,503,expected.getMessage());
        }
        JsonReader reader2 = new JsonReader(reader(json));
        reader2.setLenient(true);
        reader2.beginArray();
        reader2.skipValue();
        try {
            reader2.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),505,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),507,expected,506,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    private void testFailWithPosition_literalMutation358(String message, String json) throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_literalMutation358");
        JsonReader reader1 = new JsonReader(reader(json));
        reader1.setLenient(true);
        reader1.beginArray();
        reader1.nextString();
        try {
            reader1.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),502,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),504,expected,503,expected.getMessage());
        }
        JsonReader reader2 = new JsonReader(reader(json));
        reader2.setLenient(false);
        reader2.beginArray();
        reader2.skipValue();
        try {
            reader2.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),505,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),507,expected,506,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    private void testFailWithPosition_remove301(String message, String json) throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_remove301");
        JsonReader reader1 = new JsonReader(reader(json));
        reader1.beginArray();
        reader1.nextString();
        try {
            reader1.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),502,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),504,expected,503,expected.getMessage());
        }
        JsonReader reader2 = new JsonReader(reader(json));
        reader2.setLenient(true);
        reader2.beginArray();
        reader2.skipValue();
        try {
            reader2.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),505,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),507,expected,506,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    private void testFailWithPosition_remove302(String message, String json) throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_remove302");
        JsonReader reader1 = new JsonReader(reader(json));
        reader1.setLenient(true);
        reader1.nextString();
        try {
            reader1.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),502,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),504,expected,503,expected.getMessage());
        }
        JsonReader reader2 = new JsonReader(reader(json));
        reader2.setLenient(true);
        reader2.beginArray();
        reader2.skipValue();
        try {
            reader2.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),505,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),507,expected,506,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    private void testFailWithPosition_remove303(String message, String json) throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_remove303");
        JsonReader reader1 = new JsonReader(reader(json));
        reader1.setLenient(true);
        reader1.beginArray();
        try {
            reader1.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),502,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),504,expected,503,expected.getMessage());
        }
        JsonReader reader2 = new JsonReader(reader(json));
        reader2.setLenient(true);
        reader2.beginArray();
        reader2.skipValue();
        try {
            reader2.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),505,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),507,expected,506,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    private void testFailWithPosition_remove304(String message, String json) throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_remove304");
        JsonReader reader1 = new JsonReader(reader(json));
        reader1.beginArray();
        reader1.nextString();
        try {
            reader1.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),502,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),504,expected,503,expected.getMessage());
        }
        JsonReader reader2 = new JsonReader(reader(json));
        reader2.setLenient(true);
        reader2.beginArray();
        reader2.skipValue();
        try {
            reader2.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),505,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),507,expected,506,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    private void testFailWithPosition_remove305(String message, String json) throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_remove305");
        JsonReader reader1 = new JsonReader(reader(json));
        reader1.setLenient(true);
        reader1.nextString();
        try {
            reader1.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),502,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),504,expected,503,expected.getMessage());
        }
        JsonReader reader2 = new JsonReader(reader(json));
        reader2.setLenient(true);
        reader2.beginArray();
        reader2.skipValue();
        try {
            reader2.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),505,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),507,expected,506,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    private void testFailWithPosition_remove306(String message, String json) throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPosition_remove306");
        JsonReader reader1 = new JsonReader(reader(json));
        reader1.setLenient(true);
        reader1.beginArray();
        reader1.nextString();
        try {
            reader1.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),502,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),504,expected,503,expected.getMessage());
        }
        JsonReader reader2 = new JsonReader(reader(json));
        reader2.setLenient(true);
        reader2.beginArray();
        try {
            reader2.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),505,message);
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),507,expected,506,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionDeepPath_add358() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionDeepPath_add358");
        JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
        reader.beginArray();
        reader.beginArray();
        reader.nextInt();
        reader.beginObject();
        reader.nextName();
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        try {
            reader.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),501,expected,500,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionDeepPath_add359() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionDeepPath_add359");
        JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        reader.beginObject();
        reader.nextName();
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        try {
            reader.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),501,expected,500,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionDeepPath_add360() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionDeepPath_add360");
        JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
        reader.beginArray();
        reader.nextInt();
        reader.beginObject();
        reader.beginObject();
        reader.nextName();
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        try {
            reader.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),501,expected,500,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionDeepPath_add361() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionDeepPath_add361");
        JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
        reader.beginArray();
        reader.nextInt();
        reader.beginObject();
        reader.nextName();
        reader.nextName();
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        try {
            reader.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),501,expected,500,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionDeepPath_add362() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionDeepPath_add362");
        JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
        reader.beginArray();
        reader.nextInt();
        reader.beginObject();
        reader.nextName();
        reader.beginArray();
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        try {
            reader.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),501,expected,500,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionDeepPath_add363() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionDeepPath_add363");
        JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
        reader.beginArray();
        reader.nextInt();
        reader.beginObject();
        reader.nextName();
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        reader.nextInt();
        try {
            reader.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),501,expected,500,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionDeepPath_add364() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionDeepPath_add364");
        JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
        reader.beginArray();
        reader.nextInt();
        reader.beginObject();
        reader.nextName();
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        reader.nextInt();
        try {
            reader.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),501,expected,500,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionDeepPath_add365() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionDeepPath_add365");
        JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
        reader.beginArray();
        reader.nextInt();
        reader.beginObject();
        reader.nextName();
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        try {
            reader.peek();
            reader.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),501,expected,500,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testFailWithPositionDeepPath() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionDeepPath");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginArray();
        reader.nextInt();
        reader.beginObject();
        reader.nextName();
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        try {
            reader.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),501,expected,500,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionDeepPath_remove307() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionDeepPath_remove307");
        JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
        reader.nextInt();
        reader.beginObject();
        reader.nextName();
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        try {
            reader.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),501,expected,500,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionDeepPath_remove308() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionDeepPath_remove308");
        JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
        reader.beginArray();
        reader.beginObject();
        reader.nextName();
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        try {
            reader.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),501,expected,500,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionDeepPath_remove309() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionDeepPath_remove309");
        JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
        reader.beginArray();
        reader.nextInt();
        reader.nextName();
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        try {
            reader.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),501,expected,500,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionDeepPath_remove310() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionDeepPath_remove310");
        JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
        reader.beginArray();
        reader.nextInt();
        reader.beginObject();
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        try {
            reader.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),501,expected,500,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionDeepPath_remove311() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionDeepPath_remove311");
        JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
        reader.nextInt();
        reader.beginObject();
        reader.nextName();
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        try {
            reader.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),501,expected,500,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionDeepPath_remove312() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionDeepPath_remove312");
        JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
        reader.beginArray();
        reader.beginObject();
        reader.nextName();
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        try {
            reader.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),501,expected,500,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testFailWithPositionDeepPath_remove313() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFailWithPositionDeepPath_remove313");
        JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
        reader.beginArray();
        reader.beginObject();
        reader.nextName();
        reader.beginArray();
        reader.nextInt();
        reader.nextInt();
        try {
            reader.peek();
        } catch (IOException expected) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),501,expected,500,expected.getMessage());
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictVeryLongNumber_add696() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictVeryLongNumber_add696");
        JsonReader reader = new JsonReader(reader((("[0." + (repeat('9', 8192))) + "]")));
        reader.beginArray();
        reader.beginArray();
        try {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),816,reader,815,reader.nextDouble());
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictVeryLongNumber() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictVeryLongNumber");
        JsonReader reader = new JsonReader(reader((("foo" + (repeat('9', 8192))) + "]")));
        reader.beginArray();
        try {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),816,reader,815,reader.nextDouble());
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictVeryLongNumber_literalMutation605() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictVeryLongNumber_literalMutation605");
        JsonReader reader = new JsonReader(reader((("[0." + (repeat('9', 8191))) + "]")));
        reader.beginArray();
        try {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),816,reader,815,reader.nextDouble());
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictVeryLongNumber_literalMutation606() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictVeryLongNumber_literalMutation606");
        JsonReader reader = new JsonReader(reader((("[0." + (repeat('9', 8192))) + "foo")));
        reader.beginArray();
        try {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),816,reader,815,reader.nextDouble());
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictVeryLongNumber_remove565() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictVeryLongNumber_remove565");
        JsonReader reader = new JsonReader(reader((("[0." + (repeat('9', 8192))) + "]")));
        try {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),816,reader,815,reader.nextDouble());
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientVeryLongNumber_add444() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientVeryLongNumber_add444");
        JsonReader reader = new JsonReader(reader((("[0." + (repeat('9', 8192))) + "]")));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),607,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),609,reader,608,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),611,reader,610,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),612,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),614,reader,613,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientVeryLongNumber_add445() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientVeryLongNumber_add445");
        JsonReader reader = new JsonReader(reader((("[0." + (repeat('9', 8192))) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),607,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),609,reader,608,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),611,reader,610,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),612,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),614,reader,613,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientVeryLongNumber_add446() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientVeryLongNumber_add446");
        JsonReader reader = new JsonReader(reader((("[0." + (repeat('9', 8192))) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),607,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),609,reader,608,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),611,reader,610,reader.nextDouble());
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),612,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),614,reader,613,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientVeryLongNumber() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientVeryLongNumber");
        JsonReader reader = new JsonReader(reader((("foo" + (repeat('9', 8192))) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),607,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),609,reader,608,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),611,reader,610,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),612,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),614,reader,613,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientVeryLongNumber_literalMutation433() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientVeryLongNumber_literalMutation433");
        JsonReader reader = new JsonReader(reader((("[0." + (repeat('9', 8193))) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),607,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),609,reader,608,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),611,reader,610,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),612,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),614,reader,613,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientVeryLongNumber_literalMutation434() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientVeryLongNumber_literalMutation434");
        JsonReader reader = new JsonReader(reader((("[0." + (repeat('9', 8192))) + "foo")));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),607,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),609,reader,608,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),611,reader,610,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),612,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),614,reader,613,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientVeryLongNumber_literalMutation435() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientVeryLongNumber_literalMutation435");
        JsonReader reader = new JsonReader(reader((("[0." + (repeat('9', 8192))) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),607,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),609,reader,608,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),611,reader,610,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),612,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),614,reader,613,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientVeryLongNumber_remove389() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientVeryLongNumber_remove389");
        JsonReader reader = new JsonReader(reader((("[0." + (repeat('9', 8192))) + "]")));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),607,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),609,reader,608,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),611,reader,610,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),612,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),614,reader,613,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientVeryLongNumber_remove390() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientVeryLongNumber_remove390");
        JsonReader reader = new JsonReader(reader((("[0." + (repeat('9', 8192))) + "]")));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),607,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),609,reader,608,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),611,reader,610,reader.nextDouble());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),612,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),614,reader,613,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientVeryLongNumber_remove391() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientVeryLongNumber_remove391");
        JsonReader reader = new JsonReader(reader((("[0." + (repeat('9', 8192))) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),607,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),609,reader,608,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),611,reader,610,reader.nextDouble());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),612,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),614,reader,613,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnquotedLiteral_add724() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedLiteral_add724");
        String literal = ("a" + (repeat('b', 8192))) + "c";
        JsonReader reader = new JsonReader(reader((("[" + literal) + "]")));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),836,literal);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),838,reader,837,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnquotedLiteral_add725() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedLiteral_add725");
        String literal = ("a" + (repeat('b', 8192))) + "c";
        JsonReader reader = new JsonReader(reader((("[" + literal) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),836,literal);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),838,reader,837,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnquotedLiteral_add726() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedLiteral_add726");
        String literal = ("a" + (repeat('b', 8192))) + "c";
        JsonReader reader = new JsonReader(reader((("[" + literal) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),836,literal);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),838,reader,837,reader.nextString());
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongUnquotedLiteral() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedLiteral");
        String literal = ("foo" + (repeat('b', 8192))) + "c";
        JsonReader reader = new JsonReader(reader((("[" + literal) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),836,literal);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),838,reader,837,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongUnquotedLiteral_literalMutation632() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedLiteral_literalMutation632");
        String literal = ("a" + (repeat('b', 8193))) + "c";
        JsonReader reader = new JsonReader(reader((("[" + literal) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),836,literal);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),838,reader,837,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongUnquotedLiteral_literalMutation633() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedLiteral_literalMutation633");
        String literal = ("a" + (repeat('b', 8192))) + "foo";
        JsonReader reader = new JsonReader(reader((("[" + literal) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),836,literal);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),838,reader,837,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongUnquotedLiteral_literalMutation634() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedLiteral_literalMutation634");
        String literal = ("a" + (repeat('b', 8192))) + "c";
        JsonReader reader = new JsonReader(reader((("foo" + literal) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),836,literal);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),838,reader,837,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongUnquotedLiteral_literalMutation635() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedLiteral_literalMutation635");
        String literal = ("a" + (repeat('b', 8192))) + "c";
        JsonReader reader = new JsonReader(reader((("[" + literal) + "foo")));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),836,literal);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),838,reader,837,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongUnquotedLiteral_literalMutation636() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedLiteral_literalMutation636");
        String literal = ("a" + (repeat('b', 8192))) + "c";
        JsonReader reader = new JsonReader(reader((("[" + literal) + "]")));
        reader.setLenient(false);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),836,literal);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),838,reader,837,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnquotedLiteral_remove585() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedLiteral_remove585");
        String literal = ("a" + (repeat('b', 8192))) + "c";
        JsonReader reader = new JsonReader(reader((("[" + literal) + "]")));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),836,literal);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),838,reader,837,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnquotedLiteral_remove586() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedLiteral_remove586");
        String literal = ("a" + (repeat('b', 8192))) + "c";
        JsonReader reader = new JsonReader(reader((("[" + literal) + "]")));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),836,literal);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),838,reader,837,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnquotedLiteral_remove587() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedLiteral_remove587");
        String literal = ("a" + (repeat('b', 8192))) + "c";
        JsonReader reader = new JsonReader(reader((("[" + literal) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),836,literal);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),838,reader,837,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testDeeplyNestedArrays_add335() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedArrays_add335");
        JsonReader reader = new JsonReader(reader("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]"));
        for (int i = 0 ; i < 40 ; i++) {
            reader.beginArray();
            reader.beginArray();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),442,("$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]" + "[0][0][0][0][0][0][0][0][0][0][0][0][0][0]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),444,reader,443,reader.getPath());
        for (int i = 0 ; i < 40 ; i++) {
            reader.endArray();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),445,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),447,reader,446,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testDeeplyNestedArrays_add336() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedArrays_add336");
        JsonReader reader = new JsonReader(reader("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]"));
        for (int i = 0 ; i < 40 ; i++) {
            reader.beginArray();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),442,("$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]" + "[0][0][0][0][0][0][0][0][0][0][0][0][0][0]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),444,reader,443,reader.getPath());
        for (int i = 0 ; i < 40 ; i++) {
            reader.endArray();
            reader.endArray();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),445,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),447,reader,446,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDeeplyNestedArrays() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedArrays");
        JsonReader reader = new JsonReader(reader("foo"));
        for (int i = 0 ; i < 40 ; i++) {
            reader.beginArray();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),442,("$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]" + "[0][0][0][0][0][0][0][0][0][0][0][0][0][0]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),444,reader,443,reader.getPath());
        for (int i = 0 ; i < 40 ; i++) {
            reader.endArray();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),445,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),447,reader,446,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDeeplyNestedArrays_literalMutation326() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedArrays_literalMutation326");
        JsonReader reader = new JsonReader(reader("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]"));
        for (int i = -1 ; i < 40 ; i++) {
            reader.beginArray();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),442,("$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]" + "[0][0][0][0][0][0][0][0][0][0][0][0][0][0]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),444,reader,443,reader.getPath());
        for (int i = 0 ; i < 40 ; i++) {
            reader.endArray();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),445,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),447,reader,446,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDeeplyNestedArrays_literalMutation327() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedArrays_literalMutation327");
        JsonReader reader = new JsonReader(reader("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]"));
        for (int i = 0 ; i < 41 ; i++) {
            reader.beginArray();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),442,("$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]" + "[0][0][0][0][0][0][0][0][0][0][0][0][0][0]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),444,reader,443,reader.getPath());
        for (int i = 0 ; i < 40 ; i++) {
            reader.endArray();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),445,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),447,reader,446,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDeeplyNestedArrays_literalMutation328() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedArrays_literalMutation328");
        JsonReader reader = new JsonReader(reader("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]"));
        for (int i = 0 ; i < 40 ; i++) {
            reader.beginArray();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),442,("$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]" + "[0][0][0][0][0][0][0][0][0][0][0][0][0][0]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),444,reader,443,reader.getPath());
        for (int i = 1 ; i < 40 ; i++) {
            reader.endArray();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),445,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),447,reader,446,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDeeplyNestedArrays_literalMutation329() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedArrays_literalMutation329");
        JsonReader reader = new JsonReader(reader("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]"));
        for (int i = 0 ; i < 40 ; i++) {
            reader.beginArray();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),442,("$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]" + "[0][0][0][0][0][0][0][0][0][0][0][0][0][0]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),444,reader,443,reader.getPath());
        for (int i = 0 ; i < 41 ; i++) {
            reader.endArray();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),445,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),447,reader,446,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testDeeplyNestedArrays_remove289() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedArrays_remove289");
        JsonReader reader = new JsonReader(reader("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]"));
        for (int i = 0 ; i < 40 ; i++) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),442,("$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]" + "[0][0][0][0][0][0][0][0][0][0][0][0][0][0]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),444,reader,443,reader.getPath());
        for (int i = 0 ; i < 40 ; i++) {
            reader.endArray();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),445,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),447,reader,446,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testDeeplyNestedArrays_remove290() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedArrays_remove290");
        JsonReader reader = new JsonReader(reader("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]"));
        for (int i = 0 ; i < 40 ; i++) {
            reader.beginArray();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),442,("$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]" + "[0][0][0][0][0][0][0][0][0][0][0][0][0][0]"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),444,reader,443,reader.getPath());
        for (int i = 0 ; i < 40 ; i++) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),445,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),447,reader,446,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testDeeplyNestedObjects_add337() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedObjects_add337");
        String array = "{\"a\":%s}";
        String json = "true";
        for (int i = 0 ; i < 40 ; i++) {
            json = String.format(array, json);
        }
        JsonReader reader = new JsonReader(reader(json));
        for (int i = 0 ; i < 40 ; i++) {
            reader.beginObject();
            reader.beginObject();
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),449,reader,448,reader.nextName());
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),450,("$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a" + ".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),452,reader,451,reader.getPath());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),454,reader,453,reader.nextBoolean());
        for (int i = 0 ; i < 40 ; i++) {
            reader.endObject();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),455,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),457,reader,456,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testDeeplyNestedObjects_add338() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedObjects_add338");
        String array = "{\"a\":%s}";
        String json = "true";
        for (int i = 0 ; i < 40 ; i++) {
            json = String.format(array, json);
        }
        JsonReader reader = new JsonReader(reader(json));
        for (int i = 0 ; i < 40 ; i++) {
            reader.beginObject();
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),449,reader,448,reader.nextName());
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),450,("$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a" + ".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),452,reader,451,reader.getPath());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),454,reader,453,reader.nextBoolean());
        for (int i = 0 ; i < 40 ; i++) {
            reader.endObject();
            reader.endObject();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),455,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),457,reader,456,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDeeplyNestedObjects() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedObjects");
        String array = "foo";
        String json = "true";
        for (int i = 0 ; i < 40 ; i++) {
            json = String.format(array, json);
        }
        JsonReader reader = new JsonReader(reader(json));
        for (int i = 0 ; i < 40 ; i++) {
            reader.beginObject();
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),449,reader,448,reader.nextName());
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),450,("$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a" + ".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),452,reader,451,reader.getPath());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),454,reader,453,reader.nextBoolean());
        for (int i = 0 ; i < 40 ; i++) {
            reader.endObject();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),455,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),457,reader,456,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDeeplyNestedObjects_literalMutation331() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedObjects_literalMutation331");
        String array = "{\"a\":%s}";
        String json = "foo";
        for (int i = 0 ; i < 40 ; i++) {
            json = String.format(array, json);
        }
        JsonReader reader = new JsonReader(reader(json));
        for (int i = 0 ; i < 40 ; i++) {
            reader.beginObject();
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),449,reader,448,reader.nextName());
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),450,("$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a" + ".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),452,reader,451,reader.getPath());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),454,reader,453,reader.nextBoolean());
        for (int i = 0 ; i < 40 ; i++) {
            reader.endObject();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),455,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),457,reader,456,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDeeplyNestedObjects_literalMutation332() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedObjects_literalMutation332");
        String array = "{\"a\":%s}";
        String json = "true";
        for (int i = -1 ; i < 40 ; i++) {
            json = String.format(array, json);
        }
        JsonReader reader = new JsonReader(reader(json));
        for (int i = 0 ; i < 40 ; i++) {
            reader.beginObject();
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),449,reader,448,reader.nextName());
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),450,("$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a" + ".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),452,reader,451,reader.getPath());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),454,reader,453,reader.nextBoolean());
        for (int i = 0 ; i < 40 ; i++) {
            reader.endObject();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),455,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),457,reader,456,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDeeplyNestedObjects_literalMutation333() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedObjects_literalMutation333");
        String array = "{\"a\":%s}";
        String json = "true";
        for (int i = 0 ; i < 39 ; i++) {
            json = String.format(array, json);
        }
        JsonReader reader = new JsonReader(reader(json));
        for (int i = 0 ; i < 40 ; i++) {
            reader.beginObject();
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),449,reader,448,reader.nextName());
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),450,("$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a" + ".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),452,reader,451,reader.getPath());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),454,reader,453,reader.nextBoolean());
        for (int i = 0 ; i < 40 ; i++) {
            reader.endObject();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),455,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),457,reader,456,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDeeplyNestedObjects_literalMutation334() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedObjects_literalMutation334");
        String array = "{\"a\":%s}";
        String json = "true";
        for (int i = 0 ; i < 40 ; i++) {
            json = String.format(array, json);
        }
        JsonReader reader = new JsonReader(reader(json));
        for (int i = 1 ; i < 40 ; i++) {
            reader.beginObject();
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),449,reader,448,reader.nextName());
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),450,("$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a" + ".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),452,reader,451,reader.getPath());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),454,reader,453,reader.nextBoolean());
        for (int i = 0 ; i < 40 ; i++) {
            reader.endObject();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),455,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),457,reader,456,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDeeplyNestedObjects_literalMutation335() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedObjects_literalMutation335");
        String array = "{\"a\":%s}";
        String json = "true";
        for (int i = 0 ; i < 40 ; i++) {
            json = String.format(array, json);
        }
        JsonReader reader = new JsonReader(reader(json));
        for (int i = 0 ; i < 39 ; i++) {
            reader.beginObject();
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),449,reader,448,reader.nextName());
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),450,("$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a" + ".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),452,reader,451,reader.getPath());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),454,reader,453,reader.nextBoolean());
        for (int i = 0 ; i < 40 ; i++) {
            reader.endObject();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),455,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),457,reader,456,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDeeplyNestedObjects_literalMutation336() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedObjects_literalMutation336");
        String array = "{\"a\":%s}";
        String json = "true";
        for (int i = 0 ; i < 40 ; i++) {
            json = String.format(array, json);
        }
        JsonReader reader = new JsonReader(reader(json));
        for (int i = 0 ; i < 40 ; i++) {
            reader.beginObject();
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),449,reader,448,reader.nextName());
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),450,("$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a" + ".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),452,reader,451,reader.getPath());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),454,reader,453,reader.nextBoolean());
        for (int i = -1 ; i < 40 ; i++) {
            reader.endObject();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),455,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),457,reader,456,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDeeplyNestedObjects_literalMutation337() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedObjects_literalMutation337");
        String array = "{\"a\":%s}";
        String json = "true";
        for (int i = 0 ; i < 40 ; i++) {
            json = String.format(array, json);
        }
        JsonReader reader = new JsonReader(reader(json));
        for (int i = 0 ; i < 40 ; i++) {
            reader.beginObject();
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),449,reader,448,reader.nextName());
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),450,("$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a" + ".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),452,reader,451,reader.getPath());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),454,reader,453,reader.nextBoolean());
        for (int i = 0 ; i < 39 ; i++) {
            reader.endObject();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),455,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),457,reader,456,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testDeeplyNestedObjects_remove291() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedObjects_remove291");
        String array = "{\"a\":%s}";
        String json = "true";
        for (int i = 0 ; i < 40 ; i++) {
            json = String.format(array, json);
        }
        JsonReader reader = new JsonReader(reader(json));
        for (int i = 0 ; i < 40 ; i++) {
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),449,reader,448,reader.nextName());
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),450,("$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a" + ".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),452,reader,451,reader.getPath());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),454,reader,453,reader.nextBoolean());
        for (int i = 0 ; i < 40 ; i++) {
            reader.endObject();
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),455,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),457,reader,456,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testDeeplyNestedObjects_remove292() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeeplyNestedObjects_remove292");
        String array = "{\"a\":%s}";
        String json = "true";
        for (int i = 0 ; i < 40 ; i++) {
            json = String.format(array, json);
        }
        JsonReader reader = new JsonReader(reader(json));
        for (int i = 0 ; i < 40 ; i++) {
            reader.beginObject();
            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),449,reader,448,reader.nextName());
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),450,("$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a" + ".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),452,reader,451,reader.getPath());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),454,reader,453,reader.nextBoolean());
        for (int i = 0 ; i < 40 ; i++) {
        }
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),455,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),457,reader,456,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringEndingInSlash_add703() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringEndingInSlash_add703");
        JsonReader reader = new JsonReader(reader("/"));
        reader.setLenient(true);
        reader.setLenient(true);
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringEndingInSlash_add704() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringEndingInSlash_add704");
        JsonReader reader = new JsonReader(reader("/"));
        reader.setLenient(true);
        try {
            reader.peek();
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStringEndingInSlash() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringEndingInSlash");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStringEndingInSlash_literalMutation614() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringEndingInSlash_literalMutation614");
        JsonReader reader = new JsonReader(reader("/"));
        reader.setLenient(false);
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringEndingInSlash_remove572() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringEndingInSlash_remove572");
        JsonReader reader = new JsonReader(reader("/"));
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testDocumentWithCommentEndingInSlash_add339() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDocumentWithCommentEndingInSlash_add339");
        JsonReader reader = new JsonReader(reader("/* foo *//"));
        reader.setLenient(true);
        reader.setLenient(true);
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testDocumentWithCommentEndingInSlash_add340() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDocumentWithCommentEndingInSlash_add340");
        JsonReader reader = new JsonReader(reader("/* foo *//"));
        reader.setLenient(true);
        try {
            reader.peek();
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDocumentWithCommentEndingInSlash() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDocumentWithCommentEndingInSlash");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testDocumentWithCommentEndingInSlash_literalMutation339() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDocumentWithCommentEndingInSlash_literalMutation339");
        JsonReader reader = new JsonReader(reader("/* foo *//"));
        reader.setLenient(false);
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testDocumentWithCommentEndingInSlash_remove293() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDocumentWithCommentEndingInSlash_remove293");
        JsonReader reader = new JsonReader(reader("/* foo *//"));
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringWithLeadingSlash_add707() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringWithLeadingSlash_add707");
        JsonReader reader = new JsonReader(reader("/x"));
        reader.setLenient(true);
        reader.setLenient(true);
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringWithLeadingSlash_add708() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringWithLeadingSlash_add708");
        JsonReader reader = new JsonReader(reader("/x"));
        reader.setLenient(true);
        try {
            reader.peek();
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStringWithLeadingSlash() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringWithLeadingSlash");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStringWithLeadingSlash_literalMutation617() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringWithLeadingSlash_literalMutation617");
        JsonReader reader = new JsonReader(reader("/x"));
        reader.setLenient(true);
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringWithLeadingSlash_remove574() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringWithLeadingSlash_remove574");
        JsonReader reader = new JsonReader(reader("/x"));
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testUnterminatedObject_add715() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnterminatedObject_add715");
        JsonReader reader = new JsonReader(reader("{\"a\":\"android\"x"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),827,reader,826,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),829,reader,828,reader.nextString());
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testUnterminatedObject_add716() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnterminatedObject_add716");
        JsonReader reader = new JsonReader(reader("{\"a\":\"android\"x"));
        reader.setLenient(true);
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),827,reader,826,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),829,reader,828,reader.nextString());
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testUnterminatedObject_add717() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnterminatedObject_add717");
        JsonReader reader = new JsonReader(reader("{\"a\":\"android\"x"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),827,reader,826,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),829,reader,828,reader.nextString());
        try {
            reader.peek();
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testUnterminatedObject() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnterminatedObject");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),827,reader,826,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),829,reader,828,reader.nextString());
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testUnterminatedObject_literalMutation622() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnterminatedObject_literalMutation622");
        JsonReader reader = new JsonReader(reader("{\"a\":\"android\"x"));
        reader.setLenient(false);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),827,reader,826,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),829,reader,828,reader.nextString());
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testUnterminatedObject_remove578() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnterminatedObject_remove578");
        JsonReader reader = new JsonReader(reader("{\"a\":\"android\"x"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),827,reader,826,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),829,reader,828,reader.nextString());
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testUnterminatedObject_remove579() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnterminatedObject_remove579");
        JsonReader reader = new JsonReader(reader("{\"a\":\"android\"x"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),827,reader,826,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),829,reader,828,reader.nextString());
        try {
            reader.peek();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongQuotedString_add721() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongQuotedString_add721");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[\"" + string) + "\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),833,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),835,reader,834,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongQuotedString_add722() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongQuotedString_add722");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[\"" + string) + "\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),833,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),835,reader,834,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongQuotedString_add723() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongQuotedString_add723");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[\"" + string) + "\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),833,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),835,reader,834,reader.nextString());
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongQuotedString() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongQuotedString");
        char[] stringChars = new char[1023 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[\"" + string) + "\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),833,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),835,reader,834,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongQuotedString_literalMutation626() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongQuotedString_literalMutation626");
        char[] stringChars = new char[1024 * 17];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[\"" + string) + "\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),833,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),835,reader,834,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongQuotedString_literalMutation628() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongQuotedString_literalMutation628");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("foo" + string) + "\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),833,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),835,reader,834,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongQuotedString_literalMutation629() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongQuotedString_literalMutation629");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[\"" + string) + "foo";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),833,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),835,reader,834,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongQuotedString_remove582() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongQuotedString_remove582");
        char[] stringChars = new char[1024 * 16];
        String string = new String(stringChars);
        String json = ("[\"" + string) + "\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),833,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),835,reader,834,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongQuotedString_remove583() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongQuotedString_remove583");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[\"" + string) + "\"]";
        JsonReader reader = new JsonReader(reader(json));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),833,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),835,reader,834,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongQuotedString_remove584() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongQuotedString_remove584");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[\"" + string) + "\"]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),833,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),835,reader,834,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnquotedString_add727() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedString_add727");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[" + string) + "]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),839,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),841,reader,840,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnquotedString_add728() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedString_add728");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[" + string) + "]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),839,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),841,reader,840,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnquotedString_add729() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedString_add729");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[" + string) + "]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),839,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),841,reader,840,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnquotedString_add730() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedString_add730");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[" + string) + "]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),839,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),841,reader,840,reader.nextString());
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongUnquotedString() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedString");
        char[] stringChars = new char[1023 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[" + string) + "]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),839,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),841,reader,840,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongUnquotedString_literalMutation638() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedString_literalMutation638");
        char[] stringChars = new char[1024 * 17];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[" + string) + "]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),839,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),841,reader,840,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongUnquotedString_literalMutation640() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedString_literalMutation640");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("foo" + string) + "]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),839,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),841,reader,840,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongUnquotedString_literalMutation641() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedString_literalMutation641");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[" + string) + "foo";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),839,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),841,reader,840,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongUnquotedString_literalMutation642() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedString_literalMutation642");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[" + string) + "]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(false);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),839,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),841,reader,840,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnquotedString_remove588() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedString_remove588");
        char[] stringChars = new char[1024 * 16];
        String string = new String(stringChars);
        String json = ("[" + string) + "]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),839,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),841,reader,840,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnquotedString_remove589() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedString_remove589");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[" + string) + "]";
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),839,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),841,reader,840,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnquotedString_remove590() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedString_remove590");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[" + string) + "]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),839,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),841,reader,840,reader.nextString());
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnquotedString_remove591() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnquotedString_remove591");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = ("[" + string) + "]";
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),839,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),841,reader,840,reader.nextString());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnterminatedString_add731() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnterminatedString_add731");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = "[" + string;
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),842,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),844,reader,843,reader.nextString());
        try {
            reader.peek();
        } catch (EOFException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnterminatedString_add732() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnterminatedString_add732");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = "[" + string;
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),842,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),844,reader,843,reader.nextString());
        try {
            reader.peek();
        } catch (EOFException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnterminatedString_add733() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnterminatedString_add733");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = "[" + string;
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),842,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),844,reader,843,reader.nextString());
        try {
            reader.peek();
        } catch (EOFException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnterminatedString_add734() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnterminatedString_add734");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = "[" + string;
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),842,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),844,reader,843,reader.nextString());
        try {
            reader.peek();
            reader.peek();
        } catch (EOFException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongUnterminatedString() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnterminatedString");
        char[] stringChars = new char[1023 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = "[" + string;
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),842,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),844,reader,843,reader.nextString());
        try {
            reader.peek();
        } catch (EOFException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongUnterminatedString_literalMutation644() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnterminatedString_literalMutation644");
        char[] stringChars = new char[1024 * 17];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = "[" + string;
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),842,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),844,reader,843,reader.nextString());
        try {
            reader.peek();
        } catch (EOFException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongUnterminatedString_literalMutation646() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnterminatedString_literalMutation646");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = "foo" + string;
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),842,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),844,reader,843,reader.nextString());
        try {
            reader.peek();
        } catch (EOFException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testVeryLongUnterminatedString_literalMutation647() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnterminatedString_literalMutation647");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = "[" + string;
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(false);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),842,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),844,reader,843,reader.nextString());
        try {
            reader.peek();
        } catch (EOFException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnterminatedString_remove592() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnterminatedString_remove592");
        char[] stringChars = new char[1024 * 16];
        String string = new String(stringChars);
        String json = "[" + string;
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),842,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),844,reader,843,reader.nextString());
        try {
            reader.peek();
        } catch (EOFException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnterminatedString_remove593() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnterminatedString_remove593");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = "[" + string;
        JsonReader reader = new JsonReader(reader(json));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),842,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),844,reader,843,reader.nextString());
        try {
            reader.peek();
        } catch (EOFException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testVeryLongUnterminatedString_remove594() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testVeryLongUnterminatedString_remove594");
        char[] stringChars = new char[1024 * 16];
        java.util.Arrays.fill(stringChars, 'x');
        String string = new String(stringChars);
        String json = "[" + string;
        JsonReader reader = new JsonReader(reader(json));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),842,string);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),844,reader,843,reader.nextString());
        try {
            reader.peek();
        } catch (EOFException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipVeryLongUnquotedString_add609() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongUnquotedString_add609");
        JsonReader reader = new JsonReader(reader((("[" + (repeat('x', 8192))) + "]")));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        reader.skipValue();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipVeryLongUnquotedString_add610() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongUnquotedString_add610");
        JsonReader reader = new JsonReader(reader((("[" + (repeat('x', 8192))) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        reader.skipValue();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }



    @Test(timeout = 1000)
    public void testSkipVeryLongUnquotedString_add612() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongUnquotedString_add612");
        JsonReader reader = new JsonReader(reader((("[" + (repeat('x', 8192))) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        reader.skipValue();
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipVeryLongUnquotedString() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongUnquotedString");
        JsonReader reader = new JsonReader(reader((("foo" + (repeat('x', 8192))) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        reader.skipValue();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipVeryLongUnquotedString_literalMutation559() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongUnquotedString_literalMutation559");
        JsonReader reader = new JsonReader(reader((("[" + (repeat('x', 8193))) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        reader.skipValue();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipVeryLongUnquotedString_literalMutation560() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongUnquotedString_literalMutation560");
        JsonReader reader = new JsonReader(reader((("[" + (repeat('x', 8192))) + "foo")));
        reader.setLenient(true);
        reader.beginArray();
        reader.skipValue();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipVeryLongUnquotedString_literalMutation561() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongUnquotedString_literalMutation561");
        JsonReader reader = new JsonReader(reader((("[" + (repeat('x', 8192))) + "]")));
        reader.setLenient(false);
        reader.beginArray();
        reader.skipValue();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipVeryLongUnquotedString_remove523() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongUnquotedString_remove523");
        JsonReader reader = new JsonReader(reader((("[" + (repeat('x', 8192))) + "]")));
        reader.beginArray();
        reader.skipValue();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipVeryLongUnquotedString_remove524() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongUnquotedString_remove524");
        JsonReader reader = new JsonReader(reader((("[" + (repeat('x', 8192))) + "]")));
        reader.setLenient(true);
        reader.skipValue();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipVeryLongUnquotedString_remove525() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongUnquotedString_remove525");
        JsonReader reader = new JsonReader(reader((("[" + (repeat('x', 8192))) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipVeryLongUnquotedString_remove526() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongUnquotedString_remove526");
        JsonReader reader = new JsonReader(reader((("[" + (repeat('x', 8192))) + "]")));
        reader.setLenient(true);
        reader.beginArray();
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipTopLevelUnquotedString_add604() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipTopLevelUnquotedString_add604");
        JsonReader reader = new JsonReader(reader(repeat('x', 8192)));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),788,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),790,reader,789,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }



    public void testSkipTopLevelUnquotedString() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipTopLevelUnquotedString");
        JsonReader reader = new JsonReader(reader(repeat('x', 8193)));
        reader.setLenient(true);
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),788,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),790,reader,789,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipTopLevelUnquotedString_literalMutation552() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipTopLevelUnquotedString_literalMutation552");
        JsonReader reader = new JsonReader(reader(repeat('x', 8192)));
        reader.setLenient(false);
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),788,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),790,reader,789,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipTopLevelUnquotedString_remove518() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipTopLevelUnquotedString_remove518");
        JsonReader reader = new JsonReader(reader(repeat('x', 8192)));
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),788,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),790,reader,789,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipTopLevelUnquotedString_remove519() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipTopLevelUnquotedString_remove519");
        JsonReader reader = new JsonReader(reader(repeat('x', 8192)));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),788,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),790,reader,789,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipVeryLongQuotedString_add606() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongQuotedString_add606");
        JsonReader reader = new JsonReader(reader((("[\"" + (repeat('x', 8192))) + "\"]")));
        reader.beginArray();
        reader.beginArray();
        reader.skipValue();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }



    @Test(timeout = 1000)
    public void testSkipVeryLongQuotedString_add608() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongQuotedString_add608");
        JsonReader reader = new JsonReader(reader((("[\"" + (repeat('x', 8192))) + "\"]")));
        reader.beginArray();
        reader.skipValue();
        reader.endArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipVeryLongQuotedString() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongQuotedString");
        JsonReader reader = new JsonReader(reader((("foo" + (repeat('x', 8192))) + "\"]")));
        reader.beginArray();
        reader.skipValue();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipVeryLongQuotedString_literalMutation555() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongQuotedString_literalMutation555");
        JsonReader reader = new JsonReader(reader((("[\"" + (repeat('x', 8193))) + "\"]")));
        reader.beginArray();
        reader.skipValue();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipVeryLongQuotedString_literalMutation556() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongQuotedString_literalMutation556");
        JsonReader reader = new JsonReader(reader((("[\"" + (repeat('x', 8192))) + "foo")));
        reader.beginArray();
        reader.skipValue();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipVeryLongQuotedString_remove520() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongQuotedString_remove520");
        JsonReader reader = new JsonReader(reader((("[\"" + (repeat('x', 8192))) + "\"]")));
        reader.skipValue();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipVeryLongQuotedString_remove521() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongQuotedString_remove521");
        JsonReader reader = new JsonReader(reader((("[\"" + (repeat('x', 8192))) + "\"]")));
        reader.beginArray();
        reader.endArray();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipVeryLongQuotedString_remove522() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipVeryLongQuotedString_remove522");
        JsonReader reader = new JsonReader(reader((("[\"" + (repeat('x', 8192))) + "\"]")));
        reader.beginArray();
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipTopLevelQuotedString_add602() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipTopLevelQuotedString_add602");
        JsonReader reader = new JsonReader(reader((("\"" + (repeat('x', 8192))) + "\"")));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),785,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),787,reader,786,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }


    public void testSkipTopLevelQuotedString() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipTopLevelQuotedString");
        JsonReader reader = new JsonReader(reader((("foo" + (repeat('x', 8192))) + "\"")));
        reader.setLenient(true);
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),785,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),787,reader,786,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipTopLevelQuotedString_literalMutation547() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipTopLevelQuotedString_literalMutation547");
        JsonReader reader = new JsonReader(reader((("\"" + (repeat('x', 8191))) + "\"")));
        reader.setLenient(true);
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),785,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),787,reader,786,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipTopLevelQuotedString_literalMutation548() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipTopLevelQuotedString_literalMutation548");
        JsonReader reader = new JsonReader(reader((("\"" + (repeat('x', 8192))) + "foo")));
        reader.setLenient(true);
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),785,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),787,reader,786,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testSkipTopLevelQuotedString_literalMutation549() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipTopLevelQuotedString_literalMutation549");
        JsonReader reader = new JsonReader(reader((("\"" + (repeat('x', 8192))) + "\"")));
        reader.setLenient(true);
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),785,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),787,reader,786,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipTopLevelQuotedString_remove516() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipTopLevelQuotedString_remove516");
        JsonReader reader = new JsonReader(reader((("\"" + (repeat('x', 8192))) + "\"")));
        reader.skipValue();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),785,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),787,reader,786,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testSkipTopLevelQuotedString_remove517() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSkipTopLevelQuotedString_remove517");
        JsonReader reader = new JsonReader(reader((("\"" + (repeat('x', 8192))) + "\"")));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),785,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),787,reader,786,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringAsNumberWithTruncatedExponent_add701() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithTruncatedExponent_add701");
        JsonReader reader = new JsonReader(reader("[123e]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),823,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),825,reader,824,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringAsNumberWithTruncatedExponent_add702() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithTruncatedExponent_add702");
        JsonReader reader = new JsonReader(reader("[123e]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),823,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),825,reader,824,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStringAsNumberWithTruncatedExponent() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithTruncatedExponent");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),823,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),825,reader,824,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStringAsNumberWithTruncatedExponent_literalMutation612() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithTruncatedExponent_literalMutation612");
        JsonReader reader = new JsonReader(reader("[123e]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),823,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),825,reader,824,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringAsNumberWithTruncatedExponent_remove570() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithTruncatedExponent_remove570");
        JsonReader reader = new JsonReader(reader("[123e]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),823,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),825,reader,824,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringAsNumberWithTruncatedExponent_remove571() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithTruncatedExponent_remove571");
        JsonReader reader = new JsonReader(reader("[123e]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),823,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),825,reader,824,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringAsNumberWithDigitAndNonDigitExponent_add697() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithDigitAndNonDigitExponent_add697");
        JsonReader reader = new JsonReader(reader("[123e4b]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),817,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),819,reader,818,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringAsNumberWithDigitAndNonDigitExponent_add698() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithDigitAndNonDigitExponent_add698");
        JsonReader reader = new JsonReader(reader("[123e4b]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),817,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),819,reader,818,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStringAsNumberWithDigitAndNonDigitExponent() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithDigitAndNonDigitExponent");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),817,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),819,reader,818,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStringAsNumberWithDigitAndNonDigitExponent_literalMutation608() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithDigitAndNonDigitExponent_literalMutation608");
        JsonReader reader = new JsonReader(reader("[123e4b]"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),817,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),819,reader,818,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringAsNumberWithDigitAndNonDigitExponent_remove566() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithDigitAndNonDigitExponent_remove566");
        JsonReader reader = new JsonReader(reader("[123e4b]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),817,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),819,reader,818,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringAsNumberWithDigitAndNonDigitExponent_remove567() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithDigitAndNonDigitExponent_remove567");
        JsonReader reader = new JsonReader(reader("[123e4b]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),817,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),819,reader,818,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringAsNumberWithNonDigitExponent_add699() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithNonDigitExponent_add699");
        JsonReader reader = new JsonReader(reader("[123eb]"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),820,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),822,reader,821,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringAsNumberWithNonDigitExponent_add700() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithNonDigitExponent_add700");
        JsonReader reader = new JsonReader(reader("[123eb]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),820,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),822,reader,821,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStringAsNumberWithNonDigitExponent() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithNonDigitExponent");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),820,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),822,reader,821,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStringAsNumberWithNonDigitExponent_literalMutation610() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithNonDigitExponent_literalMutation610");
        JsonReader reader = new JsonReader(reader("[123eb]"));
        reader.setLenient(false);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),820,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),822,reader,821,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringAsNumberWithNonDigitExponent_remove568() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithNonDigitExponent_remove568");
        JsonReader reader = new JsonReader(reader("[123eb]"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),820,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),822,reader,821,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStringAsNumberWithNonDigitExponent_remove569() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStringAsNumberWithNonDigitExponent_remove569");
        JsonReader reader = new JsonReader(reader("[123eb]"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),820,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),822,reader,821,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testEmptyStringName_add345() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmptyStringName_add345");
        JsonReader reader = new JsonReader(reader("{\"\":true}"));
        reader.setLenient(true);
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),481,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),483,reader,482,reader.peek());
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),484,com.google.gson.stream.JsonToken.NAME);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),486,reader,485,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),488,reader,487,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),489,com.google.gson.stream.JsonToken.BOOLEAN);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),491,reader,490,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),493,reader,492,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),494,com.google.gson.stream.JsonToken.END_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),496,reader,495,reader.peek());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),497,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),499,reader,498,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testEmptyStringName_add346() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmptyStringName_add346");
        JsonReader reader = new JsonReader(reader("{\"\":true}"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),481,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),483,reader,482,reader.peek());
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),484,com.google.gson.stream.JsonToken.NAME);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),486,reader,485,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),488,reader,487,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),489,com.google.gson.stream.JsonToken.BOOLEAN);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),491,reader,490,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),493,reader,492,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),494,com.google.gson.stream.JsonToken.END_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),496,reader,495,reader.peek());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),497,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),499,reader,498,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testEmptyStringName_add347() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmptyStringName_add347");
        JsonReader reader = new JsonReader(reader("{\"\":true}"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),481,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),483,reader,482,reader.peek());
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),484,com.google.gson.stream.JsonToken.NAME);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),486,reader,485,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),488,reader,487,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),489,com.google.gson.stream.JsonToken.BOOLEAN);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),491,reader,490,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),493,reader,492,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),494,com.google.gson.stream.JsonToken.END_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),496,reader,495,reader.peek());
        reader.endObject();
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),497,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),499,reader,498,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testEmptyStringName() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmptyStringName");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),481,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),483,reader,482,reader.peek());
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),484,com.google.gson.stream.JsonToken.NAME);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),486,reader,485,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),488,reader,487,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),489,com.google.gson.stream.JsonToken.BOOLEAN);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),491,reader,490,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),493,reader,492,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),494,com.google.gson.stream.JsonToken.END_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),496,reader,495,reader.peek());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),497,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),499,reader,498,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testEmptyStringName_literalMutation352() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmptyStringName_literalMutation352");
        JsonReader reader = new JsonReader(reader("{\"\":true}"));
        reader.setLenient(false);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),481,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),483,reader,482,reader.peek());
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),484,com.google.gson.stream.JsonToken.NAME);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),486,reader,485,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),488,reader,487,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),489,com.google.gson.stream.JsonToken.BOOLEAN);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),491,reader,490,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),493,reader,492,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),494,com.google.gson.stream.JsonToken.END_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),496,reader,495,reader.peek());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),497,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),499,reader,498,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testEmptyStringName_remove296() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmptyStringName_remove296");
        JsonReader reader = new JsonReader(reader("{\"\":true}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),481,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),483,reader,482,reader.peek());
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),484,com.google.gson.stream.JsonToken.NAME);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),486,reader,485,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),488,reader,487,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),489,com.google.gson.stream.JsonToken.BOOLEAN);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),491,reader,490,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),493,reader,492,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),494,com.google.gson.stream.JsonToken.END_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),496,reader,495,reader.peek());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),497,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),499,reader,498,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testEmptyStringName_remove297() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmptyStringName_remove297");
        JsonReader reader = new JsonReader(reader("{\"\":true}"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),481,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),483,reader,482,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),484,com.google.gson.stream.JsonToken.NAME);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),486,reader,485,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),488,reader,487,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),489,com.google.gson.stream.JsonToken.BOOLEAN);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),491,reader,490,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),493,reader,492,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),494,com.google.gson.stream.JsonToken.END_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),496,reader,495,reader.peek());
        reader.endObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),497,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),499,reader,498,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testEmptyStringName_remove298() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmptyStringName_remove298");
        JsonReader reader = new JsonReader(reader("{\"\":true}"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),481,com.google.gson.stream.JsonToken.BEGIN_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),483,reader,482,reader.peek());
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),484,com.google.gson.stream.JsonToken.NAME);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),486,reader,485,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),488,reader,487,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),489,com.google.gson.stream.JsonToken.BOOLEAN);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),491,reader,490,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),493,reader,492,reader.nextBoolean());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),494,com.google.gson.stream.JsonToken.END_OBJECT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),496,reader,495,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),497,com.google.gson.stream.JsonToken.END_DOCUMENT);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),499,reader,498,reader.peek());
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictExtraCommasInMaps_add625() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictExtraCommasInMaps_add625");
        JsonReader reader = new JsonReader(reader("{\"a\":\"b\",}"));
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),792,reader,791,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),794,reader,793,reader.nextString());
        try {
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictExtraCommasInMaps_add626() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictExtraCommasInMaps_add626");
        JsonReader reader = new JsonReader(reader("{\"a\":\"b\",}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),792,reader,791,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),794,reader,793,reader.nextString());
        try {
            reader.peek();
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testStrictExtraCommasInMaps() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictExtraCommasInMaps");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),792,reader,791,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),794,reader,793,reader.nextString());
        try {
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testStrictExtraCommasInMaps_remove533() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testStrictExtraCommasInMaps_remove533");
        JsonReader reader = new JsonReader(reader("{\"a\":\"b\",}"));
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),792,reader,791,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),794,reader,793,reader.nextString());
        try {
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientExtraCommasInMaps_add387() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientExtraCommasInMaps_add387");
        JsonReader reader = new JsonReader(reader("{\"a\":\"b\",}"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),534,reader,533,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),536,reader,535,reader.nextString());
        try {
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientExtraCommasInMaps_add388() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientExtraCommasInMaps_add388");
        JsonReader reader = new JsonReader(reader("{\"a\":\"b\",}"));
        reader.setLenient(true);
        reader.beginObject();
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),534,reader,533,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),536,reader,535,reader.nextString());
        try {
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientExtraCommasInMaps_add389() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientExtraCommasInMaps_add389");
        JsonReader reader = new JsonReader(reader("{\"a\":\"b\",}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),534,reader,533,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),536,reader,535,reader.nextString());
        try {
            reader.peek();
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientExtraCommasInMaps() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientExtraCommasInMaps");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),534,reader,533,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),536,reader,535,reader.nextString());
        try {
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testLenientExtraCommasInMaps_literalMutation390() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientExtraCommasInMaps_literalMutation390");
        JsonReader reader = new JsonReader(reader("{\"a\":\"b\",}"));
        reader.setLenient(true);
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),534,reader,533,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),536,reader,535,reader.nextString());
        try {
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientExtraCommasInMaps_remove334() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientExtraCommasInMaps_remove334");
        JsonReader reader = new JsonReader(reader("{\"a\":\"b\",}"));
        reader.beginObject();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),534,reader,533,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),536,reader,535,reader.nextString());
        try {
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testLenientExtraCommasInMaps_remove335() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testLenientExtraCommasInMaps_remove335");
        JsonReader reader = new JsonReader(reader("{\"a\":\"b\",}"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),534,reader,533,reader.nextName());
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),536,reader,535,reader.nextString());
        try {
            reader.peek();
        } catch (IOException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    private String repeat(char c, int count) {
        char[] array = new char[count];
        java.util.Arrays.fill(array, c);
        return new String(array);
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add457() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add457");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add458() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add458");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add459() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add459");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add460() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add460");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add461() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add461");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add462() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add462");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add463() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add463");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add464() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add464");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add465() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add465");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add466() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add466");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add467() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add467");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add468() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add468");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add469() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add469");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add470() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add470");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add471() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add471");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add472() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add472");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add473() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add473");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add474() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add474");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add475() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add475");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add476() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add476");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add477() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add477");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add478() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add478");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add479() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add479");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add480() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add480");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add481() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add481");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add482() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add482");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add483() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add483");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add484() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add484");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add485() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add485");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add486() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add486");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add487() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add487");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add488() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add488");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add489() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add489");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add490() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add490");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add491() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add491");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add492() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add492");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add493() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add493");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add494() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add494");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_add495() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_add495");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments");
        assertDocument("foo", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation446() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation446");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation447() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation447");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation448() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation448");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation449() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation449");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation450() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation450");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation451() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation451");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation452() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation452");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation453() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation453");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation454() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation454");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation455() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation455");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation456() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation456");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation457() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation457");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation458() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation458");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation459() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation459");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation460() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation460");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation461() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation461");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation462() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation462");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("foo", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation463() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation463");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation464() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation464");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation465() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation465");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation466() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation466");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation467() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation467");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation468() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation468");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation469() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation469");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation470() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation470");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation471() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation471");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation472() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation472");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation473() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation473");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation474() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation474");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation475() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation475");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation476() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation476");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation477() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation477");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation478() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation478");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation479() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation479");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation480() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation480");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation481() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation481");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation482() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation482");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    public void testMalformedDocuments_literalMutation483() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_literalMutation483");
        assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("foo", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove398() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove398");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove399() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove399");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove400() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove400");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove401() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove401");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove402() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove402");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove403() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove403");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove404() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove404");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove405() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove405");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove406() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove406");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove407() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove407");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove408() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove408");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove409() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove409");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove410() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove410");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove411() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove411");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove412() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove412");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove413() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove413");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove414() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove414");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove415() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove415");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove416() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove416");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove417() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove417");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove418() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove418");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove419() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove419");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove420() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove420");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove421() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove421");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove422() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove422");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove423() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove423");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove424() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove424");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove425() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove425");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove426() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove426");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove427() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove427");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove428() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove428");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove429() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove429");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove430() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove430");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove431() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove431");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove432() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove432");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove433() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove433");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove434() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove434");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove435() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove435");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    @Test(timeout = 1000)
    public void testMalformedDocuments_remove436() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMalformedDocuments_remove436");
        assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
        assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
        assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
        assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{\'name\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
        assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
        assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[\'string\'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
        assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
        assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":\'string\',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
        assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test behave slightly differently in Gson 2.2 and earlier. It fails
     * during peek rather than during nextString().
     */
@Test(timeout = 1000)
    public void testUnterminatedStringFailure_add718() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnterminatedStringFailure_add718");
        JsonReader reader = new JsonReader(reader("[\"string"));
        reader.setLenient(true);
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),830,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),832,reader,831,reader.peek());
        try {
            reader.nextString();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test behave slightly differently in Gson 2.2 and earlier. It fails
     * during peek rather than during nextString().
     */
@Test(timeout = 1000)
    public void testUnterminatedStringFailure_add719() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnterminatedStringFailure_add719");
        JsonReader reader = new JsonReader(reader("[\"string"));
        reader.setLenient(true);
        reader.beginArray();
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),830,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),832,reader,831,reader.peek());
        try {
            reader.nextString();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test behave slightly differently in Gson 2.2 and earlier. It fails
     * during peek rather than during nextString().
     */
@Test(timeout = 1000)
    public void testUnterminatedStringFailure_add720() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnterminatedStringFailure_add720");
        JsonReader reader = new JsonReader(reader("[\"string"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),830,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),832,reader,831,reader.peek());
        try {
            reader.nextString();
            reader.nextString();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test behave slightly differently in Gson 2.2 and earlier. It fails
     * during peek rather than during nextString().
     */
public void testUnterminatedStringFailure() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnterminatedStringFailure");
        JsonReader reader = new JsonReader(reader("foo"));
        reader.setLenient(true);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),830,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),832,reader,831,reader.peek());
        try {
            reader.nextString();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test behave slightly differently in Gson 2.2 and earlier. It fails
     * during peek rather than during nextString().
     */
public void testUnterminatedStringFailure_literalMutation624() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnterminatedStringFailure_literalMutation624");
        JsonReader reader = new JsonReader(reader("[\"string"));
        reader.setLenient(false);
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),830,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),832,reader,831,reader.peek());
        try {
            reader.nextString();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test behave slightly differently in Gson 2.2 and earlier. It fails
     * during peek rather than during nextString().
     */
@Test(timeout = 1000)
    public void testUnterminatedStringFailure_remove580() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnterminatedStringFailure_remove580");
        JsonReader reader = new JsonReader(reader("[\"string"));
        reader.beginArray();
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),830,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),832,reader,831,reader.peek());
        try {
            reader.nextString();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    /** 
     * This test behave slightly differently in Gson 2.2 and earlier. It fails
     * during peek rather than during nextString().
     */
@Test(timeout = 1000)
    public void testUnterminatedStringFailure_remove581() throws IOException {
        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testUnterminatedStringFailure_remove581");
        JsonReader reader = new JsonReader(reader("[\"string"));
        reader.setLenient(true);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),830,com.google.gson.stream.JsonToken.STRING);
        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),832,reader,831,reader.peek());
        try {
            reader.nextString();
        } catch (MalformedJsonException expected) {
        }
        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
    }

    private void assertDocument(String document, Object... expectations) throws IOException {
        JsonReader reader = new JsonReader(reader(document));
        reader.setLenient(true);
        for (Object expectation : expectations) {
            if (expectation == (JsonToken.BEGIN_OBJECT)) {
                reader.beginObject();
            } else if (expectation == (JsonToken.BEGIN_ARRAY)) {
                reader.beginArray();
            } else if (expectation == (JsonToken.END_OBJECT)) {
                reader.endObject();
            } else if (expectation == (JsonToken.END_ARRAY)) {
                reader.endArray();
            } else if (expectation == (JsonToken.NAME)) {
                fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),355,reader,354,reader.nextName());
            } else if (expectation == (JsonToken.BOOLEAN)) {
                fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),357,reader,356,reader.nextBoolean());
            } else if (expectation == (JsonToken.STRING)) {
                fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),359,reader,358,reader.nextString());
            } else if (expectation == (JsonToken.NUMBER)) {
                fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),361,reader,360,reader.nextInt());
            } else if (expectation == (JsonToken.NULL)) {
                reader.nextNull();
            } else if (expectation == (IOException.class)) {
                try {
                    reader.peek();
                } catch (IOException expected) {
                }
            } else {
                throw new AssertionError();
            }
        }
    }

    /** 
     * Returns a reader that returns one character at a time.
     */
private Reader reader(final String s) {
        return new StringReader(s);
    }
}

