//package org.apache.commons.io;
//
//import java.util.ArrayList;
//import java.math.BigInteger;
//import java.io.ByteArrayOutputStream;
//import java.util.zip.CRC32;
//import java.util.zip.Checksum;
//import java.util.Collection;
//import java.util.Date;
//import java.io.File;
//import org.apache.commons.io.testtools.FileBasedTestCase;
//import java.io.FileInputStream;
//import java.io.FileNotFoundException;
//import java.io.FileOutputStream;
//import java.util.GregorianCalendar;
//import java.util.HashMap;
//import java.io.IOException;
//import java.util.Iterator;
//import java.util.List;
//import java.util.Map;
//import org.apache.commons.io.filefilter.NameFileFilter;
//import java.io.OutputStream;
//import org.junit.Test;
//import java.net.URL;
//
///** 
// * This is used to test FileUtils for correctness.
// * 
// * @version $Id$
// * @see FileUtils
// */
//public class FileUtilsTestCase extends FileBasedTestCase {
//    /** 
//     * Size of test directory.
//     */
//private static final int TEST_DIRECTORY_SIZE = 0;
//
//    /** 
//     * Size of test directory.
//     */
//private static final BigInteger TEST_DIRECTORY_SIZE_BI = BigInteger.ZERO;
//
//    /** 
//     * Size (greater of zero) of test file.
//     */
//private static final BigInteger TEST_DIRECTORY_SIZE_GT_ZERO_BI = BigInteger.valueOf(100);
//
//    /** 
//     * List files recursively
//     */
//private static final ListDirectoryWalker LIST_WALKER = new ListDirectoryWalker();
//
//    /** 
//     * Delay in milliseconds to make sure test for "last modified date" are accurate
//     */
//private File testFile1;
//
//    private File testFile2;
//
//    private int testFile1Size;
//
//    private int testFile2Size;
//
//    public FileUtilsTestCase(String name) {
//        super(name);
//        testFile1 = new File(FileBasedTestCase.getTestDirectory() , "file1-test.txt");
//        testFile2 = new File(FileBasedTestCase.getTestDirectory() , "file1a-test.txt");
//        testFile1Size = ((int)(testFile1.length()));
//        testFile2Size = ((int)(testFile2.length()));
//    }
//
//    /** 
//     * @see junit.framework.TestCase#setUp()
//     */
//@Override
//    protected void setUp() throws Exception {
//        FileBasedTestCase.getTestDirectory().mkdirs();
//        createFile(testFile1, testFile1Size);
//        createFile(testFile2, testFile2Size);
//        org.apache.commons.io.FileUtils.deleteDirectory(FileBasedTestCase.getTestDirectory());
//        FileBasedTestCase.getTestDirectory().mkdirs();
//        createFile(testFile1, testFile1Size);
//        createFile(testFile2, testFile2Size);
//    }
//
//    /** 
//     * @see junit.framework.TestCase#tearDown()
//     */
//@Override
//    protected void tearDown() throws Exception {
//        org.apache.commons.io.FileUtils.deleteDirectory(FileBasedTestCase.getTestDirectory());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#getFile(String...)} method.
//     */
//@Test(timeout = 1000)
//    public void testGetFile_add1475() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testGetFile_add1475");
//        File expected_A = new File("src");
//        File expected_B = new File(expected_A , "main");
//        File expected_C = new File(expected_B , "java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3060,expected_A);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3062,null,3061,org.apache.commons.io.FileUtils.getFile("src"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3063,expected_B);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3065,null,3064,org.apache.commons.io.FileUtils.getFile("src", "main"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3066,expected_C);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3068,null,3067,org.apache.commons.io.FileUtils.getFile("src", "main", "java"));
//        try {
//            org.apache.commons.io.FileUtils.getFile(((String[])(null)));
//            org.apache.commons.io.FileUtils.getFile(((String[])(null)));
//        } catch (NullPointerException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#getFile(String...)} method.
//     */
//public void testGetFile() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testGetFile");
//        File expected_A = new File("foo");
//        File expected_B = new File(expected_A , "main");
//        File expected_C = new File(expected_B , "java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3060,expected_A);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3062,null,3061,org.apache.commons.io.FileUtils.getFile("src"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3063,expected_B);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3065,null,3064,org.apache.commons.io.FileUtils.getFile("src", "main"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3066,expected_C);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3068,null,3067,org.apache.commons.io.FileUtils.getFile("src", "main", "java"));
//        try {
//            org.apache.commons.io.FileUtils.getFile(((String[])(null)));
//        } catch (NullPointerException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#getFile(String...)} method.
//     */
//public void testGetFile_literalMutation3315() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testGetFile_literalMutation3315");
//        File expected_A = new File("src");
//        File expected_B = new File(expected_A , "foo");
//        File expected_C = new File(expected_B , "java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3060,expected_A);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3062,null,3061,org.apache.commons.io.FileUtils.getFile("src"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3063,expected_B);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3065,null,3064,org.apache.commons.io.FileUtils.getFile("src", "main"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3066,expected_C);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3068,null,3067,org.apache.commons.io.FileUtils.getFile("src", "main", "java"));
//        try {
//            org.apache.commons.io.FileUtils.getFile(((String[])(null)));
//        } catch (NullPointerException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#getFile(String...)} method.
//     */
//public void testGetFile_literalMutation3316() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testGetFile_literalMutation3316");
//        File expected_A = new File("src");
//        File expected_B = new File(expected_A , "main");
//        File expected_C = new File(expected_B , "foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3060,expected_A);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3062,null,3061,org.apache.commons.io.FileUtils.getFile("src"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3063,expected_B);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3065,null,3064,org.apache.commons.io.FileUtils.getFile("src", "main"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3066,expected_C);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3068,null,3067,org.apache.commons.io.FileUtils.getFile("src", "main", "java"));
//        try {
//            org.apache.commons.io.FileUtils.getFile(((String[])(null)));
//        } catch (NullPointerException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#getFile(File, String...)} method.
//     */
//@Test(timeout = 1000)
//    public void testGetFile_Parent_add1476() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testGetFile_Parent_add1476");
//        File parent = new File("parent");
//        File expected_A = new File(parent , "src");
//        File expected_B = new File(expected_A , "main");
//        File expected_C = new File(expected_B , "java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3051,expected_A);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3053,null,3052,org.apache.commons.io.FileUtils.getFile(parent, "src"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3054,expected_B);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3056,null,3055,org.apache.commons.io.FileUtils.getFile(parent, "src", "main"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3057,expected_C);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3059,null,3058,org.apache.commons.io.FileUtils.getFile(parent, "src", "main", "java"));
//        try {
//            org.apache.commons.io.FileUtils.getFile(parent, ((String[])(null)));
//            org.apache.commons.io.FileUtils.getFile(parent, ((String[])(null)));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.getFile(((File)(null)), "src");
//        } catch (NullPointerException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#getFile(File, String...)} method.
//     */
//@Test(timeout = 1000)
//    public void testGetFile_Parent_add1477() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testGetFile_Parent_add1477");
//        File parent = new File("parent");
//        File expected_A = new File(parent , "src");
//        File expected_B = new File(expected_A , "main");
//        File expected_C = new File(expected_B , "java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3051,expected_A);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3053,null,3052,org.apache.commons.io.FileUtils.getFile(parent, "src"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3054,expected_B);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3056,null,3055,org.apache.commons.io.FileUtils.getFile(parent, "src", "main"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3057,expected_C);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3059,null,3058,org.apache.commons.io.FileUtils.getFile(parent, "src", "main", "java"));
//        try {
//            org.apache.commons.io.FileUtils.getFile(parent, ((String[])(null)));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.getFile(((File)(null)), "src");
//            org.apache.commons.io.FileUtils.getFile(((File)(null)), "src");
//        } catch (NullPointerException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#getFile(File, String...)} method.
//     */
//public void testGetFile_Parent() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testGetFile_Parent");
//        File parent = new File("foo");
//        File expected_A = new File(parent , "src");
//        File expected_B = new File(expected_A , "main");
//        File expected_C = new File(expected_B , "java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3051,expected_A);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3053,null,3052,org.apache.commons.io.FileUtils.getFile(parent, "src"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3054,expected_B);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3056,null,3055,org.apache.commons.io.FileUtils.getFile(parent, "src", "main"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3057,expected_C);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3059,null,3058,org.apache.commons.io.FileUtils.getFile(parent, "src", "main", "java"));
//        try {
//            org.apache.commons.io.FileUtils.getFile(parent, ((String[])(null)));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.getFile(((File)(null)), "src");
//        } catch (NullPointerException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#getFile(File, String...)} method.
//     */
//public void testGetFile_Parent_literalMutation3319() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testGetFile_Parent_literalMutation3319");
//        File parent = new File("parent");
//        File expected_A = new File(parent , "foo");
//        File expected_B = new File(expected_A , "main");
//        File expected_C = new File(expected_B , "java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3051,expected_A);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3053,null,3052,org.apache.commons.io.FileUtils.getFile(parent, "src"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3054,expected_B);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3056,null,3055,org.apache.commons.io.FileUtils.getFile(parent, "src", "main"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3057,expected_C);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3059,null,3058,org.apache.commons.io.FileUtils.getFile(parent, "src", "main", "java"));
//        try {
//            org.apache.commons.io.FileUtils.getFile(parent, ((String[])(null)));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.getFile(((File)(null)), "src");
//        } catch (NullPointerException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#getFile(File, String...)} method.
//     */
//public void testGetFile_Parent_literalMutation3320() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testGetFile_Parent_literalMutation3320");
//        File parent = new File("parent");
//        File expected_A = new File(parent , "src");
//        File expected_B = new File(expected_A , "foo");
//        File expected_C = new File(expected_B , "java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3051,expected_A);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3053,null,3052,org.apache.commons.io.FileUtils.getFile(parent, "src"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3054,expected_B);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3056,null,3055,org.apache.commons.io.FileUtils.getFile(parent, "src", "main"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3057,expected_C);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3059,null,3058,org.apache.commons.io.FileUtils.getFile(parent, "src", "main", "java"));
//        try {
//            org.apache.commons.io.FileUtils.getFile(parent, ((String[])(null)));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.getFile(((File)(null)), "src");
//        } catch (NullPointerException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#getFile(File, String...)} method.
//     */
//public void testGetFile_Parent_literalMutation3321() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testGetFile_Parent_literalMutation3321");
//        File parent = new File("parent");
//        File expected_A = new File(parent , "src");
//        File expected_B = new File(expected_A , "main");
//        File expected_C = new File(expected_B , "foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3051,expected_A);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3053,null,3052,org.apache.commons.io.FileUtils.getFile(parent, "src"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3054,expected_B);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3056,null,3055,org.apache.commons.io.FileUtils.getFile(parent, "src", "main"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3057,expected_C);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3059,null,3058,org.apache.commons.io.FileUtils.getFile(parent, "src", "main", "java"));
//        try {
//            org.apache.commons.io.FileUtils.getFile(parent, ((String[])(null)));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.getFile(((File)(null)), "src");
//        } catch (NullPointerException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#getFile(File, String...)} method.
//     */
//public void testGetFile_Parent_literalMutation3324() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testGetFile_Parent_literalMutation3324");
//        File parent = new File("parent");
//        File expected_A = new File(parent , "src");
//        File expected_B = new File(expected_A , "main");
//        File expected_C = new File(expected_B , "java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3051,expected_A);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3053,null,3052,org.apache.commons.io.FileUtils.getFile(parent, "src"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3054,expected_B);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3056,null,3055,org.apache.commons.io.FileUtils.getFile(parent, "src", "main"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3057,expected_C);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3059,null,3058,org.apache.commons.io.FileUtils.getFile(parent, "src", "main", "java"));
//        try {
//            org.apache.commons.io.FileUtils.getFile(parent, ((String[])(null)));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.getFile(((File)(null)), "foo");
//        } catch (NullPointerException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#getTempDirectoryPath()} method.
//     */
//public void testGetTempDirectoryPath() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testGetTempDirectoryPath");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3070,null,3069,java.lang.System.getProperty("java.io.tmpdir"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3072,null,3071,org.apache.commons.io.FileUtils.getTempDirectoryPath());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#getTempDirectory()} method.
//     */
//public void testGetTempDirectory() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testGetTempDirectory");
//        File tempDirectory = new File(System.getProperty("foo"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3073,tempDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3075,null,3074,org.apache.commons.io.FileUtils.getTempDirectory());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#getUserDirectoryPath()} method.
//     */
//public void testGetUserDirectoryPath() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testGetUserDirectoryPath");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3077,null,3076,java.lang.System.getProperty("user.home"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3079,null,3078,org.apache.commons.io.FileUtils.getUserDirectoryPath());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#getUserDirectory()} method.
//     */
//public void testGetUserDirectory() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testGetUserDirectory");
//        File userDirectory = new File(System.getProperty("foo"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3080,userDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3082,null,3081,org.apache.commons.io.FileUtils.getUserDirectory());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openInputStream_exists_add1664() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openInputStream_exists_add1664");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        createLineBasedFile(file, new String[]{ "Hello" });
//        createLineBasedFile(file, new String[]{ "Hello" });
//        FileInputStream in = null;
//        try {
//            in = org.apache.commons.io.FileUtils.openInputStream(file);
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3338,in,3337,in.read());
//        } finally {
//            IOUtils.closeQuietly(in);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openInputStream_exists_add1665() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openInputStream_exists_add1665");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        createLineBasedFile(file, new String[]{ "Hello" });
//        FileInputStream in = null;
//        try {
//            in = org.apache.commons.io.FileUtils.openInputStream(file);
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3338,in,3337,in.read());
//        } finally {
//            IOUtils.closeQuietly(in);
//            IOUtils.closeQuietly(in);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openInputStream_exists() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openInputStream_exists");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createLineBasedFile(file, new String[]{ "Hello" });
//        FileInputStream in = null;
//        try {
//            in = org.apache.commons.io.FileUtils.openInputStream(file);
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3338,in,3337,in.read());
//        } finally {
//            IOUtils.closeQuietly(in);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openInputStream_exists_literalMutation3749() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openInputStream_exists_literalMutation3749");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        createLineBasedFile(file, new String[]{ "foo" });
//        FileInputStream in = null;
//        try {
//            in = org.apache.commons.io.FileUtils.openInputStream(file);
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3338,in,3337,in.read());
//        } finally {
//            IOUtils.closeQuietly(in);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openInputStream_exists_remove1271() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openInputStream_exists_remove1271");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        FileInputStream in = null;
//        try {
//            in = org.apache.commons.io.FileUtils.openInputStream(file);
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3338,in,3337,in.read());
//        } finally {
//            IOUtils.closeQuietly(in);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openInputStream_existsButIsDirectory_add1666() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openInputStream_existsButIsDirectory_add1666");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "subdir");
//        directory.mkdirs();
//        directory.mkdirs();
//        FileInputStream in = null;
//        try {
//            in = org.apache.commons.io.FileUtils.openInputStream(directory);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(in);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openInputStream_existsButIsDirectory_add1667() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openInputStream_existsButIsDirectory_add1667");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "subdir");
//        directory.mkdirs();
//        FileInputStream in = null;
//        try {
//            in = org.apache.commons.io.FileUtils.openInputStream(directory);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(in);
//            IOUtils.closeQuietly(in);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openInputStream_existsButIsDirectory() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openInputStream_existsButIsDirectory");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        directory.mkdirs();
//        FileInputStream in = null;
//        try {
//            in = org.apache.commons.io.FileUtils.openInputStream(directory);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(in);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openInputStream_existsButIsDirectory_remove1272() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openInputStream_existsButIsDirectory_remove1272");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "subdir");
//        FileInputStream in = null;
//        try {
//            in = org.apache.commons.io.FileUtils.openInputStream(directory);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(in);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openInputStream_notExists_add1668() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openInputStream_notExists_add1668");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        FileInputStream in = null;
//        try {
//            in = org.apache.commons.io.FileUtils.openInputStream(directory);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(in);
//            IOUtils.closeQuietly(in);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openInputStream_notExists() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openInputStream_notExists");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        FileInputStream in = null;
//        try {
//            in = org.apache.commons.io.FileUtils.openInputStream(directory);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(in);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    void openOutputStream_noParent(boolean createFile) throws Exception {
//        File file = new File("test.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2708,file,2707,file.getParentFile());
//        try {
//            if (createFile) {
//                createLineBasedFile(file, new String[]{ "Hello" });
//            } 
//            FileOutputStream out = null;
//            try {
//                out = org.apache.commons.io.FileUtils.openOutputStream(file);
//                out.write(0);
//            } finally {
//                IOUtils.closeQuietly(out);
//            }
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2710,file,2709,file.exists());
//        } finally {
//            if ((file.delete()) == false) {
//                file.deleteOnExit();
//            } 
//        }
//    }
//
//    @Test(timeout = 1000)
//    public void test_openOutputStream_noParentCreateFile_add1674() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_noParentCreateFile_add1674");
//        openOutputStream_noParent(true);
//        openOutputStream_noParent(true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openOutputStream_noParentCreateFile() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_noParentCreateFile");
//        openOutputStream_noParent(false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openOutputStream_noParentCreateFile_remove1275() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_noParentCreateFile_remove1275");
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openOutputStream_noParentNoFile_add1675() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_noParentNoFile_add1675");
//        openOutputStream_noParent(false);
//        openOutputStream_noParent(false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openOutputStream_noParentNoFile() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_noParentNoFile");
//        openOutputStream_noParent(true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openOutputStream_noParentNoFile_remove1276() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_noParentNoFile_remove1276");
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openOutputStream_exists_add1669() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_exists_add1669");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        createLineBasedFile(file, new String[]{ "Hello" });
//        createLineBasedFile(file, new String[]{ "Hello" });
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//            out.write(0);
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3340,file,3339,file.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openOutputStream_exists_add1670() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_exists_add1670");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        createLineBasedFile(file, new String[]{ "Hello" });
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//            out.write(0);
//            out.write(0);
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3340,file,3339,file.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openOutputStream_exists_add1671() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_exists_add1671");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        createLineBasedFile(file, new String[]{ "Hello" });
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//            out.write(0);
//        } finally {
//            IOUtils.closeQuietly(out);
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3340,file,3339,file.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openOutputStream_exists() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_exists");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createLineBasedFile(file, new String[]{ "Hello" });
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//            out.write(0);
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3340,file,3339,file.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openOutputStream_exists_literalMutation3756() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_exists_literalMutation3756");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        createLineBasedFile(file, new String[]{ "foo" });
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//            out.write(0);
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3340,file,3339,file.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openOutputStream_exists_literalMutation3758() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_exists_literalMutation3758");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        createLineBasedFile(file, new String[]{ "Hello" });
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//            out.write(1);
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3340,file,3339,file.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openOutputStream_exists_remove1273() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_exists_remove1273");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//            out.write(0);
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3340,file,3339,file.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openOutputStream_existsButIsDirectory_add1672() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_existsButIsDirectory_add1672");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "subdir");
//        directory.mkdirs();
//        directory.mkdirs();
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(directory);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openOutputStream_existsButIsDirectory_add1673() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_existsButIsDirectory_add1673");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "subdir");
//        directory.mkdirs();
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(directory);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(out);
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openOutputStream_existsButIsDirectory() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_existsButIsDirectory");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        directory.mkdirs();
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(directory);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openOutputStream_existsButIsDirectory_remove1274() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_existsButIsDirectory_remove1274");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "subdir");
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(directory);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openOutputStream_notExists_add1676() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_notExists_add1676");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "a/test.txt");
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//            out.write(0);
//            out.write(0);
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3342,file,3341,file.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openOutputStream_notExists_add1677() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_notExists_add1677");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "a/test.txt");
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//            out.write(0);
//        } finally {
//            IOUtils.closeQuietly(out);
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3342,file,3341,file.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openOutputStream_notExists() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_notExists");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//            out.write(0);
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3342,file,3341,file.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openOutputStream_notExists_literalMutation3765() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_notExists_literalMutation3765");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "a/test.txt");
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//            out.write(-1);
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3342,file,3341,file.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void test_openOutputStream_notExistsCannotCreate_add1678() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_notExistsCannotCreate_add1678");
//        String longStr = "abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + "abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz"))));
//        File file = new File(FileBasedTestCase.getTestDirectory() , (("a/" + longStr) + "/test.txt"));
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(out);
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openOutputStream_notExistsCannotCreate() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_notExistsCannotCreate");
//        String longStr = "foo" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + "abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz"))));
//        File file = new File(FileBasedTestCase.getTestDirectory() , (("a/" + longStr) + "/test.txt"));
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openOutputStream_notExistsCannotCreate_literalMutation3767() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_notExistsCannotCreate_literalMutation3767");
//        String longStr = "abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("foo" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + "abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz"))));
//        File file = new File(FileBasedTestCase.getTestDirectory() , (("a/" + longStr) + "/test.txt"));
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openOutputStream_notExistsCannotCreate_literalMutation3768() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_notExistsCannotCreate_literalMutation3768");
//        String longStr = "abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("foo" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + "abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz"))));
//        File file = new File(FileBasedTestCase.getTestDirectory() , (("a/" + longStr) + "/test.txt"));
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openOutputStream_notExistsCannotCreate_literalMutation3769() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_notExistsCannotCreate_literalMutation3769");
//        String longStr = "abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("foo" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + "abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz"))));
//        File file = new File(FileBasedTestCase.getTestDirectory() , (("a/" + longStr) + "/test.txt"));
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openOutputStream_notExistsCannotCreate_literalMutation3770() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_notExistsCannotCreate_literalMutation3770");
//        String longStr = "abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("foo" + "abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz"))));
//        File file = new File(FileBasedTestCase.getTestDirectory() , (("a/" + longStr) + "/test.txt"));
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openOutputStream_notExistsCannotCreate_literalMutation3771() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_notExistsCannotCreate_literalMutation3771");
//        String longStr = "abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + "foo"))));
//        File file = new File(FileBasedTestCase.getTestDirectory() , (("a/" + longStr) + "/test.txt"));
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openOutputStream_notExistsCannotCreate_literalMutation3772() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_notExistsCannotCreate_literalMutation3772");
//        String longStr = "abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + "abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz"))));
//        File file = new File(FileBasedTestCase.getTestDirectory() , (("foo" + longStr) + "/test.txt"));
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void test_openOutputStream_notExistsCannotCreate_literalMutation3773() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "test_openOutputStream_notExistsCannotCreate_literalMutation3773");
//        String longStr = "abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + ("abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz" + "abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz"))));
//        File file = new File(FileBasedTestCase.getTestDirectory() , (("a/" + longStr) + "foo"));
//        FileOutputStream out = null;
//        try {
//            out = org.apache.commons.io.FileUtils.openOutputStream(file);
//        } catch (IOException ioe) {
//        } finally {
//            IOUtils.closeQuietly(out);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testByteCountToDisplaySizeBigInteger() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testByteCountToDisplaySizeBigInteger");
//        final BigInteger b1023 = BigInteger.valueOf(1024);
//        final BigInteger b1025 = BigInteger.valueOf(1025);
//        final BigInteger KB1 = BigInteger.valueOf(1024);
//        final BigInteger MB1 = KB1.multiply(KB1);
//        final BigInteger GB1 = MB1.multiply(KB1);
//        final BigInteger GB2 = GB1.add(GB1);
//        final BigInteger TB1 = GB1.multiply(KB1);
//        final BigInteger PB1 = TB1.multiply(KB1);
//        final BigInteger EB1 = PB1.multiply(KB1);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2712,null,2711,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.ZERO));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2714,null,2713,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.ONE));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2716,null,2715,org.apache.commons.io.FileUtils.byteCountToDisplaySize(b1023));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2718,null,2717,org.apache.commons.io.FileUtils.byteCountToDisplaySize(KB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2720,null,2719,org.apache.commons.io.FileUtils.byteCountToDisplaySize(b1025));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2722,null,2721,org.apache.commons.io.FileUtils.byteCountToDisplaySize(MB1.subtract(java.math.BigInteger.ONE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2724,null,2723,org.apache.commons.io.FileUtils.byteCountToDisplaySize(MB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2726,null,2725,org.apache.commons.io.FileUtils.byteCountToDisplaySize(MB1.add(java.math.BigInteger.ONE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2728,null,2727,org.apache.commons.io.FileUtils.byteCountToDisplaySize(GB1.subtract(java.math.BigInteger.ONE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2730,null,2729,org.apache.commons.io.FileUtils.byteCountToDisplaySize(GB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2732,null,2731,org.apache.commons.io.FileUtils.byteCountToDisplaySize(GB1.add(java.math.BigInteger.ONE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2734,null,2733,org.apache.commons.io.FileUtils.byteCountToDisplaySize(GB2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2736,null,2735,org.apache.commons.io.FileUtils.byteCountToDisplaySize(GB2.subtract(java.math.BigInteger.ONE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2738,null,2737,org.apache.commons.io.FileUtils.byteCountToDisplaySize(TB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2740,null,2739,org.apache.commons.io.FileUtils.byteCountToDisplaySize(PB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2742,null,2741,org.apache.commons.io.FileUtils.byteCountToDisplaySize(EB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2744,null,2743,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.lang.Long.MAX_VALUE));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2746,null,2745,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.valueOf(java.lang.Character.MAX_VALUE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2748,null,2747,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.valueOf(java.lang.Short.MAX_VALUE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2750,null,2749,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.valueOf(java.lang.Integer.MAX_VALUE)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testByteCountToDisplaySizeBigInteger_literalMutation3175() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testByteCountToDisplaySizeBigInteger_literalMutation3175");
//        final BigInteger b1023 = BigInteger.valueOf(1023);
//        final BigInteger b1025 = BigInteger.valueOf(1026);
//        final BigInteger KB1 = BigInteger.valueOf(1024);
//        final BigInteger MB1 = KB1.multiply(KB1);
//        final BigInteger GB1 = MB1.multiply(KB1);
//        final BigInteger GB2 = GB1.add(GB1);
//        final BigInteger TB1 = GB1.multiply(KB1);
//        final BigInteger PB1 = TB1.multiply(KB1);
//        final BigInteger EB1 = PB1.multiply(KB1);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2712,null,2711,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.ZERO));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2714,null,2713,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.ONE));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2716,null,2715,org.apache.commons.io.FileUtils.byteCountToDisplaySize(b1023));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2718,null,2717,org.apache.commons.io.FileUtils.byteCountToDisplaySize(KB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2720,null,2719,org.apache.commons.io.FileUtils.byteCountToDisplaySize(b1025));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2722,null,2721,org.apache.commons.io.FileUtils.byteCountToDisplaySize(MB1.subtract(java.math.BigInteger.ONE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2724,null,2723,org.apache.commons.io.FileUtils.byteCountToDisplaySize(MB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2726,null,2725,org.apache.commons.io.FileUtils.byteCountToDisplaySize(MB1.add(java.math.BigInteger.ONE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2728,null,2727,org.apache.commons.io.FileUtils.byteCountToDisplaySize(GB1.subtract(java.math.BigInteger.ONE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2730,null,2729,org.apache.commons.io.FileUtils.byteCountToDisplaySize(GB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2732,null,2731,org.apache.commons.io.FileUtils.byteCountToDisplaySize(GB1.add(java.math.BigInteger.ONE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2734,null,2733,org.apache.commons.io.FileUtils.byteCountToDisplaySize(GB2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2736,null,2735,org.apache.commons.io.FileUtils.byteCountToDisplaySize(GB2.subtract(java.math.BigInteger.ONE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2738,null,2737,org.apache.commons.io.FileUtils.byteCountToDisplaySize(TB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2740,null,2739,org.apache.commons.io.FileUtils.byteCountToDisplaySize(PB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2742,null,2741,org.apache.commons.io.FileUtils.byteCountToDisplaySize(EB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2744,null,2743,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.lang.Long.MAX_VALUE));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2746,null,2745,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.valueOf(java.lang.Character.MAX_VALUE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2748,null,2747,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.valueOf(java.lang.Short.MAX_VALUE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2750,null,2749,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.valueOf(java.lang.Integer.MAX_VALUE)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testByteCountToDisplaySizeBigInteger_literalMutation3176() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testByteCountToDisplaySizeBigInteger_literalMutation3176");
//        final BigInteger b1023 = BigInteger.valueOf(1023);
//        final BigInteger b1025 = BigInteger.valueOf(1025);
//        final BigInteger KB1 = BigInteger.valueOf(1025);
//        final BigInteger MB1 = KB1.multiply(KB1);
//        final BigInteger GB1 = MB1.multiply(KB1);
//        final BigInteger GB2 = GB1.add(GB1);
//        final BigInteger TB1 = GB1.multiply(KB1);
//        final BigInteger PB1 = TB1.multiply(KB1);
//        final BigInteger EB1 = PB1.multiply(KB1);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2712,null,2711,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.ZERO));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2714,null,2713,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.ONE));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2716,null,2715,org.apache.commons.io.FileUtils.byteCountToDisplaySize(b1023));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2718,null,2717,org.apache.commons.io.FileUtils.byteCountToDisplaySize(KB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2720,null,2719,org.apache.commons.io.FileUtils.byteCountToDisplaySize(b1025));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2722,null,2721,org.apache.commons.io.FileUtils.byteCountToDisplaySize(MB1.subtract(java.math.BigInteger.ONE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2724,null,2723,org.apache.commons.io.FileUtils.byteCountToDisplaySize(MB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2726,null,2725,org.apache.commons.io.FileUtils.byteCountToDisplaySize(MB1.add(java.math.BigInteger.ONE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2728,null,2727,org.apache.commons.io.FileUtils.byteCountToDisplaySize(GB1.subtract(java.math.BigInteger.ONE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2730,null,2729,org.apache.commons.io.FileUtils.byteCountToDisplaySize(GB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2732,null,2731,org.apache.commons.io.FileUtils.byteCountToDisplaySize(GB1.add(java.math.BigInteger.ONE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2734,null,2733,org.apache.commons.io.FileUtils.byteCountToDisplaySize(GB2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2736,null,2735,org.apache.commons.io.FileUtils.byteCountToDisplaySize(GB2.subtract(java.math.BigInteger.ONE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2738,null,2737,org.apache.commons.io.FileUtils.byteCountToDisplaySize(TB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2740,null,2739,org.apache.commons.io.FileUtils.byteCountToDisplaySize(PB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2742,null,2741,org.apache.commons.io.FileUtils.byteCountToDisplaySize(EB1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2744,null,2743,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.lang.Long.MAX_VALUE));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2746,null,2745,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.valueOf(java.lang.Character.MAX_VALUE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2748,null,2747,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.valueOf(java.lang.Short.MAX_VALUE)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2750,null,2749,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.valueOf(java.lang.Integer.MAX_VALUE)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testByteCountToDisplaySizeLong() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testByteCountToDisplaySizeLong");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2752,null,2751,org.apache.commons.io.FileUtils.byteCountToDisplaySize(0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2754,null,2753,org.apache.commons.io.FileUtils.byteCountToDisplaySize(1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2756,null,2755,org.apache.commons.io.FileUtils.byteCountToDisplaySize(1023));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2758,null,2757,org.apache.commons.io.FileUtils.byteCountToDisplaySize(1024));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2760,null,2759,org.apache.commons.io.FileUtils.byteCountToDisplaySize(1025));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2762,null,2761,org.apache.commons.io.FileUtils.byteCountToDisplaySize((1024 * 1023)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2764,null,2763,org.apache.commons.io.FileUtils.byteCountToDisplaySize((1024 * 1024)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2766,null,2765,org.apache.commons.io.FileUtils.byteCountToDisplaySize((1024 * 1025)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2768,null,2767,org.apache.commons.io.FileUtils.byteCountToDisplaySize(((1024 * 1024) * 1023)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2770,null,2769,org.apache.commons.io.FileUtils.byteCountToDisplaySize(((1024 * 1024) * 1024)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2772,null,2771,org.apache.commons.io.FileUtils.byteCountToDisplaySize(((1024 * 1024) * 1025)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2774,null,2773,org.apache.commons.io.FileUtils.byteCountToDisplaySize((((1024L * 1024) * 1024) * 2)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2776,null,2775,org.apache.commons.io.FileUtils.byteCountToDisplaySize(((((1024 * 1024) * 1024) * 2) - 1)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2778,null,2777,org.apache.commons.io.FileUtils.byteCountToDisplaySize((((1024L * 1024) * 1024) * 1024)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2780,null,2779,org.apache.commons.io.FileUtils.byteCountToDisplaySize(((((1024L * 1024) * 1024) * 1024) * 1024)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2782,null,2781,org.apache.commons.io.FileUtils.byteCountToDisplaySize((((((1024L * 1024) * 1024) * 1024) * 1024) * 1024)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2784,null,2783,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.lang.Long.MAX_VALUE));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2786,null,2785,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.lang.Character.MAX_VALUE));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2788,null,2787,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.lang.Short.MAX_VALUE));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2790,null,2789,org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.lang.Integer.MAX_VALUE));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFile1() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFile1");
//        URL url = new URL("foo" , null , "a/b/c/file.txt");
//        File file = org.apache.commons.io.FileUtils.toFile(url);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3242,((file.toString().indexOf("file.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFile1_literalMutation3513() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFile1_literalMutation3513");
//        URL url = new URL("file" , null , "foo");
//        File file = org.apache.commons.io.FileUtils.toFile(url);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3242,((file.toString().indexOf("file.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFile2() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFile2");
//        URL url = new URL("foo" , null , "a/b/c/file%20n%61me%2520.tx%74");
//        File file = org.apache.commons.io.FileUtils.toFile(url);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3243,((file.toString().indexOf("file name%20.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFile2_literalMutation3516() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFile2_literalMutation3516");
//        URL url = new URL("file" , null , "foo");
//        File file = org.apache.commons.io.FileUtils.toFile(url);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3243,((file.toString().indexOf("file name%20.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFile3() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFile3");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3245,null,3244,org.apache.commons.io.FileUtils.toFile(((java.net.URL)(null))));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3247,null,3246,org.apache.commons.io.FileUtils.toFile(new java.net.URL("http://jakarta.apache.org")));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFile4() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFile4");
//        URL url = new URL("foo" , null , "a/b/c/file%%20%me.txt%");
//        File file = org.apache.commons.io.FileUtils.toFile(url);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3248,((file.toString().indexOf("file% %me.txt%")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFile4_literalMutation3519() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFile4_literalMutation3519");
//        URL url = new URL("file" , null , "foo");
//        File file = org.apache.commons.io.FileUtils.toFile(url);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3248,((file.toString().indexOf("file% %me.txt%")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * IO-252
//     */
//public void testToFile5() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFile5");
//        URL url = new URL("foo" , null , "both%20are%20100%20%25%20true");
//        File file = org.apache.commons.io.FileUtils.toFile(url);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3250,file,3249,file.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * IO-252
//     */
//public void testToFile5_literalMutation3522() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFile5_literalMutation3522");
//        URL url = new URL("file" , null , "foo");
//        File file = org.apache.commons.io.FileUtils.toFile(url);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3250,file,3249,file.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFileUtf8() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFileUtf8");
//        URL url = new URL("foo" , null , "/home/%C3%A4%C3%B6%C3%BC%C3%9F");
//        File file = org.apache.commons.io.FileUtils.toFile(url);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3251,((file.toString().indexOf("äöüß")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFileUtf8_literalMutation3525() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFileUtf8_literalMutation3525");
//        URL url = new URL("file" , null , "foo");
//        File file = org.apache.commons.io.FileUtils.toFile(url);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3251,((file.toString().indexOf("äöüß")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDecodeUrl() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDecodeUrl");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2986,null,2985,org.apache.commons.io.FileUtils.decodeUrl(""));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2988,null,2987,org.apache.commons.io.FileUtils.decodeUrl("foo"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2990,null,2989,org.apache.commons.io.FileUtils.decodeUrl("+"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2992,null,2991,org.apache.commons.io.FileUtils.decodeUrl("%25%20"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2994,null,2993,org.apache.commons.io.FileUtils.decodeUrl("%2520"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2996,null,2995,org.apache.commons.io.FileUtils.decodeUrl("jar:file:/C:/dir/sub%20dir/1.0/foo-1.0.jar!/org/Bar.class"));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDecodeUrlLenient() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDecodeUrlLenient");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3000,null,2999,org.apache.commons.io.FileUtils.decodeUrl(" "));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3002,null,3001,org.apache.commons.io.FileUtils.decodeUrl("äöüß"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3004,null,3003,org.apache.commons.io.FileUtils.decodeUrl("%"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3006,null,3005,org.apache.commons.io.FileUtils.decodeUrl("%%20"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3008,null,3007,org.apache.commons.io.FileUtils.decodeUrl("%2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3010,null,3009,org.apache.commons.io.FileUtils.decodeUrl("%2G"));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDecodeUrlNullSafe() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDecodeUrlNullSafe");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3012,null,3011,org.apache.commons.io.FileUtils.decodeUrl(null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDecodeUrlEncodingUtf8() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDecodeUrlEncodingUtf8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2998,null,2997,org.apache.commons.io.FileUtils.decodeUrl("%C3%A4%C3%B6%C3%BC%C3%9F"));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFiles1() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFiles1");
//        URL[] urls = new URL[]{ new URL("foo" , null , "file1.txt") , new URL("file" , null , "file2.txt") };
//        File[] files = org.apache.commons.io.FileUtils.toFiles(urls);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3252,urls.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3253,files.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3254,("File: " + (files[0])));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3255,((files[0].toString().indexOf("file1.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3256,("File: " + (files[1])));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3257,((files[1].toString().indexOf("file2.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFiles1_literalMutation3528() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFiles1_literalMutation3528");
//        URL[] urls = new URL[]{ new URL("file" , null , "foo") , new URL("file" , null , "file2.txt") };
//        File[] files = org.apache.commons.io.FileUtils.toFiles(urls);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3252,urls.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3253,files.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3254,("File: " + (files[0])));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3255,((files[0].toString().indexOf("file1.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3256,("File: " + (files[1])));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3257,((files[1].toString().indexOf("file2.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFiles1_literalMutation3529() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFiles1_literalMutation3529");
//        URL[] urls = new URL[]{ new URL("file" , null , "file1.txt") , new URL("foo" , null , "file2.txt") };
//        File[] files = org.apache.commons.io.FileUtils.toFiles(urls);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3252,urls.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3253,files.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3254,("File: " + (files[0])));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3255,((files[0].toString().indexOf("file1.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3256,("File: " + (files[1])));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3257,((files[1].toString().indexOf("file2.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFiles1_literalMutation3531() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFiles1_literalMutation3531");
//        URL[] urls = new URL[]{ new URL("file" , null , "file1.txt") , new URL("file" , null , "foo") };
//        File[] files = org.apache.commons.io.FileUtils.toFiles(urls);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3252,urls.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3253,files.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3254,("File: " + (files[0])));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3255,((files[0].toString().indexOf("file1.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3256,("File: " + (files[1])));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3257,((files[1].toString().indexOf("file2.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFiles2() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFiles2");
//        URL[] urls = new URL[]{ new URL("foo" , null , "file1.txt") , null };
//        File[] files = org.apache.commons.io.FileUtils.toFiles(urls);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3258,urls.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3259,files.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3260,("File: " + (files[0])));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3261,((files[0].toString().indexOf("file1.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3262,("File: " + (files[1])));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3263,files[1]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFiles2_literalMutation3534() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFiles2_literalMutation3534");
//        URL[] urls = new URL[]{ new URL("file" , null , "foo") , null };
//        File[] files = org.apache.commons.io.FileUtils.toFiles(urls);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3258,urls.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3259,files.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3260,("File: " + (files[0])));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3261,((files[0].toString().indexOf("file1.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3262,("File: " + (files[1])));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3263,files[1]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFiles3a() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFiles3a");
//        URL[] urls = new URL[0];
//        File[] files = org.apache.commons.io.FileUtils.toFiles(urls);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3264,files.length);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFiles3() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFiles3");
//        URL[] urls = new URL[1];
//        File[] files = org.apache.commons.io.FileUtils.toFiles(urls);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3264,files.length);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testToFiles4_add1606() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFiles4_add1606");
//        URL[] urls = new URL[]{ new URL("file" , null , "file1.txt") , new URL("http" , "jakarta.apache.org" , "file1.txt") };
//        try {
//            org.apache.commons.io.FileUtils.toFiles(urls);
//            org.apache.commons.io.FileUtils.toFiles(urls);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFiles4() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFiles4");
//        URL[] urls = new URL[]{ new URL("foo" , null , "file1.txt") , new URL("http" , "jakarta.apache.org" , "file1.txt") };
//        try {
//            org.apache.commons.io.FileUtils.toFiles(urls);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFiles4_literalMutation3540() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFiles4_literalMutation3540");
//        URL[] urls = new URL[]{ new URL("file" , null , "foo") , new URL("http" , "jakarta.apache.org" , "file1.txt") };
//        try {
//            org.apache.commons.io.FileUtils.toFiles(urls);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFiles4_literalMutation3541() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFiles4_literalMutation3541");
//        URL[] urls = new URL[]{ new URL("file" , null , "file1.txt") , new URL("foo" , "jakarta.apache.org" , "file1.txt") };
//        try {
//            org.apache.commons.io.FileUtils.toFiles(urls);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFiles4_literalMutation3542() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFiles4_literalMutation3542");
//        URL[] urls = new URL[]{ new URL("file" , null , "file1.txt") , new URL("http" , "foo" , "file1.txt") };
//        try {
//            org.apache.commons.io.FileUtils.toFiles(urls);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToFiles4_literalMutation3543() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToFiles4_literalMutation3543");
//        URL[] urls = new URL[]{ new URL("file" , null , "file1.txt") , new URL("http" , "jakarta.apache.org" , "foo") };
//        try {
//            org.apache.commons.io.FileUtils.toFiles(urls);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToURLs1() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToURLs1");
//        File[] files = new File[]{ new File(FileBasedTestCase.getTestDirectory() , "foo") , new File(FileBasedTestCase.getTestDirectory() , "file2.txt") , new File(FileBasedTestCase.getTestDirectory() , "test file.txt") };
//        URL[] urls = org.apache.commons.io.FileUtils.toURLs(files);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3265,files.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3266,urls.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3268,urls[0].toExternalForm(),3267,urls[0].toExternalForm().startsWith("file:"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3269,((urls[0].toExternalForm().indexOf("file1.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3271,urls[1].toExternalForm(),3270,urls[1].toExternalForm().startsWith("file:"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3272,((urls[1].toExternalForm().indexOf("file2.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3274,urls[2].toExternalForm(),3273,urls[2].toExternalForm().startsWith("file:"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3275,((urls[2].toExternalForm().indexOf("test%20file.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToURLs1_literalMutation3545() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToURLs1_literalMutation3545");
//        File[] files = new File[]{ new File(FileBasedTestCase.getTestDirectory() , "file1.txt") , new File(FileBasedTestCase.getTestDirectory() , "foo") , new File(FileBasedTestCase.getTestDirectory() , "test file.txt") };
//        URL[] urls = org.apache.commons.io.FileUtils.toURLs(files);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3265,files.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3266,urls.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3268,urls[0].toExternalForm(),3267,urls[0].toExternalForm().startsWith("file:"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3269,((urls[0].toExternalForm().indexOf("file1.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3271,urls[1].toExternalForm(),3270,urls[1].toExternalForm().startsWith("file:"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3272,((urls[1].toExternalForm().indexOf("file2.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3274,urls[2].toExternalForm(),3273,urls[2].toExternalForm().startsWith("file:"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3275,((urls[2].toExternalForm().indexOf("test%20file.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToURLs1_literalMutation3546() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToURLs1_literalMutation3546");
//        File[] files = new File[]{ new File(FileBasedTestCase.getTestDirectory() , "file1.txt") , new File(FileBasedTestCase.getTestDirectory() , "file2.txt") , new File(FileBasedTestCase.getTestDirectory() , "foo") };
//        URL[] urls = org.apache.commons.io.FileUtils.toURLs(files);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3265,files.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3266,urls.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3268,urls[0].toExternalForm(),3267,urls[0].toExternalForm().startsWith("file:"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3269,((urls[0].toExternalForm().indexOf("file1.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3271,urls[1].toExternalForm(),3270,urls[1].toExternalForm().startsWith("file:"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3272,((urls[1].toExternalForm().indexOf("file2.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3274,urls[2].toExternalForm(),3273,urls[2].toExternalForm().startsWith("file:"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3275,((urls[2].toExternalForm().indexOf("test%20file.txt")) >= 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testToURLs3a() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testToURLs3a");
//        File[] files = new File[1];
//        URL[] urls = org.apache.commons.io.FileUtils.toURLs(files);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3276,urls.length);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_add1366() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_add1366");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_add1367() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_add1367");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_add1368() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_add1368");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_add1369() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_add1369");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_add1370() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_add1370");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_add1371() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_add1371");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_add1372() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_add1372");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_add1373() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_add1373");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_add1374() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_add1374");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEquals() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "foo"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEquals_literalMutation3204() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_literalMutation3204");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "foo"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEquals_literalMutation3205() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_literalMutation3205");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("foo"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEquals_literalMutation3206() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_literalMutation3206");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "foo"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEquals_literalMutation3207() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_literalMutation3207");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("foo"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEquals_literalMutation3208() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_literalMutation3208");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "foo"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEquals_literalMutation3209() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_literalMutation3209");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("foo"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_remove1042() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_remove1042");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_remove1043() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_remove1043");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_remove1044() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_remove1044");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_remove1045() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_remove1045");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_remove1046() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_remove1046");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_remove1047() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_remove1047");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_remove1048() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_remove1048");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEquals_remove1049() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEquals_remove1049");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2857,null,2856,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2859,null,2858,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2861,null,2860,org.apache.commons.io.FileUtils.contentEquals(file2, file2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2863,null,2862,org.apache.commons.io.FileUtils.contentEquals(file2, file));
//        try {
//            org.apache.commons.io.FileUtils.contentEquals(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ioe) {
//        }
//        File objFile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1);
//        File objFile1b = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".object2"));
//        objFile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"), objFile1b);
//        File objFile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        objFile2.deleteOnExit();
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"), objFile2);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2865,null,2864,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2867,null,2866,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2869,null,2868,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2871,null,2870,org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2873,null,2872,org.apache.commons.io.FileUtils.contentEquals(objFile1b, objFile1b));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2875,null,2874,org.apache.commons.io.FileUtils.contentEquals(objFile2, objFile2));
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2877,null,2876,org.apache.commons.io.FileUtils.contentEquals(file, file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2879,null,2878,org.apache.commons.io.FileUtils.contentEquals(file, file2));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_add1375() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_add1375");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_add1376() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_add1376");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_add1377() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_add1377");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_add1378() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_add1378");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_add1379() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_add1379");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_add1380() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_add1380");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_add1381() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_add1381");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_add1382() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_add1382");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_add1383() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_add1383");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEqualsIgnoreEOL() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "foo"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEqualsIgnoreEOL_literalMutation3212() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_literalMutation3212");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "foo"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEqualsIgnoreEOL_literalMutation3213() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_literalMutation3213");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "foo");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEqualsIgnoreEOL_literalMutation3214() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_literalMutation3214");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "foo"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEqualsIgnoreEOL_literalMutation3215() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_literalMutation3215");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "foo");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEqualsIgnoreEOL_literalMutation3216() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_literalMutation3216");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "foo"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEqualsIgnoreEOL_literalMutation3217() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_literalMutation3217");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEqualsIgnoreEOL_literalMutation3218() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_literalMutation3218");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEqualsIgnoreEOL_literalMutation3219() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_literalMutation3219");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testContentEqualsIgnoreEOL_literalMutation3220() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_literalMutation3220");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_remove1050() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_remove1050");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_remove1051() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_remove1051");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_remove1052() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_remove1052");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_remove1053() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_remove1053");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_remove1054() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_remove1054");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_remove1055() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_remove1055");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file1.createNewFile();
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_remove1056() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_remove1056");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testContentEqualsIgnoreEOL_remove1057() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testContentEqualsIgnoreEOL_remove1057");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , getName());
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + "2"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2800,null,2799,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2802,null,2801,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2804,null,2803,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2806,null,2805,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
//        try {
//            org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory(), null);
//        } catch (IOException ioe) {
//        }
//        File tfile1 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt1"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile1, "123\r");
//        File tfile2 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".txt2"));
//        tfile1.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile2, "123\n");
//        File tfile3 = new File(FileBasedTestCase.getTestDirectory() , ((getName()) + ".collection"));
//        tfile3.deleteOnExit();
//        org.apache.commons.io.FileUtils.write(tfile3, "123\r\n2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2808,null,2807,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2810,null,2809,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2812,null,2811,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2814,null,2813,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2816,null,2815,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2818,null,2817,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
//        URL urlCR = getClass().getResource("FileUtilsTestDataCR.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2819,urlCR);
//        File cr = new File(urlCR.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2821,cr,2820,cr.exists());
//        URL urlCRLF = getClass().getResource("FileUtilsTestDataCRLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2822,urlCRLF);
//        File crlf = new File(urlCRLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2824,crlf,2823,crlf.exists());
//        URL urlLF = getClass().getResource("FileUtilsTestDataLF.dat");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2825,urlLF);
//        File lf = new File(urlLF.getPath());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2827,lf,2826,lf.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2829,null,2828,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2831,null,2830,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2833,null,2832,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2835,null,2834,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2837,null,2836,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2839,null,2838,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2841,null,2840,org.apache.commons.io.FileUtils.contentEquals(cr, cr));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2843,null,2842,org.apache.commons.io.FileUtils.contentEquals(crlf, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2845,null,2844,org.apache.commons.io.FileUtils.contentEquals(lf, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2847,null,2846,org.apache.commons.io.FileUtils.contentEquals(cr, crlf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2849,null,2848,org.apache.commons.io.FileUtils.contentEquals(cr, lf));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2851,null,2850,org.apache.commons.io.FileUtils.contentEquals(crlf, lf));
//        file2.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2853,null,2852,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2855,null,2854,org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyURLToFile_add1447() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyURLToFile_add1447");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        file.deleteOnExit();
//        file.deleteOnExit();
//        String resourceName = "/java/lang/Object.class";
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource(resourceName), file);
//        FileInputStream fis = new FileInputStream(file);
//        try {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2984,null,2983,org.apache.commons.io.IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis));
//        } finally {
//            fis.close();
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyURLToFile_add1448() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyURLToFile_add1448");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        file.deleteOnExit();
//        String resourceName = "/java/lang/Object.class";
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource(resourceName), file);
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource(resourceName), file);
//        FileInputStream fis = new FileInputStream(file);
//        try {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2984,null,2983,org.apache.commons.io.IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis));
//        } finally {
//            fis.close();
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyURLToFile_add1449() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyURLToFile_add1449");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        file.deleteOnExit();
//        String resourceName = "/java/lang/Object.class";
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource(resourceName), file);
//        FileInputStream fis = new FileInputStream(file);
//        try {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2984,null,2983,org.apache.commons.io.IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis));
//        } finally {
//            fis.close();
//            fis.close();
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyURLToFile() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyURLToFile");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        file.deleteOnExit();
//        String resourceName = "foo";
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource(resourceName), file);
//        FileInputStream fis = new FileInputStream(file);
//        try {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2984,null,2983,org.apache.commons.io.IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis));
//        } finally {
//            fis.close();
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyURLToFile_remove1112() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyURLToFile_remove1112");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        String resourceName = "/java/lang/Object.class";
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource(resourceName), file);
//        FileInputStream fis = new FileInputStream(file);
//        try {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2984,null,2983,org.apache.commons.io.IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis));
//        } finally {
//            fis.close();
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyURLToFile_remove1113() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyURLToFile_remove1113");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        file.deleteOnExit();
//        String resourceName = "/java/lang/Object.class";
//        FileInputStream fis = new FileInputStream(file);
//        try {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2984,null,2983,org.apache.commons.io.IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis));
//        } finally {
//            fis.close();
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyURLToFileWithTimeout_add1450() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyURLToFileWithTimeout_add1450");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "testCopyURLToFileWithTimeout");
//        file.deleteOnExit();
//        file.deleteOnExit();
//        String resourceName = "/java/lang/Object.class";
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource(resourceName), file, 500, 500);
//        FileInputStream fis = new FileInputStream(file);
//        try {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2982,null,2981,org.apache.commons.io.IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis));
//        } finally {
//            fis.close();
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyURLToFileWithTimeout_add1451() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyURLToFileWithTimeout_add1451");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "testCopyURLToFileWithTimeout");
//        file.deleteOnExit();
//        String resourceName = "/java/lang/Object.class";
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource(resourceName), file, 500, 500);
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource(resourceName), file, 500, 500);
//        FileInputStream fis = new FileInputStream(file);
//        try {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2982,null,2981,org.apache.commons.io.IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis));
//        } finally {
//            fis.close();
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyURLToFileWithTimeout_add1452() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyURLToFileWithTimeout_add1452");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "testCopyURLToFileWithTimeout");
//        file.deleteOnExit();
//        String resourceName = "/java/lang/Object.class";
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource(resourceName), file, 500, 500);
//        FileInputStream fis = new FileInputStream(file);
//        try {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2982,null,2981,org.apache.commons.io.IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis));
//        } finally {
//            fis.close();
//            fis.close();
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyURLToFileWithTimeout() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyURLToFileWithTimeout");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        file.deleteOnExit();
//        String resourceName = "/java/lang/Object.class";
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource(resourceName), file, 500, 500);
//        FileInputStream fis = new FileInputStream(file);
//        try {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2982,null,2981,org.apache.commons.io.IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis));
//        } finally {
//            fis.close();
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyURLToFileWithTimeout_literalMutation3294() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyURLToFileWithTimeout_literalMutation3294");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "testCopyURLToFileWithTimeout");
//        file.deleteOnExit();
//        String resourceName = "foo";
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource(resourceName), file, 500, 500);
//        FileInputStream fis = new FileInputStream(file);
//        try {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2982,null,2981,org.apache.commons.io.IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis));
//        } finally {
//            fis.close();
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyURLToFileWithTimeout_literalMutation3295() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyURLToFileWithTimeout_literalMutation3295");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "testCopyURLToFileWithTimeout");
//        file.deleteOnExit();
//        String resourceName = "/java/lang/Object.class";
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource(resourceName), file, 499, 500);
//        FileInputStream fis = new FileInputStream(file);
//        try {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2982,null,2981,org.apache.commons.io.IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis));
//        } finally {
//            fis.close();
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyURLToFileWithTimeout_literalMutation3296() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyURLToFileWithTimeout_literalMutation3296");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "testCopyURLToFileWithTimeout");
//        file.deleteOnExit();
//        String resourceName = "/java/lang/Object.class";
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource(resourceName), file, 500, 499);
//        FileInputStream fis = new FileInputStream(file);
//        try {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2982,null,2981,org.apache.commons.io.IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis));
//        } finally {
//            fis.close();
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyURLToFileWithTimeout_remove1114() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyURLToFileWithTimeout_remove1114");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "testCopyURLToFileWithTimeout");
//        String resourceName = "/java/lang/Object.class";
//        org.apache.commons.io.FileUtils.copyURLToFile(getClass().getResource(resourceName), file, 500, 500);
//        FileInputStream fis = new FileInputStream(file);
//        try {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2982,null,2981,org.apache.commons.io.IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis));
//        } finally {
//            fis.close();
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyURLToFileWithTimeout_remove1115() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyURLToFileWithTimeout_remove1115");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "testCopyURLToFileWithTimeout");
//        file.deleteOnExit();
//        String resourceName = "/java/lang/Object.class";
//        FileInputStream fis = new FileInputStream(file);
//        try {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2982,null,2981,org.apache.commons.io.IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis));
//        } finally {
//            fis.close();
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceMkdir() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceMkdir");
//        org.apache.commons.io.FileUtils.forceMkdir(FileBasedTestCase.getTestDirectory());
//        org.apache.commons.io.FileUtils.forceMkdir(FileBasedTestCase.getTestDirectory());
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , getName());
//        testFile.deleteOnExit();
//        testFile.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3048,testFile,3047,testFile.exists());
//        try {
//            org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        } catch (IOException ex) {
//        }
//        testFile.delete();
//        org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3050,testFile,3049,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceMkdir_add1470() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceMkdir_add1470");
//        org.apache.commons.io.FileUtils.forceMkdir(FileBasedTestCase.getTestDirectory());
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , getName());
//        testFile.deleteOnExit();
//        testFile.deleteOnExit();
//        testFile.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3048,testFile,3047,testFile.exists());
//        try {
//            org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        } catch (IOException ex) {
//        }
//        testFile.delete();
//        org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3050,testFile,3049,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceMkdir_add1471() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceMkdir_add1471");
//        org.apache.commons.io.FileUtils.forceMkdir(FileBasedTestCase.getTestDirectory());
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , getName());
//        testFile.deleteOnExit();
//        testFile.createNewFile();
//        testFile.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3048,testFile,3047,testFile.exists());
//        try {
//            org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        } catch (IOException ex) {
//        }
//        testFile.delete();
//        org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3050,testFile,3049,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceMkdir_add1472() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceMkdir_add1472");
//        org.apache.commons.io.FileUtils.forceMkdir(FileBasedTestCase.getTestDirectory());
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , getName());
//        testFile.deleteOnExit();
//        testFile.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3048,testFile,3047,testFile.exists());
//        try {
//            org.apache.commons.io.FileUtils.forceMkdir(testFile);
//            org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        } catch (IOException ex) {
//        }
//        testFile.delete();
//        org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3050,testFile,3049,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceMkdir_add1473() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceMkdir_add1473");
//        org.apache.commons.io.FileUtils.forceMkdir(FileBasedTestCase.getTestDirectory());
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , getName());
//        testFile.deleteOnExit();
//        testFile.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3048,testFile,3047,testFile.exists());
//        try {
//            org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        } catch (IOException ex) {
//        }
//        testFile.delete();
//        testFile.delete();
//        org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3050,testFile,3049,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceMkdir_add1474() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceMkdir_add1474");
//        org.apache.commons.io.FileUtils.forceMkdir(FileBasedTestCase.getTestDirectory());
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , getName());
//        testFile.deleteOnExit();
//        testFile.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3048,testFile,3047,testFile.exists());
//        try {
//            org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        } catch (IOException ex) {
//        }
//        testFile.delete();
//        org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3050,testFile,3049,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceMkdir_remove1127() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceMkdir_remove1127");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , getName());
//        testFile.deleteOnExit();
//        testFile.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3048,testFile,3047,testFile.exists());
//        try {
//            org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        } catch (IOException ex) {
//        }
//        testFile.delete();
//        org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3050,testFile,3049,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceMkdir_remove1128() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceMkdir_remove1128");
//        org.apache.commons.io.FileUtils.forceMkdir(FileBasedTestCase.getTestDirectory());
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , getName());
//        testFile.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3048,testFile,3047,testFile.exists());
//        try {
//            org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        } catch (IOException ex) {
//        }
//        testFile.delete();
//        org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3050,testFile,3049,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceMkdir_remove1129() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceMkdir_remove1129");
//        org.apache.commons.io.FileUtils.forceMkdir(FileBasedTestCase.getTestDirectory());
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , getName());
//        testFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3048,testFile,3047,testFile.exists());
//        try {
//            org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        } catch (IOException ex) {
//        }
//        testFile.delete();
//        org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3050,testFile,3049,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceMkdir_remove1130() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceMkdir_remove1130");
//        org.apache.commons.io.FileUtils.forceMkdir(FileBasedTestCase.getTestDirectory());
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , getName());
//        testFile.deleteOnExit();
//        testFile.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3048,testFile,3047,testFile.exists());
//        try {
//            org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        } catch (IOException ex) {
//        }
//        org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3050,testFile,3049,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceMkdir_remove1131() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceMkdir_remove1131");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , getName());
//        testFile.deleteOnExit();
//        testFile.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3048,testFile,3047,testFile.exists());
//        try {
//            org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        } catch (IOException ex) {
//        }
//        testFile.delete();
//        org.apache.commons.io.FileUtils.forceMkdir(testFile);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3050,testFile,3049,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectory() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectory");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3231,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3233,null,3232,org.apache.commons.io.FileUtils.sizeOfDirectory(file));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectory_add1587() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectory_add1587");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3231,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3233,null,3232,org.apache.commons.io.FileUtils.sizeOfDirectory(file));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectory_add1588() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectory_add1588");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3231,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3233,null,3232,org.apache.commons.io.FileUtils.sizeOfDirectory(file));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectory_add1589() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectory_add1589");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3231,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3233,null,3232,org.apache.commons.io.FileUtils.sizeOfDirectory(file));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectory_add1590() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectory_add1590");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3231,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3233,null,3232,org.apache.commons.io.FileUtils.sizeOfDirectory(file));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectory_add1591() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectory_add1591");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3231,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3233,null,3232,org.apache.commons.io.FileUtils.sizeOfDirectory(file));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectory_add1592() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectory_add1592");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3231,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3233,null,3232,org.apache.commons.io.FileUtils.sizeOfDirectory(file));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectory_remove1198() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectory_remove1198");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3231,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3233,null,3232,org.apache.commons.io.FileUtils.sizeOfDirectory(file));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectory_remove1199() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectory_remove1199");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3231,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3233,null,3232,org.apache.commons.io.FileUtils.sizeOfDirectory(file));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectory_remove1200() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectory_remove1200");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3231,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3233,null,3232,org.apache.commons.io.FileUtils.sizeOfDirectory(file));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectory_remove1201() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectory_remove1201");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3231,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3233,null,3232,org.apache.commons.io.FileUtils.sizeOfDirectory(file));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectory_remove1202() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectory_remove1202");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectory(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3231,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3233,null,3232,org.apache.commons.io.FileUtils.sizeOfDirectory(file));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    private void createCircularSymLink(File file) throws IOException {
//        if (!(org.apache.commons.io.FilenameUtils.isSystemWindows())) {
//            java.lang.Runtime.getRuntime().exec((((("ln -s " + file) + "/.. ") + file) + "/cycle"));
//        } else {
//            try {
//                java.lang.Runtime.getRuntime().exec((((("mklink /D " + file) + "/cycle") + file) + "/.. "));
//            } catch (IOException ioe) {
//            }
//        }
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_add1594() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_add1594");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_add1595() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_add1595");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_add1596() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_add1596");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_add1597() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_add1597");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_add1598() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_add1598");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_add1599() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_add1599");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_add1600() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_add1600");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_add1601() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_add1601");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_add1602() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_add1602");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_add1603() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_add1603");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_add1604() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_add1604");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_add1605() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_add1605");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeOf() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOf");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("foo" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_remove1203() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_remove1203");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_remove1204() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_remove1204");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_remove1205() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_remove1205");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_remove1206() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_remove1206");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_remove1207() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_remove1207");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_remove1208() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_remove1208");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_remove1209() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_remove1209");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_remove1210() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_remove1210");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_remove1211() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_remove1211");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.delete();
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_remove1212() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_remove1212");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeOfDirectoryAsBigInteger_remove1213() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfDirectoryAsBigInteger_remove1213");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        try {
//            org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.mkdir();
//        createCircularSymLink(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3225,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3227,null,3226,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        file.delete();
//        file.mkdir();
//        File nonEmptyFile = new File(file , ("nonEmptyFile" + (System.nanoTime())));
//        createFile(nonEmptyFile, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
//        nonEmptyFile.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3228,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_GT_ZERO_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3230,null,3229,org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file));
//        nonEmptyFile.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#sizeOf(File)} method.
//     * @throws Exception
//     */
//@Test(timeout = 1000)
//    public void testSizeOf_add1576() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOf_add1576");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOf(null);
//            org.apache.commons.io.FileUtils.sizeOf(null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.sizeOf(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3235,null,3234,org.apache.commons.io.FileUtils.sizeOf(file));
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3236,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3238,null,3237,org.apache.commons.io.FileUtils.sizeOf(testFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3239,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3241,null,3240,org.apache.commons.io.FileUtils.sizeOf(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#sizeOf(File)} method.
//     * @throws Exception
//     */
//@Test(timeout = 1000)
//    public void testSizeOf_add1577() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOf_add1577");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOf(null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.sizeOf(file);
//            org.apache.commons.io.FileUtils.sizeOf(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3235,null,3234,org.apache.commons.io.FileUtils.sizeOf(file));
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3236,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3238,null,3237,org.apache.commons.io.FileUtils.sizeOf(testFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3239,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3241,null,3240,org.apache.commons.io.FileUtils.sizeOf(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#sizeOf(File)} method.
//     * @throws Exception
//     */
//@Test(timeout = 1000)
//    public void testSizeOf_add1578() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOf_add1578");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOf(null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.sizeOf(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.createNewFile();
//        file.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3235,null,3234,org.apache.commons.io.FileUtils.sizeOf(file));
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3236,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3238,null,3237,org.apache.commons.io.FileUtils.sizeOf(testFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3239,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3241,null,3240,org.apache.commons.io.FileUtils.sizeOf(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#sizeOf(File)} method.
//     * @throws Exception
//     */
//@Test(timeout = 1000)
//    public void testSizeOf_add1579() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOf_add1579");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOf(null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.sizeOf(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        file.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3235,null,3234,org.apache.commons.io.FileUtils.sizeOf(file));
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3236,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3238,null,3237,org.apache.commons.io.FileUtils.sizeOf(testFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3239,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3241,null,3240,org.apache.commons.io.FileUtils.sizeOf(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#sizeOf(File)} method.
//     * @throws Exception
//     */
//@Test(timeout = 1000)
//    public void testSizeOf_add1580() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOf_add1580");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOf(null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.sizeOf(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3235,null,3234,org.apache.commons.io.FileUtils.sizeOf(file));
//        file.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3236,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3238,null,3237,org.apache.commons.io.FileUtils.sizeOf(testFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3239,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3241,null,3240,org.apache.commons.io.FileUtils.sizeOf(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#sizeOf(File)} method.
//     * @throws Exception
//     */
//@Test(timeout = 1000)
//    public void testSizeOf_remove1192() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOf_remove1192");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOf(null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.sizeOf(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3235,null,3234,org.apache.commons.io.FileUtils.sizeOf(file));
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3236,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3238,null,3237,org.apache.commons.io.FileUtils.sizeOf(testFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3239,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3241,null,3240,org.apache.commons.io.FileUtils.sizeOf(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#sizeOf(File)} method.
//     * @throws Exception
//     */
//@Test(timeout = 1000)
//    public void testSizeOf_remove1193() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOf_remove1193");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOf(null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.sizeOf(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3235,null,3234,org.apache.commons.io.FileUtils.sizeOf(file));
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3236,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3238,null,3237,org.apache.commons.io.FileUtils.sizeOf(testFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3239,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3241,null,3240,org.apache.commons.io.FileUtils.sizeOf(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#sizeOf(File)} method.
//     * @throws Exception
//     */
//@Test(timeout = 1000)
//    public void testSizeOf_remove1194() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOf_remove1194");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOf(null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.sizeOf(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3235,null,3234,org.apache.commons.io.FileUtils.sizeOf(file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3236,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3238,null,3237,org.apache.commons.io.FileUtils.sizeOf(testFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3239,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3241,null,3240,org.apache.commons.io.FileUtils.sizeOf(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#sizeOf(File)} method.
//     * @throws Exception
//     */
//@Test(timeout = 1000)
//    public void testSizeOfAsBigInteger() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfAsBigInteger");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(null);
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3215,java.math.BigInteger.ZERO);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3217,null,3216,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file));
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3219,null,3218,java.math.BigInteger.valueOf(testFile1Size));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3221,null,3220,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(testFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3222,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3224,null,3223,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#sizeOf(File)} method.
//     * @throws Exception
//     */
//@Test(timeout = 1000)
//    public void testSizeOfAsBigInteger_add1582() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfAsBigInteger_add1582");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file);
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3215,java.math.BigInteger.ZERO);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3217,null,3216,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file));
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3219,null,3218,java.math.BigInteger.valueOf(testFile1Size));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3221,null,3220,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(testFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3222,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3224,null,3223,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#sizeOf(File)} method.
//     * @throws Exception
//     */
//@Test(timeout = 1000)
//    public void testSizeOfAsBigInteger_add1583() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfAsBigInteger_add1583");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.createNewFile();
//        file.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3215,java.math.BigInteger.ZERO);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3217,null,3216,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file));
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3219,null,3218,java.math.BigInteger.valueOf(testFile1Size));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3221,null,3220,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(testFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3222,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3224,null,3223,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#sizeOf(File)} method.
//     * @throws Exception
//     */
//@Test(timeout = 1000)
//    public void testSizeOfAsBigInteger_add1584() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfAsBigInteger_add1584");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        file.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3215,java.math.BigInteger.ZERO);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3217,null,3216,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file));
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3219,null,3218,java.math.BigInteger.valueOf(testFile1Size));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3221,null,3220,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(testFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3222,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3224,null,3223,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#sizeOf(File)} method.
//     * @throws Exception
//     */
//@Test(timeout = 1000)
//    public void testSizeOfAsBigInteger_add1585() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfAsBigInteger_add1585");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3215,java.math.BigInteger.ZERO);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3217,null,3216,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file));
//        file.delete();
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3219,null,3218,java.math.BigInteger.valueOf(testFile1Size));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3221,null,3220,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(testFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3222,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3224,null,3223,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#sizeOf(File)} method.
//     * @throws Exception
//     */
//@Test(timeout = 1000)
//    public void testSizeOfAsBigInteger_remove1195() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfAsBigInteger_remove1195");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3215,java.math.BigInteger.ZERO);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3217,null,3216,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file));
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3219,null,3218,java.math.BigInteger.valueOf(testFile1Size));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3221,null,3220,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(testFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3222,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3224,null,3223,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#sizeOf(File)} method.
//     * @throws Exception
//     */
//@Test(timeout = 1000)
//    public void testSizeOfAsBigInteger_remove1196() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfAsBigInteger_remove1196");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3215,java.math.BigInteger.ZERO);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3217,null,3216,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file));
//        file.delete();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3219,null,3218,java.math.BigInteger.valueOf(testFile1Size));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3221,null,3220,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(testFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3222,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3224,null,3223,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Tests the {@link FileUtils#sizeOf(File)} method.
//     * @throws Exception
//     */
//@Test(timeout = 1000)
//    public void testSizeOfAsBigInteger_remove1197() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeOfAsBigInteger_remove1197");
//        File file = new File(FileBasedTestCase.getTestDirectory() , getName());
//        try {
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file);
//        } catch (IllegalArgumentException ex) {
//        }
//        file.createNewFile();
//        file.deleteOnExit();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3215,java.math.BigInteger.ZERO);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3217,null,3216,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3219,null,3218,java.math.BigInteger.valueOf(testFile1Size));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3221,null,3220,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(testFile1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3222,org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE_BI);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3224,null,3223,org.apache.commons.io.FileUtils.sizeOfAsBigInteger(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_add1480() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_add1480");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_add1481() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_add1481");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_add1482() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_add1482");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_add1483() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_add1483");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_add1484() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_add1484");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_add1485() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_add1485");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_add1486() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_add1486");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_add1487() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_add1487");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_add1488() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_add1488");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_add1489() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_add1489");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_add1490() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_add1490");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_add1491() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_add1491");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_add1492() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_add1492");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_add1493() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_add1493");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_add1494() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_add1494");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIsFileNewerOlder() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIsFileNewerOlder_literalMutation3334() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_literalMutation3334");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIsFileNewerOlder_literalMutation3335() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_literalMutation3335");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIsFileNewerOlder_literalMutation3336() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_literalMutation3336");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIsFileNewerOlder_literalMutation3337() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_literalMutation3337");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, -1);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIsFileNewerOlder_literalMutation3338() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_literalMutation3338");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1001);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIsFileNewerOlder_literalMutation3339() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_literalMutation3339");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 1);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIsFileNewerOlder_literalMutation3340() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_literalMutation3340");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1001);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIsFileNewerOlder_literalMutation3341() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_literalMutation3341");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 1);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_remove1133() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_remove1133");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_remove1134() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_remove1134");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIsFileNewerOlder_remove1135() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIsFileNewerOlder_remove1135");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-reference.txt");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-old.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-new.txt");
//        File invalidFile = new File(FileBasedTestCase.getTestDirectory() , "FileUtils-invalid-file.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3096,null,3095,org.apache.commons.io.FileUtils.isFileNewer(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3098,null,3097,org.apache.commons.io.FileUtils.isFileNewer(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3100,null,3099,org.apache.commons.io.FileUtils.isFileNewer(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3102,null,3101,org.apache.commons.io.FileUtils.isFileNewer(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3104,null,3103,org.apache.commons.io.FileUtils.isFileNewer(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3106,null,3105,org.apache.commons.io.FileUtils.isFileNewer(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3108,null,3107,org.apache.commons.io.FileUtils.isFileNewer(invalidFile, reference));
//        final String invalidFileName = invalidFile.getName();
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3109,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3111,message,3110,message.contains(invalidFileName));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3113,null,3112,org.apache.commons.io.FileUtils.isFileOlder(oldFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3115,null,3114,org.apache.commons.io.FileUtils.isFileOlder(oldFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3117,null,3116,org.apache.commons.io.FileUtils.isFileOlder(oldFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3119,null,3118,org.apache.commons.io.FileUtils.isFileOlder(newFile, reference));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3121,null,3120,org.apache.commons.io.FileUtils.isFileOlder(newFile, date));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3123,null,3122,org.apache.commons.io.FileUtils.isFileOlder(newFile, now));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3125,null,3124,org.apache.commons.io.FileUtils.isFileOlder(invalidFile, reference));
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(newFile, invalidFile);
//        } catch (IllegalArgumentException iae) {
//            final String message = iae.getMessage();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3126,((("Message should contain: " + invalidFileName) + " but was: ") + message));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3128,message,3127,message.contains(invalidFileName));
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileNewer(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(null, now);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((File)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, invalidFile);
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.isFileOlder(oldFile, ((Date)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFile1_add1436() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile1_add1436");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy1.txt");
//        org.apache.commons.io.FileUtils.copyFile(testFile1, destination);
//        org.apache.commons.io.FileUtils.copyFile(testFile1, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2956,destination,2955,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2957,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2959,destination,2958,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyFile1() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile1");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.copyFile(testFile1, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2956,destination,2955,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2957,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2959,destination,2958,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFile1_remove1103() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile1_remove1103");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy1.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2956,destination,2955,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2957,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2959,destination,2958,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFileToOutputStream() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFileToOutputStream");
//        ByteArrayOutputStream destination = new ByteArrayOutputStream();
//        org.apache.commons.io.FileUtils.copyFile(testFile1, destination);
//        org.apache.commons.io.FileUtils.copyFile(testFile1, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2975,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2977,destination,2976,destination.size());
//        byte[] expected = org.apache.commons.io.FileUtils.readFileToByteArray(testFile1);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2978,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2980,destination,2979,destination.toByteArray());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFileToOutputStream_remove1110() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFileToOutputStream_remove1110");
//        ByteArrayOutputStream destination = new ByteArrayOutputStream();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2975,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2977,destination,2976,destination.size());
//        byte[] expected = org.apache.commons.io.FileUtils.readFileToByteArray(testFile1);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2978,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2980,destination,2979,destination.toByteArray());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void IGNOREtestCopyFileLarge_add1347() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "IGNOREtestCopyFileLarge_add1347");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copylarge.txt");
//        System.out.println(("START:   " + (new Date())));
//        System.out.println(("START:   " + (new Date())));
//        createFile(largeFile, org.apache.commons.io.FileUtils.ONE_GB);
//        System.out.println(("CREATED: " + (new Date())));
//        org.apache.commons.io.FileUtils.copyFile(largeFile, destination);
//        System.out.println(("COPIED:  " + (new Date())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2702,destination,2701,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2704,largeFile,2703,largeFile.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2706,destination,2705,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void IGNOREtestCopyFileLarge_add1348() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "IGNOREtestCopyFileLarge_add1348");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copylarge.txt");
//        System.out.println(("START:   " + (new Date())));
//        createFile(largeFile, org.apache.commons.io.FileUtils.ONE_GB);
//        createFile(largeFile, org.apache.commons.io.FileUtils.ONE_GB);
//        System.out.println(("CREATED: " + (new Date())));
//        org.apache.commons.io.FileUtils.copyFile(largeFile, destination);
//        System.out.println(("COPIED:  " + (new Date())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2702,destination,2701,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2704,largeFile,2703,largeFile.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2706,destination,2705,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void IGNOREtestCopyFileLarge_add1349() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "IGNOREtestCopyFileLarge_add1349");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copylarge.txt");
//        System.out.println(("START:   " + (new Date())));
//        createFile(largeFile, org.apache.commons.io.FileUtils.ONE_GB);
//        System.out.println(("CREATED: " + (new Date())));
//        System.out.println(("CREATED: " + (new Date())));
//        org.apache.commons.io.FileUtils.copyFile(largeFile, destination);
//        System.out.println(("COPIED:  " + (new Date())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2702,destination,2701,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2704,largeFile,2703,largeFile.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2706,destination,2705,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void IGNOREtestCopyFileLarge_add1350() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "IGNOREtestCopyFileLarge_add1350");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copylarge.txt");
//        System.out.println(("START:   " + (new Date())));
//        createFile(largeFile, org.apache.commons.io.FileUtils.ONE_GB);
//        System.out.println(("CREATED: " + (new Date())));
//        org.apache.commons.io.FileUtils.copyFile(largeFile, destination);
//        org.apache.commons.io.FileUtils.copyFile(largeFile, destination);
//        System.out.println(("COPIED:  " + (new Date())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2702,destination,2701,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2704,largeFile,2703,largeFile.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2706,destination,2705,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void IGNOREtestCopyFileLarge_add1351() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "IGNOREtestCopyFileLarge_add1351");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copylarge.txt");
//        System.out.println(("START:   " + (new Date())));
//        createFile(largeFile, org.apache.commons.io.FileUtils.ONE_GB);
//        System.out.println(("CREATED: " + (new Date())));
//        org.apache.commons.io.FileUtils.copyFile(largeFile, destination);
//        System.out.println(("COPIED:  " + (new Date())));
//        System.out.println(("COPIED:  " + (new Date())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2702,destination,2701,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2704,largeFile,2703,largeFile.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2706,destination,2705,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void IGNOREtestCopyFileLarge() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "IGNOREtestCopyFileLarge");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copylarge.txt");
//        System.out.println(("START:   " + (new Date())));
//        createFile(largeFile, org.apache.commons.io.FileUtils.ONE_GB);
//        System.out.println(("CREATED: " + (new Date())));
//        org.apache.commons.io.FileUtils.copyFile(largeFile, destination);
//        System.out.println(("COPIED:  " + (new Date())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2702,destination,2701,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2704,largeFile,2703,largeFile.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2706,destination,2705,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void IGNOREtestCopyFileLarge_literalMutation3170() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "IGNOREtestCopyFileLarge_literalMutation3170");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        System.out.println(("START:   " + (new Date())));
//        createFile(largeFile, org.apache.commons.io.FileUtils.ONE_GB);
//        System.out.println(("CREATED: " + (new Date())));
//        org.apache.commons.io.FileUtils.copyFile(largeFile, destination);
//        System.out.println(("COPIED:  " + (new Date())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2702,destination,2701,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2704,largeFile,2703,largeFile.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2706,destination,2705,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void IGNOREtestCopyFileLarge_literalMutation3171() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "IGNOREtestCopyFileLarge_literalMutation3171");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copylarge.txt");
//        System.out.println(("foo" + (new Date())));
//        createFile(largeFile, org.apache.commons.io.FileUtils.ONE_GB);
//        System.out.println(("CREATED: " + (new Date())));
//        org.apache.commons.io.FileUtils.copyFile(largeFile, destination);
//        System.out.println(("COPIED:  " + (new Date())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2702,destination,2701,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2704,largeFile,2703,largeFile.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2706,destination,2705,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void IGNOREtestCopyFileLarge_literalMutation3172() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "IGNOREtestCopyFileLarge_literalMutation3172");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copylarge.txt");
//        System.out.println(("START:   " + (new Date())));
//        createFile(largeFile, org.apache.commons.io.FileUtils.ONE_GB);
//        System.out.println(("foo" + (new Date())));
//        org.apache.commons.io.FileUtils.copyFile(largeFile, destination);
//        System.out.println(("COPIED:  " + (new Date())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2702,destination,2701,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2704,largeFile,2703,largeFile.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2706,destination,2705,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void IGNOREtestCopyFileLarge_literalMutation3173() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "IGNOREtestCopyFileLarge_literalMutation3173");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copylarge.txt");
//        System.out.println(("START:   " + (new Date())));
//        createFile(largeFile, org.apache.commons.io.FileUtils.ONE_GB);
//        System.out.println(("CREATED: " + (new Date())));
//        org.apache.commons.io.FileUtils.copyFile(largeFile, destination);
//        System.out.println(("foo" + (new Date())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2702,destination,2701,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2704,largeFile,2703,largeFile.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2706,destination,2705,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void IGNOREtestCopyFileLarge_remove1026() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "IGNOREtestCopyFileLarge_remove1026");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copylarge.txt");
//        createFile(largeFile, org.apache.commons.io.FileUtils.ONE_GB);
//        System.out.println(("CREATED: " + (new Date())));
//        org.apache.commons.io.FileUtils.copyFile(largeFile, destination);
//        System.out.println(("COPIED:  " + (new Date())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2702,destination,2701,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2704,largeFile,2703,largeFile.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2706,destination,2705,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void IGNOREtestCopyFileLarge_remove1027() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "IGNOREtestCopyFileLarge_remove1027");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copylarge.txt");
//        System.out.println(("START:   " + (new Date())));
//        System.out.println(("CREATED: " + (new Date())));
//        org.apache.commons.io.FileUtils.copyFile(largeFile, destination);
//        System.out.println(("COPIED:  " + (new Date())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2702,destination,2701,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2704,largeFile,2703,largeFile.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2706,destination,2705,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void IGNOREtestCopyFileLarge_remove1028() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "IGNOREtestCopyFileLarge_remove1028");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copylarge.txt");
//        createFile(largeFile, org.apache.commons.io.FileUtils.ONE_GB);
//        System.out.println(("CREATED: " + (new Date())));
//        org.apache.commons.io.FileUtils.copyFile(largeFile, destination);
//        System.out.println(("COPIED:  " + (new Date())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2702,destination,2701,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2704,largeFile,2703,largeFile.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2706,destination,2705,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void IGNOREtestCopyFileLarge_remove1029() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "IGNOREtestCopyFileLarge_remove1029");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copylarge.txt");
//        System.out.println(("START:   " + (new Date())));
//        createFile(largeFile, org.apache.commons.io.FileUtils.ONE_GB);
//        System.out.println(("CREATED: " + (new Date())));
//        System.out.println(("COPIED:  " + (new Date())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2702,destination,2701,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2704,largeFile,2703,largeFile.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2706,destination,2705,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void IGNOREtestCopyFileLarge_remove1030() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "IGNOREtestCopyFileLarge_remove1030");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copylarge.txt");
//        createFile(largeFile, org.apache.commons.io.FileUtils.ONE_GB);
//        System.out.println(("CREATED: " + (new Date())));
//        org.apache.commons.io.FileUtils.copyFile(largeFile, destination);
//        System.out.println(("COPIED:  " + (new Date())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2702,destination,2701,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2704,largeFile,2703,largeFile.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2706,destination,2705,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFile2_add1440() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile2_add1440");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy2.txt");
//        org.apache.commons.io.FileUtils.copyFile(testFile1, destination);
//        org.apache.commons.io.FileUtils.copyFile(testFile1, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2971,destination,2970,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2972,testFile2Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2974,destination,2973,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyFile2() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile2");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.copyFile(testFile1, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2971,destination,2970,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2972,testFile2Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2974,destination,2973,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFile2_remove1106() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile2_remove1106");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy2.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2971,destination,2970,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2972,testFile2Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2974,destination,2973,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyToSelf_add1445() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyToSelf_add1445");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy3.txt");
//        org.apache.commons.io.FileUtils.copyFile(testFile1, destination);
//        org.apache.commons.io.FileUtils.copyFile(testFile1, destination);
//        try {
//            org.apache.commons.io.FileUtils.copyFile(destination, destination);
//        } catch (IOException ioe) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyToSelf_add1446() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyToSelf_add1446");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy3.txt");
//        org.apache.commons.io.FileUtils.copyFile(testFile1, destination);
//        try {
//            org.apache.commons.io.FileUtils.copyFile(destination, destination);
//            org.apache.commons.io.FileUtils.copyFile(destination, destination);
//        } catch (IOException ioe) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyToSelf() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyToSelf");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.copyFile(testFile1, destination);
//        try {
//            org.apache.commons.io.FileUtils.copyFile(destination, destination);
//        } catch (IOException ioe) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyToSelf_remove1111() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyToSelf_remove1111");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy3.txt");
//        try {
//            org.apache.commons.io.FileUtils.copyFile(destination, destination);
//        } catch (IOException ioe) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFile2WithoutFileDatePreservation_add1443() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile2WithoutFileDatePreservation_add1443");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy2.txt");
//        org.apache.commons.io.FileUtils.copyFile(testFile1, destination, false);
//        org.apache.commons.io.FileUtils.copyFile(testFile1, destination, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2966,destination,2965,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2967,testFile2Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2969,destination,2968,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyFile2WithoutFileDatePreservation() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile2WithoutFileDatePreservation");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.copyFile(testFile1, destination, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2966,destination,2965,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2967,testFile2Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2969,destination,2968,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyFile2WithoutFileDatePreservation_literalMutation3290() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile2WithoutFileDatePreservation_literalMutation3290");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy2.txt");
//        org.apache.commons.io.FileUtils.copyFile(testFile1, destination, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2966,destination,2965,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2967,testFile2Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2969,destination,2968,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFile2WithoutFileDatePreservation_remove1109() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile2WithoutFileDatePreservation_remove1109");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy2.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2966,destination,2965,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2967,testFile2Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2969,destination,2968,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToDirectory_NonExistingDest_add1411() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_add1411");
//        createFile(testFile1, 1234);
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToDirectory_NonExistingDest_add1412() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_add1412");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToDirectory_NonExistingDest_add1413() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_add1413");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToDirectory_NonExistingDest_add1414() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_add1414");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToDirectory_NonExistingDest_add1415() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_add1415");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToDirectory_NonExistingDest_add1416() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_add1416");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToDirectory_NonExistingDest_add1417() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_add1417");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToDirectory_NonExistingDest() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest");
//        createFile(testFile1, 1235);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToDirectory_NonExistingDest_literalMutation3256() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_literalMutation3256");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4320);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToDirectory_NonExistingDest_literalMutation3257() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_literalMutation3257");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "foo");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToDirectory_NonExistingDest_literalMutation3258() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_literalMutation3258");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToDirectory_NonExistingDest_literalMutation3259() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_literalMutation3259");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "foo", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToDirectory_NonExistingDest_literalMutation3260() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_literalMutation3260");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "foo");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToDirectory_NonExistingDest_literalMutation3261() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_literalMutation3261");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("foo") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToDirectory_NonExistingDest_literalMutation3262() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_literalMutation3262");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "foo");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToDirectory_NonExistingDest_remove1078() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_remove1078");
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToDirectory_NonExistingDest_remove1079() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_remove1079");
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToDirectory_NonExistingDest_remove1080() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_remove1080");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToDirectory_NonExistingDest_remove1081() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_remove1081");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToDirectory_NonExistingDest_remove1082() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_remove1082");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToDirectory_NonExistingDest_remove1083() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_remove1083");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        File actualDestDir = new File(destDir , srcDir.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToDirectory_NonExistingDest_remove1084() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToDirectory_NonExistingDest_remove1084");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        File actualDestDir = new File(destDir , srcDir.getName());
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2918,destDir,2917,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2920,actualDestDir,2919,actualDestDir.exists());
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2921,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2922,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2924,null,2923,org.apache.commons.io.FileUtils.sizeOfDirectory(actualDestDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2926,new java.io.File(actualDestDir , "sub/A.txt"),2925,new java.io.File(actualDestDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToNonExistingDest_add1429() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_add1429");
//        createFile(testFile1, 1234);
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToNonExistingDest_add1430() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_add1430");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToNonExistingDest_add1431() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_add1431");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToNonExistingDest_add1432() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_add1432");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToNonExistingDest_add1433() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_add1433");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToNonExistingDest_add1434() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_add1434");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToNonExistingDest_add1435() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_add1435");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToNonExistingDest() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest");
//        createFile(testFile1, 1235);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToNonExistingDest_literalMutation3278() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_literalMutation3278");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4322);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToNonExistingDest_literalMutation3279() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_literalMutation3279");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "foo");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToNonExistingDest_literalMutation3280() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_literalMutation3280");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToNonExistingDest_literalMutation3281() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_literalMutation3281");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "foo", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToNonExistingDest_literalMutation3282() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_literalMutation3282");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "foo");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToNonExistingDest_literalMutation3283() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_literalMutation3283");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("foo") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToNonExistingDest_literalMutation3284() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_literalMutation3284");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "foo");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToNonExistingDest_remove1096() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_remove1096");
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToNonExistingDest_remove1097() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_remove1097");
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToNonExistingDest_remove1098() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_remove1098");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToNonExistingDest_remove1099() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_remove1099");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToNonExistingDest_remove1100() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_remove1100");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToNonExistingDest_remove1101() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_remove1101");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToNonExistingDest_remove1102() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToNonExistingDest_remove1102");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2943,destDir,2942,destDir.exists());
//        long sizeOfSrcDirectory = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2944,(sizeOfSrcDirectory > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2945,sizeOfSrcDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2947,null,2946,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2949,new java.io.File(destDir , "sub/A.txt"),2948,new java.io.File(destDir , "sub/A.txt").exists());
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToExistingDest_add1418() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_add1418");
//        createFile(testFile1, 1234);
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToExistingDest_add1419() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_add1419");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToExistingDest_add1420() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_add1420");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToExistingDest_add1421() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_add1421");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToExistingDest_add1422() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_add1422");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToExistingDest_add1423() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_add1423");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToExistingDest_add1424() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_add1424");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToExistingDest() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest");
//        createFile(testFile1, 1233);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToExistingDest_literalMutation3264() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_literalMutation3264");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4322);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToExistingDest_literalMutation3265() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_literalMutation3265");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "foo");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToExistingDest_literalMutation3266() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_literalMutation3266");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToExistingDest_literalMutation3267() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_literalMutation3267");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "foo", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToExistingDest_literalMutation3268() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_literalMutation3268");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "foo");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToExistingDest_literalMutation3269() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_literalMutation3269");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("foo") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryToExistingDest_literalMutation3270() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_literalMutation3270");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "foo");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToExistingDest_remove1085() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_remove1085");
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToExistingDest_remove1086() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_remove1086");
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToExistingDest_remove1087() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_remove1087");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToExistingDest_remove1088() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_remove1088");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToExistingDest_remove1089() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_remove1089");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        destDir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToExistingDest_remove1090() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_remove1090");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryToExistingDest_remove1091() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToExistingDest_remove1091");
//        createFile(testFile1, 1234);
//        createFile(testFile2, 4321);
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "sub");
//        subDir.mkdir();
//        File subFile = new File(subDir , "A.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
//        File destDir = new File(System.getProperty("java.io.tmpdir") , "tmp-FileUtilsTestCase");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        destDir.mkdirs();
//        long srcSize = org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2927,(srcSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2928,srcSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2930,null,2929,org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2932,new java.io.File(destDir , "sub/A.txt"),2931,new java.io.File(destDir , "sub/A.txt").exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryFiltered_add1391() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryFiltered_add1391");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        NameFileFilter filter = new NameFileFilter(new String[]{ "parent" , "child" , "file3.txt" });
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "copydest");
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, destDir, filter);
//        List<java.io.File> files = LIST_WALKER.list(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2881,files,2880,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2883,files.get(0),2882,files.get(0).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2885,files.get(1),2884,files.get(1).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2887,files.get(2),2886,files.get(2).getName());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryFiltered_add1392() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryFiltered_add1392");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        NameFileFilter filter = new NameFileFilter(new String[]{ "parent" , "child" , "file3.txt" });
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "copydest");
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, destDir, filter);
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, destDir, filter);
//        List<java.io.File> files = LIST_WALKER.list(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2881,files,2880,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2883,files.get(0),2882,files.get(0).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2885,files.get(1),2884,files.get(1).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2887,files.get(2),2886,files.get(2).getName());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryFiltered() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryFiltered");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        NameFileFilter filter = new NameFileFilter(new String[]{ "parent" , "child" , "file3.txt" });
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "copydest");
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, destDir, filter);
//        List<java.io.File> files = LIST_WALKER.list(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2881,files,2880,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2883,files.get(0),2882,files.get(0).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2885,files.get(1),2884,files.get(1).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2887,files.get(2),2886,files.get(2).getName());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryFiltered_literalMutation3231() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryFiltered_literalMutation3231");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "foo");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        NameFileFilter filter = new NameFileFilter(new String[]{ "parent" , "child" , "file3.txt" });
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "copydest");
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, destDir, filter);
//        List<java.io.File> files = LIST_WALKER.list(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2881,files,2880,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2883,files.get(0),2882,files.get(0).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2885,files.get(1),2884,files.get(1).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2887,files.get(2),2886,files.get(2).getName());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryFiltered_literalMutation3232() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryFiltered_literalMutation3232");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "foo");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        NameFileFilter filter = new NameFileFilter(new String[]{ "parent" , "child" , "file3.txt" });
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "copydest");
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, destDir, filter);
//        List<java.io.File> files = LIST_WALKER.list(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2881,files,2880,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2883,files.get(0),2882,files.get(0).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2885,files.get(1),2884,files.get(1).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2887,files.get(2),2886,files.get(2).getName());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryFiltered_literalMutation3233() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryFiltered_literalMutation3233");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        NameFileFilter filter = new NameFileFilter(new String[]{ "foo" , "child" , "file3.txt" });
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "copydest");
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, destDir, filter);
//        List<java.io.File> files = LIST_WALKER.list(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2881,files,2880,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2883,files.get(0),2882,files.get(0).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2885,files.get(1),2884,files.get(1).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2887,files.get(2),2886,files.get(2).getName());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryFiltered_literalMutation3234() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryFiltered_literalMutation3234");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        NameFileFilter filter = new NameFileFilter(new String[]{ "parent" , "foo" , "file3.txt" });
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "copydest");
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, destDir, filter);
//        List<java.io.File> files = LIST_WALKER.list(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2881,files,2880,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2883,files.get(0),2882,files.get(0).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2885,files.get(1),2884,files.get(1).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2887,files.get(2),2886,files.get(2).getName());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryFiltered_literalMutation3235() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryFiltered_literalMutation3235");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        NameFileFilter filter = new NameFileFilter(new String[]{ "parent" , "child" , "foo" });
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "copydest");
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, destDir, filter);
//        List<java.io.File> files = LIST_WALKER.list(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2881,files,2880,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2883,files.get(0),2882,files.get(0).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2885,files.get(1),2884,files.get(1).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2887,files.get(2),2886,files.get(2).getName());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryFiltered_literalMutation3236() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryFiltered_literalMutation3236");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        NameFileFilter filter = new NameFileFilter(new String[]{ "parent" , "child" , "file3.txt" });
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, destDir, filter);
//        List<java.io.File> files = LIST_WALKER.list(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2881,files,2880,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2883,files.get(0),2882,files.get(0).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2885,files.get(1),2884,files.get(1).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2887,files.get(2),2886,files.get(2).getName());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryFiltered_remove1058() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryFiltered_remove1058");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        NameFileFilter filter = new NameFileFilter(new String[]{ "parent" , "child" , "file3.txt" });
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "copydest");
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, destDir, filter);
//        List<java.io.File> files = LIST_WALKER.list(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2881,files,2880,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2883,files.get(0),2882,files.get(0).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2885,files.get(1),2884,files.get(1).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2887,files.get(2),2886,files.get(2).getName());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryFiltered_remove1059() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryFiltered_remove1059");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        NameFileFilter filter = new NameFileFilter(new String[]{ "parent" , "child" , "file3.txt" });
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "copydest");
//        List<java.io.File> files = LIST_WALKER.list(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2881,files,2880,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2883,files.get(0),2882,files.get(0).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2885,files.get(1),2884,files.get(1).getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2887,files.get(2),2886,files.get(2).getName());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_add1393() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_add1393");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_add1394() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_add1394");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_add1395() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_add1395");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_add1396() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_add1396");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_add1397() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_add1397");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_add1398() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_add1398");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_add1399() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_add1399");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_add1400() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_add1400");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_add1401() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_add1401");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_add1402() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_add1402");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_add1403() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_add1403");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_add1404() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_add1404");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_add1405() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_add1405");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_add1406() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_add1406");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_add1407() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_add1407");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_add1408() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_add1408");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryPreserveDates() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryPreserveDates_literalMutation3238() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_literalMutation3238");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "foo");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryPreserveDates_literalMutation3239() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_literalMutation3239");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "foo");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryPreserveDates_literalMutation3240() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_literalMutation3240");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "foo", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryPreserveDates_literalMutation3241() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_literalMutation3241");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "foo");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryPreserveDates_literalMutation3242() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_literalMutation3242");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002001L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryPreserveDates_literalMutation3243() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_literalMutation3243");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001001L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryPreserveDates_literalMutation3244() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_literalMutation3244");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(999999999999L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryPreserveDates_literalMutation3245() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_literalMutation3245");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryPreserveDates_literalMutation3246() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_literalMutation3246");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "foo");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryPreserveDates_literalMutation3247() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_literalMutation3247");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "foo");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryPreserveDates_literalMutation3248() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_literalMutation3248");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryPreserveDates_literalMutation3249() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_literalMutation3249");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryPreserveDates_literalMutation3250() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_literalMutation3250");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryPreserveDates_literalMutation3251() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_literalMutation3251");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_remove1060() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_remove1060");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_remove1061() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_remove1061");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_remove1062() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_remove1062");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_remove1063() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_remove1063");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_remove1064() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_remove1064");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_remove1065() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_remove1065");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_remove1066() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_remove1066");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_remove1067() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_remove1067");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_remove1068() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_remove1068");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_remove1069() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_remove1069");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_remove1070() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_remove1070");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_remove1071() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_remove1071");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_remove1072() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_remove1072");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_remove1073() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_remove1073");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_remove1074() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_remove1074");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryPreserveDates_remove1075() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryPreserveDates_remove1075");
//        File source = new File(FileBasedTestCase.getTestDirectory() , "source");
//        File sourceDirectory = new File(source , "directory");
//        File sourceFile = new File(sourceDirectory , "hello.txt");
//        source.mkdirs();
//        sourceDirectory.mkdir();
//        org.apache.commons.io.FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
//        sourceFile.setLastModified(1000000002000L);
//        sourceDirectory.setLastModified(1000000001000L);
//        source.setLastModified(1000000000000L);
//        File target = new File(FileBasedTestCase.getTestDirectory() , "target");
//        File targetDirectory = new File(target , "directory");
//        File targetFile = new File(targetDirectory , "hello.txt");
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2888,(1000000000000L != (target.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2889,(1000000001000L != (targetDirectory.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2890,(1000000002000L != (targetFile.lastModified())));
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2892,target,2891,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2894,targetDirectory,2893,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2896,targetFile,2895,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        target.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2898,target,2897,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2900,targetDirectory,2899,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2902,targetFile,2901,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        targetDirectory.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectory(source, target, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2904,target,2903,target.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2906,targetDirectory,2905,targetDirectory.lastModified());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2908,targetFile,2907,targetFile.lastModified());
//        org.apache.commons.io.FileUtils.deleteDirectory(target);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-141
//     */
//@Test(timeout = 1000)
//    public void testCopyDirectoryToChild_add1409() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToChild_add1409");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        long expectedCount = (LIST_WALKER.list(grandParentDir).size()) + (LIST_WALKER.list(parentDir).size());
//        long expectedSize = (org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir)) + (org.apache.commons.io.FileUtils.sizeOfDirectory(parentDir));
//        org.apache.commons.io.FileUtils.copyDirectory(parentDir, childDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2909,expectedCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2911,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir),2910,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir).size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2912,expectedSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2914,null,2913,org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2915,(expectedCount > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2916,(expectedSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-141
//     */
//@Test(timeout = 1000)
//    public void testCopyDirectoryToChild_add1410() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToChild_add1410");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        long expectedCount = (LIST_WALKER.list(grandParentDir).size()) + (LIST_WALKER.list(parentDir).size());
//        long expectedSize = (org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir)) + (org.apache.commons.io.FileUtils.sizeOfDirectory(parentDir));
//        org.apache.commons.io.FileUtils.copyDirectory(parentDir, childDir);
//        org.apache.commons.io.FileUtils.copyDirectory(parentDir, childDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2909,expectedCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2911,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir),2910,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir).size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2912,expectedSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2914,null,2913,org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2915,(expectedCount > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2916,(expectedSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-141
//     */
//public void testCopyDirectoryToChild() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToChild");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        long expectedCount = (LIST_WALKER.list(grandParentDir).size()) + (LIST_WALKER.list(parentDir).size());
//        long expectedSize = (org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir)) + (org.apache.commons.io.FileUtils.sizeOfDirectory(parentDir));
//        org.apache.commons.io.FileUtils.copyDirectory(parentDir, childDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2909,expectedCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2911,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir),2910,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir).size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2912,expectedSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2914,null,2913,org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2915,(expectedCount > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2916,(expectedSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-141
//     */
//public void testCopyDirectoryToChild_literalMutation3253() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToChild_literalMutation3253");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "foo");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        long expectedCount = (LIST_WALKER.list(grandParentDir).size()) + (LIST_WALKER.list(parentDir).size());
//        long expectedSize = (org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir)) + (org.apache.commons.io.FileUtils.sizeOfDirectory(parentDir));
//        org.apache.commons.io.FileUtils.copyDirectory(parentDir, childDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2909,expectedCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2911,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir),2910,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir).size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2912,expectedSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2914,null,2913,org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2915,(expectedCount > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2916,(expectedSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-141
//     */
//public void testCopyDirectoryToChild_literalMutation3254() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToChild_literalMutation3254");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "foo");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        long expectedCount = (LIST_WALKER.list(grandParentDir).size()) + (LIST_WALKER.list(parentDir).size());
//        long expectedSize = (org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir)) + (org.apache.commons.io.FileUtils.sizeOfDirectory(parentDir));
//        org.apache.commons.io.FileUtils.copyDirectory(parentDir, childDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2909,expectedCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2911,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir),2910,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir).size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2912,expectedSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2914,null,2913,org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2915,(expectedCount > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2916,(expectedSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-141
//     */
//@Test(timeout = 1000)
//    public void testCopyDirectoryToChild_remove1076() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToChild_remove1076");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        long expectedCount = (LIST_WALKER.list(grandParentDir).size()) + (LIST_WALKER.list(parentDir).size());
//        long expectedSize = (org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir)) + (org.apache.commons.io.FileUtils.sizeOfDirectory(parentDir));
//        org.apache.commons.io.FileUtils.copyDirectory(parentDir, childDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2909,expectedCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2911,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir),2910,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir).size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2912,expectedSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2914,null,2913,org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2915,(expectedCount > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2916,(expectedSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-141
//     */
//@Test(timeout = 1000)
//    public void testCopyDirectoryToChild_remove1077() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToChild_remove1077");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        long expectedCount = (LIST_WALKER.list(grandParentDir).size()) + (LIST_WALKER.list(parentDir).size());
//        long expectedSize = (org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir)) + (org.apache.commons.io.FileUtils.sizeOfDirectory(parentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2909,expectedCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2911,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir),2910,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir).size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2912,expectedSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2914,null,2913,org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2915,(expectedCount > 0));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2916,(expectedSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-141
//     */
//@Test(timeout = 1000)
//    public void testCopyDirectoryToGrandChild_add1425() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToGrandChild_add1425");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        long expectedCount = (LIST_WALKER.list(grandParentDir).size()) * 2;
//        long expectedSize = (org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir)) * 2;
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, childDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2933,expectedCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2935,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir),2934,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir).size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2936,expectedSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2938,null,2937,org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2939,(expectedSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-141
//     */
//@Test(timeout = 1000)
//    public void testCopyDirectoryToGrandChild_add1426() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToGrandChild_add1426");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        long expectedCount = (LIST_WALKER.list(grandParentDir).size()) * 2;
//        long expectedSize = (org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir)) * 2;
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, childDir);
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, childDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2933,expectedCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2935,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir),2934,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir).size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2936,expectedSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2938,null,2937,org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2939,(expectedSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-141
//     */
//public void testCopyDirectoryToGrandChild() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToGrandChild");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        long expectedCount = (LIST_WALKER.list(grandParentDir).size()) * 2;
//        long expectedSize = (org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir)) * 2;
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, childDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2933,expectedCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2935,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir),2934,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir).size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2936,expectedSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2938,null,2937,org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2939,(expectedSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-141
//     */
//public void testCopyDirectoryToGrandChild_literalMutation3272() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToGrandChild_literalMutation3272");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "foo");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        long expectedCount = (LIST_WALKER.list(grandParentDir).size()) * 2;
//        long expectedSize = (org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir)) * 2;
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, childDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2933,expectedCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2935,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir),2934,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir).size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2936,expectedSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2938,null,2937,org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2939,(expectedSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-141
//     */
//public void testCopyDirectoryToGrandChild_literalMutation3273() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToGrandChild_literalMutation3273");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "foo");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        long expectedCount = (LIST_WALKER.list(grandParentDir).size()) * 2;
//        long expectedSize = (org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir)) * 2;
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, childDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2933,expectedCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2935,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir),2934,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir).size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2936,expectedSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2938,null,2937,org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2939,(expectedSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-141
//     */
//public void testCopyDirectoryToGrandChild_literalMutation3274() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToGrandChild_literalMutation3274");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        long expectedCount = (LIST_WALKER.list(grandParentDir).size()) * 3;
//        long expectedSize = (org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir)) * 2;
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, childDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2933,expectedCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2935,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir),2934,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir).size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2936,expectedSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2938,null,2937,org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2939,(expectedSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-141
//     */
//public void testCopyDirectoryToGrandChild_literalMutation3275() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToGrandChild_literalMutation3275");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        long expectedCount = (LIST_WALKER.list(grandParentDir).size()) * 2;
//        long expectedSize = (org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir)) * 3;
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, childDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2933,expectedCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2935,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir),2934,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir).size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2936,expectedSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2938,null,2937,org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2939,(expectedSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-141
//     */
//@Test(timeout = 1000)
//    public void testCopyDirectoryToGrandChild_remove1092() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToGrandChild_remove1092");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        long expectedCount = (LIST_WALKER.list(grandParentDir).size()) * 2;
//        long expectedSize = (org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir)) * 2;
//        org.apache.commons.io.FileUtils.copyDirectory(grandParentDir, childDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2933,expectedCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2935,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir),2934,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir).size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2936,expectedSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2938,null,2937,org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2939,(expectedSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-141
//     */
//@Test(timeout = 1000)
//    public void testCopyDirectoryToGrandChild_remove1093() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToGrandChild_remove1093");
//        File grandParentDir = new File(FileBasedTestCase.getTestDirectory() , "grandparent");
//        File parentDir = new File(grandParentDir , "parent");
//        File childDir = new File(parentDir , "child");
//        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
//        long expectedCount = (LIST_WALKER.list(grandParentDir).size()) * 2;
//        long expectedSize = (org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir)) * 2;
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2933,expectedCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2935,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir),2934,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(grandParentDir).size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2936,expectedSize);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2938,null,2937,org.apache.commons.io.FileUtils.sizeOfDirectory(grandParentDir));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2939,(expectedSize > 0));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-217 FileUtils.copyDirectoryToDirectory makes infinite loops
//     */
//@Test(timeout = 1000)
//    public void testCopyDirectoryToItself_add1427() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToItself_add1427");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "itself");
//        dir.mkdirs();
//        dir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(dir, dir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2941,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(dir),2940,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(dir).size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-217 FileUtils.copyDirectoryToDirectory makes infinite loops
//     */
//@Test(timeout = 1000)
//    public void testCopyDirectoryToItself_add1428() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToItself_add1428");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "itself");
//        dir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(dir, dir);
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(dir, dir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2941,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(dir),2940,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(dir).size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-217 FileUtils.copyDirectoryToDirectory makes infinite loops
//     */
//public void testCopyDirectoryToItself() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToItself");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        dir.mkdirs();
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(dir, dir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2941,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(dir),2940,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(dir).size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-217 FileUtils.copyDirectoryToDirectory makes infinite loops
//     */
//@Test(timeout = 1000)
//    public void testCopyDirectoryToItself_remove1094() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToItself_remove1094");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "itself");
//        org.apache.commons.io.FileUtils.copyDirectoryToDirectory(dir, dir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2941,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(dir),2940,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(dir).size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test for IO-217 FileUtils.copyDirectoryToDirectory makes infinite loops
//     */
//@Test(timeout = 1000)
//    public void testCopyDirectoryToItself_remove1095() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryToItself_remove1095");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "itself");
//        dir.mkdirs();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2941,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(dir),2940,org.apache.commons.io.FileUtilsTestCase.LIST_WALKER.list(dir).size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    private void createFilesForTestCopyDirectory(File grandParentDir, File parentDir, File childDir) throws Exception {
//        File childDir2 = new File(parentDir , "child2");
//        File grandChildDir = new File(childDir , "grandChild");
//        File grandChild2Dir = new File(childDir2 , "grandChild2");
//        File file1 = new File(grandParentDir , "file1.txt");
//        File file2 = new File(parentDir , "file2.txt");
//        File file3 = new File(childDir , "file3.txt");
//        File file4 = new File(childDir2 , "file4.txt");
//        File file5 = new File(grandChildDir , "file5.txt");
//        File file6 = new File(grandChild2Dir , "file6.txt");
//        org.apache.commons.io.FileUtils.deleteDirectory(grandParentDir);
//        grandChildDir.mkdirs();
//        grandChild2Dir.mkdirs();
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, "File 1 in grandparent", "UTF8");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, "File 2 in parent", "UTF8");
//        org.apache.commons.io.FileUtils.writeStringToFile(file3, "File 3 in child", "UTF8");
//        org.apache.commons.io.FileUtils.writeStringToFile(file4, "File 4 in child2", "UTF8");
//        org.apache.commons.io.FileUtils.writeStringToFile(file5, "File 5 in grandChild", "UTF8");
//        org.apache.commons.io.FileUtils.writeStringToFile(file6, "File 6 in grandChild2", "UTF8");
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryErrors_add1384() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryErrors_add1384");
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, null);
//            org.apache.commons.io.FileUtils.copyDirectory(null, null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("a"), null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, new File("a"));
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("doesnt-exist"), new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(testFile1, new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), testFile1);
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryErrors_add1385() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryErrors_add1385");
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("a"), null);
//            org.apache.commons.io.FileUtils.copyDirectory(new File("a"), null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, new File("a"));
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("doesnt-exist"), new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(testFile1, new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), testFile1);
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryErrors_add1386() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryErrors_add1386");
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("a"), null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, new File("a"));
//            org.apache.commons.io.FileUtils.copyDirectory(null, new File("a"));
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("doesnt-exist"), new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(testFile1, new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), testFile1);
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryErrors_add1387() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryErrors_add1387");
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("a"), null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, new File("a"));
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("doesnt-exist"), new File("a"));
//            org.apache.commons.io.FileUtils.copyDirectory(new File("doesnt-exist"), new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(testFile1, new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), testFile1);
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryErrors_add1388() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryErrors_add1388");
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("a"), null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, new File("a"));
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("doesnt-exist"), new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(testFile1, new File("a"));
//            org.apache.commons.io.FileUtils.copyDirectory(testFile1, new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), testFile1);
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryErrors_add1389() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryErrors_add1389");
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("a"), null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, new File("a"));
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("doesnt-exist"), new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(testFile1, new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), testFile1);
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), testFile1);
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyDirectoryErrors_add1390() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryErrors_add1390");
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("a"), null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, new File("a"));
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("doesnt-exist"), new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(testFile1, new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), testFile1);
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryErrors() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryErrors");
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("foo"), null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, new File("a"));
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("doesnt-exist"), new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(testFile1, new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), testFile1);
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryErrors_literalMutation3226() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryErrors_literalMutation3226");
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("a"), null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, new File("foo"));
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("doesnt-exist"), new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(testFile1, new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), testFile1);
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryErrors_literalMutation3227() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryErrors_literalMutation3227");
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("a"), null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, new File("a"));
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("foo"), new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(testFile1, new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), testFile1);
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryErrors_literalMutation3228() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryErrors_literalMutation3228");
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("a"), null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, new File("a"));
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("doesnt-exist"), new File("foo"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(testFile1, new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), testFile1);
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyDirectoryErrors_literalMutation3229() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyDirectoryErrors_literalMutation3229");
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("a"), null);
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(null, new File("a"));
//        } catch (NullPointerException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(new File("doesnt-exist"), new File("a"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(testFile1, new File("foo"));
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), testFile1);
//        } catch (IOException ex) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.copyDirectory(FileBasedTestCase.getTestDirectory(), FileBasedTestCase.getTestDirectory());
//        } catch (IOException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceDeleteAFile1_add1463() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceDeleteAFile1_add1463");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy1.txt");
//        destination.createNewFile();
//        destination.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3040,destination,3039,destination.exists());
//        org.apache.commons.io.FileUtils.forceDelete(destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3041,!(destination.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceDeleteAFile1_add1464() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceDeleteAFile1_add1464");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy1.txt");
//        destination.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3040,destination,3039,destination.exists());
//        org.apache.commons.io.FileUtils.forceDelete(destination);
//        org.apache.commons.io.FileUtils.forceDelete(destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3041,!(destination.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testForceDeleteAFile1() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceDeleteAFile1");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        destination.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3040,destination,3039,destination.exists());
//        org.apache.commons.io.FileUtils.forceDelete(destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3041,!(destination.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceDeleteAFile1_remove1122() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceDeleteAFile1_remove1122");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy1.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3040,destination,3039,destination.exists());
//        org.apache.commons.io.FileUtils.forceDelete(destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3041,!(destination.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceDeleteAFile1_remove1123() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceDeleteAFile1_remove1123");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy1.txt");
//        destination.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3040,destination,3039,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3041,!(destination.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceDeleteAFile2_add1465() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceDeleteAFile2_add1465");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy2.txt");
//        destination.createNewFile();
//        destination.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3043,destination,3042,destination.exists());
//        org.apache.commons.io.FileUtils.forceDelete(destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3044,!(destination.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceDeleteAFile2_add1466() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceDeleteAFile2_add1466");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy2.txt");
//        destination.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3043,destination,3042,destination.exists());
//        org.apache.commons.io.FileUtils.forceDelete(destination);
//        org.apache.commons.io.FileUtils.forceDelete(destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3044,!(destination.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testForceDeleteAFile2() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceDeleteAFile2");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        destination.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3043,destination,3042,destination.exists());
//        org.apache.commons.io.FileUtils.forceDelete(destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3044,!(destination.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceDeleteAFile2_remove1124() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceDeleteAFile2_remove1124");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy2.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3043,destination,3042,destination.exists());
//        org.apache.commons.io.FileUtils.forceDelete(destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3044,!(destination.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceDeleteAFile2_remove1125() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceDeleteAFile2_remove1125");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "copy2.txt");
//        destination.createNewFile();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3043,destination,3042,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3044,!(destination.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceDeleteAFile3_add1467() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceDeleteAFile3_add1467");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "no_such_file");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3045,!(destination.exists()));
//        try {
//            org.apache.commons.io.FileUtils.forceDelete(destination);
//            org.apache.commons.io.FileUtils.forceDelete(destination);
//        } catch (FileNotFoundException ignored) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testForceDeleteAFile3() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceDeleteAFile3");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3045,!(destination.exists()));
//        try {
//            org.apache.commons.io.FileUtils.forceDelete(destination);
//        } catch (FileNotFoundException ignored) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFile1ToDir_add1437() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile1ToDir_add1437");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "subdir");
//        if (!(directory.exists())) {
//            directory.mkdirs();
//            directory.mkdirs();
//        } 
//        File destination = new File(directory , testFile1.getName());
//        org.apache.commons.io.FileUtils.copyFileToDirectory(testFile1, directory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2951,destination,2950,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2952,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2954,destination,2953,destination.length());
//        try {
//            org.apache.commons.io.FileUtils.copyFileToDirectory(destination, directory);
//        } catch (IOException ioe) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFile1ToDir_add1438() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile1ToDir_add1438");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "subdir");
//        if (!(directory.exists())) {
//            directory.mkdirs();
//        } 
//        File destination = new File(directory , testFile1.getName());
//        org.apache.commons.io.FileUtils.copyFileToDirectory(testFile1, directory);
//        org.apache.commons.io.FileUtils.copyFileToDirectory(testFile1, directory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2951,destination,2950,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2952,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2954,destination,2953,destination.length());
//        try {
//            org.apache.commons.io.FileUtils.copyFileToDirectory(destination, directory);
//        } catch (IOException ioe) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFile1ToDir_add1439() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile1ToDir_add1439");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "subdir");
//        if (!(directory.exists())) {
//            directory.mkdirs();
//        } 
//        File destination = new File(directory , testFile1.getName());
//        org.apache.commons.io.FileUtils.copyFileToDirectory(testFile1, directory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2951,destination,2950,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2952,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2954,destination,2953,destination.length());
//        try {
//            org.apache.commons.io.FileUtils.copyFileToDirectory(destination, directory);
//            org.apache.commons.io.FileUtils.copyFileToDirectory(destination, directory);
//        } catch (IOException ioe) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyFile1ToDir() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile1ToDir");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        if (!(directory.exists())) {
//            directory.mkdirs();
//        } 
//        File destination = new File(directory , testFile1.getName());
//        org.apache.commons.io.FileUtils.copyFileToDirectory(testFile1, directory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2951,destination,2950,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2952,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2954,destination,2953,destination.length());
//        try {
//            org.apache.commons.io.FileUtils.copyFileToDirectory(destination, directory);
//        } catch (IOException ioe) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFile1ToDir_remove1104() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile1ToDir_remove1104");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "subdir");
//        if (!(directory.exists())) {
//        } 
//        File destination = new File(directory , testFile1.getName());
//        org.apache.commons.io.FileUtils.copyFileToDirectory(testFile1, directory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2951,destination,2950,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2952,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2954,destination,2953,destination.length());
//        try {
//            org.apache.commons.io.FileUtils.copyFileToDirectory(destination, directory);
//        } catch (IOException ioe) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFile1ToDir_remove1105() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile1ToDir_remove1105");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "subdir");
//        if (!(directory.exists())) {
//            directory.mkdirs();
//        } 
//        File destination = new File(directory , testFile1.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2951,destination,2950,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2952,testFile1Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2954,destination,2953,destination.length());
//        try {
//            org.apache.commons.io.FileUtils.copyFileToDirectory(destination, directory);
//        } catch (IOException ioe) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFile2ToDir_add1441() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile2ToDir_add1441");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "subdir");
//        if (!(directory.exists())) {
//            directory.mkdirs();
//            directory.mkdirs();
//        } 
//        File destination = new File(directory , testFile1.getName());
//        org.apache.commons.io.FileUtils.copyFileToDirectory(testFile1, directory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2961,destination,2960,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2962,testFile2Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2964,destination,2963,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFile2ToDir_add1442() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile2ToDir_add1442");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "subdir");
//        if (!(directory.exists())) {
//            directory.mkdirs();
//        } 
//        File destination = new File(directory , testFile1.getName());
//        org.apache.commons.io.FileUtils.copyFileToDirectory(testFile1, directory);
//        org.apache.commons.io.FileUtils.copyFileToDirectory(testFile1, directory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2961,destination,2960,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2962,testFile2Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2964,destination,2963,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCopyFile2ToDir() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile2ToDir");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        if (!(directory.exists())) {
//            directory.mkdirs();
//        } 
//        File destination = new File(directory , testFile1.getName());
//        org.apache.commons.io.FileUtils.copyFileToDirectory(testFile1, directory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2961,destination,2960,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2962,testFile2Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2964,destination,2963,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFile2ToDir_remove1107() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile2ToDir_remove1107");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "subdir");
//        if (!(directory.exists())) {
//        } 
//        File destination = new File(directory , testFile1.getName());
//        org.apache.commons.io.FileUtils.copyFileToDirectory(testFile1, directory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2961,destination,2960,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2962,testFile2Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2964,destination,2963,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCopyFile2ToDir_remove1108() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCopyFile2ToDir_remove1108");
//        File directory = new File(FileBasedTestCase.getTestDirectory() , "subdir");
//        if (!(directory.exists())) {
//            directory.mkdirs();
//        } 
//        File destination = new File(directory , testFile1.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2961,destination,2960,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2962,testFile2Size);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2964,destination,2963,destination.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceDeleteDir() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceDeleteDir");
//        File testDirectory = FileBasedTestCase.getTestDirectory();
//        org.apache.commons.io.FileUtils.forceDelete(testDirectory.getParentFile());
//        org.apache.commons.io.FileUtils.forceDelete(testDirectory.getParentFile());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3046,!(testDirectory.getParentFile().exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testForceDeleteDir_remove1126() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testForceDeleteDir_remove1126");
//        File testDirectory = FileBasedTestCase.getTestDirectory();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3046,!(testDirectory.getParentFile().exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test the FileUtils implementation.
//     */
//@Test(timeout = 1000)
//    public void testFileUtils_add1460() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileUtils_add1460");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        String filename = file1.getAbsolutePath();
//        OutputStream out = new FileOutputStream(file1);
//        try {
//            out.write("This is a test".getBytes("UTF-8"));
//            out.write("This is a test".getBytes("UTF-8"));
//        } finally {
//            out.close();
//        }
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, filename, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3032,file2,3031,file2.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3033,((file2.length()) > 0));
//        String file2contents = org.apache.commons.io.FileUtils.readFileToString(file2, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3035,filename,3034,filename.equals(file2contents));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3037,file2,3036,file2.delete());
//        String contents = org.apache.commons.io.FileUtils.readFileToString(new File(filename), "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3038,contents);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test the FileUtils implementation.
//     */
//@Test(timeout = 1000)
//    public void testFileUtils_add1461() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileUtils_add1461");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        String filename = file1.getAbsolutePath();
//        OutputStream out = new FileOutputStream(file1);
//        try {
//            out.write("This is a test".getBytes("UTF-8"));
//        } finally {
//            out.close();
//            out.close();
//        }
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, filename, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3032,file2,3031,file2.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3033,((file2.length()) > 0));
//        String file2contents = org.apache.commons.io.FileUtils.readFileToString(file2, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3035,filename,3034,filename.equals(file2contents));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3037,file2,3036,file2.delete());
//        String contents = org.apache.commons.io.FileUtils.readFileToString(new File(filename), "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3038,contents);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test the FileUtils implementation.
//     */
//@Test(timeout = 1000)
//    public void testFileUtils_add1462() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileUtils_add1462");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        String filename = file1.getAbsolutePath();
//        OutputStream out = new FileOutputStream(file1);
//        try {
//            out.write("This is a test".getBytes("UTF-8"));
//        } finally {
//            out.close();
//        }
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, filename, "UTF-8");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, filename, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3032,file2,3031,file2.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3033,((file2.length()) > 0));
//        String file2contents = org.apache.commons.io.FileUtils.readFileToString(file2, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3035,filename,3034,filename.equals(file2contents));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3037,file2,3036,file2.delete());
//        String contents = org.apache.commons.io.FileUtils.readFileToString(new File(filename), "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3038,contents);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test the FileUtils implementation.
//     */
//public void testFileUtils() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileUtils");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        String filename = file1.getAbsolutePath();
//        OutputStream out = new FileOutputStream(file1);
//        try {
//            out.write("This is a test".getBytes("UTF-8"));
//        } finally {
//            out.close();
//        }
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, filename, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3032,file2,3031,file2.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3033,((file2.length()) > 0));
//        String file2contents = org.apache.commons.io.FileUtils.readFileToString(file2, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3035,filename,3034,filename.equals(file2contents));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3037,file2,3036,file2.delete());
//        String contents = org.apache.commons.io.FileUtils.readFileToString(new File(filename), "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3038,contents);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test the FileUtils implementation.
//     */
//public void testFileUtils_literalMutation3305() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileUtils_literalMutation3305");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        String filename = file1.getAbsolutePath();
//        OutputStream out = new FileOutputStream(file1);
//        try {
//            out.write("foo".getBytes("UTF-8"));
//        } finally {
//            out.close();
//        }
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, filename, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3032,file2,3031,file2.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3033,((file2.length()) > 0));
//        String file2contents = org.apache.commons.io.FileUtils.readFileToString(file2, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3035,filename,3034,filename.equals(file2contents));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3037,file2,3036,file2.delete());
//        String contents = org.apache.commons.io.FileUtils.readFileToString(new File(filename), "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3038,contents);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test the FileUtils implementation.
//     */
//public void testFileUtils_literalMutation3306() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileUtils_literalMutation3306");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        String filename = file1.getAbsolutePath();
//        OutputStream out = new FileOutputStream(file1);
//        try {
//            out.write("This is a test".getBytes("foo"));
//        } finally {
//            out.close();
//        }
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, filename, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3032,file2,3031,file2.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3033,((file2.length()) > 0));
//        String file2contents = org.apache.commons.io.FileUtils.readFileToString(file2, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3035,filename,3034,filename.equals(file2contents));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3037,file2,3036,file2.delete());
//        String contents = org.apache.commons.io.FileUtils.readFileToString(new File(filename), "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3038,contents);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test the FileUtils implementation.
//     */
//public void testFileUtils_literalMutation3307() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileUtils_literalMutation3307");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        String filename = file1.getAbsolutePath();
//        OutputStream out = new FileOutputStream(file1);
//        try {
//            out.write("This is a test".getBytes("UTF-8"));
//        } finally {
//            out.close();
//        }
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, filename, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3032,file2,3031,file2.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3033,((file2.length()) > 0));
//        String file2contents = org.apache.commons.io.FileUtils.readFileToString(file2, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3035,filename,3034,filename.equals(file2contents));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3037,file2,3036,file2.delete());
//        String contents = org.apache.commons.io.FileUtils.readFileToString(new File(filename), "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3038,contents);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test the FileUtils implementation.
//     */
//public void testFileUtils_literalMutation3308() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileUtils_literalMutation3308");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        String filename = file1.getAbsolutePath();
//        OutputStream out = new FileOutputStream(file1);
//        try {
//            out.write("This is a test".getBytes("UTF-8"));
//        } finally {
//            out.close();
//        }
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, filename, "foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3032,file2,3031,file2.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3033,((file2.length()) > 0));
//        String file2contents = org.apache.commons.io.FileUtils.readFileToString(file2, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3035,filename,3034,filename.equals(file2contents));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3037,file2,3036,file2.delete());
//        String contents = org.apache.commons.io.FileUtils.readFileToString(new File(filename), "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3038,contents);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test the FileUtils implementation.
//     */
//public void testFileUtils_literalMutation3309() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileUtils_literalMutation3309");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        String filename = file1.getAbsolutePath();
//        OutputStream out = new FileOutputStream(file1);
//        try {
//            out.write("This is a test".getBytes("UTF-8"));
//        } finally {
//            out.close();
//        }
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, filename, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3032,file2,3031,file2.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3033,((file2.length()) > 0));
//        String file2contents = org.apache.commons.io.FileUtils.readFileToString(file2, "foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3035,filename,3034,filename.equals(file2contents));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3037,file2,3036,file2.delete());
//        String contents = org.apache.commons.io.FileUtils.readFileToString(new File(filename), "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3038,contents);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test the FileUtils implementation.
//     */
//public void testFileUtils_literalMutation3310() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileUtils_literalMutation3310");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        String filename = file1.getAbsolutePath();
//        OutputStream out = new FileOutputStream(file1);
//        try {
//            out.write("This is a test".getBytes("UTF-8"));
//        } finally {
//            out.close();
//        }
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, filename, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3032,file2,3031,file2.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3033,((file2.length()) > 0));
//        String file2contents = org.apache.commons.io.FileUtils.readFileToString(file2, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3035,filename,3034,filename.equals(file2contents));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3037,file2,3036,file2.delete());
//        String contents = org.apache.commons.io.FileUtils.readFileToString(new File(filename), "foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3038,contents);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test the FileUtils implementation.
//     */
//@Test(timeout = 1000)
//    public void testFileUtils_remove1121() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileUtils_remove1121");
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "test.txt");
//        String filename = file1.getAbsolutePath();
//        OutputStream out = new FileOutputStream(file1);
//        try {
//            out.write("This is a test".getBytes("UTF-8"));
//        } finally {
//            out.close();
//        }
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "test2.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3032,file2,3031,file2.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3033,((file2.length()) > 0));
//        String file2contents = org.apache.commons.io.FileUtils.readFileToString(file2, "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3035,filename,3034,filename.equals(file2contents));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3037,file2,3036,file2.delete());
//        String contents = org.apache.commons.io.FileUtils.readFileToString(new File(filename), "UTF-8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3038,contents);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testTouch_add1607() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTouch_add1607");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "touch.txt");
//        if (file.exists()) {
//            file.delete();
//            file.delete();
//        } 
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3277,!(file.exists()));
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3279,file,3278,file.exists());
//        FileOutputStream out = new FileOutputStream(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3281,file,3280,file.length());
//        out.write(0);
//        out.close();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3283,file,3282,file.length());
//        long y2k = new GregorianCalendar(2000 , 0 , 1).getTime().getTime();
//        boolean res = file.setLastModified(y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3284,res);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3285,y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3287,file,3286,file.lastModified());
//        long now = System.currentTimeMillis();
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3289,file,3288,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3290,(y2k == (file.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3291,((file.lastModified()) >= (now - 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3292,((file.lastModified()) <= (now + 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testTouch_add1608() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTouch_add1608");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "touch.txt");
//        if (file.exists()) {
//            file.delete();
//        } 
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3277,!(file.exists()));
//        org.apache.commons.io.FileUtils.touch(file);
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3279,file,3278,file.exists());
//        FileOutputStream out = new FileOutputStream(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3281,file,3280,file.length());
//        out.write(0);
//        out.close();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3283,file,3282,file.length());
//        long y2k = new GregorianCalendar(2000 , 0 , 1).getTime().getTime();
//        boolean res = file.setLastModified(y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3284,res);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3285,y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3287,file,3286,file.lastModified());
//        long now = System.currentTimeMillis();
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3289,file,3288,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3290,(y2k == (file.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3291,((file.lastModified()) >= (now - 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3292,((file.lastModified()) <= (now + 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testTouch_add1609() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTouch_add1609");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "touch.txt");
//        if (file.exists()) {
//            file.delete();
//        } 
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3277,!(file.exists()));
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3279,file,3278,file.exists());
//        FileOutputStream out = new FileOutputStream(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3281,file,3280,file.length());
//        out.write(0);
//        out.write(0);
//        out.close();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3283,file,3282,file.length());
//        long y2k = new GregorianCalendar(2000 , 0 , 1).getTime().getTime();
//        boolean res = file.setLastModified(y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3284,res);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3285,y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3287,file,3286,file.lastModified());
//        long now = System.currentTimeMillis();
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3289,file,3288,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3290,(y2k == (file.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3291,((file.lastModified()) >= (now - 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3292,((file.lastModified()) <= (now + 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testTouch_add1610() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTouch_add1610");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "touch.txt");
//        if (file.exists()) {
//            file.delete();
//        } 
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3277,!(file.exists()));
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3279,file,3278,file.exists());
//        FileOutputStream out = new FileOutputStream(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3281,file,3280,file.length());
//        out.write(0);
//        out.close();
//        out.close();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3283,file,3282,file.length());
//        long y2k = new GregorianCalendar(2000 , 0 , 1).getTime().getTime();
//        boolean res = file.setLastModified(y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3284,res);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3285,y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3287,file,3286,file.lastModified());
//        long now = System.currentTimeMillis();
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3289,file,3288,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3290,(y2k == (file.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3291,((file.lastModified()) >= (now - 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3292,((file.lastModified()) <= (now + 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testTouch_add1611() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTouch_add1611");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "touch.txt");
//        if (file.exists()) {
//            file.delete();
//        } 
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3277,!(file.exists()));
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3279,file,3278,file.exists());
//        FileOutputStream out = new FileOutputStream(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3281,file,3280,file.length());
//        out.write(0);
//        out.close();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3283,file,3282,file.length());
//        long y2k = new GregorianCalendar(2000 , 0 , 1).getTime().getTime();
//        boolean res = file.setLastModified(y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3284,res);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3285,y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3287,file,3286,file.lastModified());
//        long now = System.currentTimeMillis();
//        org.apache.commons.io.FileUtils.touch(file);
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3289,file,3288,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3290,(y2k == (file.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3291,((file.lastModified()) >= (now - 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3292,((file.lastModified()) <= (now + 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testTouch() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTouch");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        if (file.exists()) {
//            file.delete();
//        } 
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3277,!(file.exists()));
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3279,file,3278,file.exists());
//        FileOutputStream out = new FileOutputStream(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3281,file,3280,file.length());
//        out.write(0);
//        out.close();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3283,file,3282,file.length());
//        long y2k = new GregorianCalendar(2000 , 0 , 1).getTime().getTime();
//        boolean res = file.setLastModified(y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3284,res);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3285,y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3287,file,3286,file.lastModified());
//        long now = System.currentTimeMillis();
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3289,file,3288,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3290,(y2k == (file.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3291,((file.lastModified()) >= (now - 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3292,((file.lastModified()) <= (now + 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testTouch_literalMutation3549() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTouch_literalMutation3549");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "touch.txt");
//        if (file.exists()) {
//            file.delete();
//        } 
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3277,!(file.exists()));
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3279,file,3278,file.exists());
//        FileOutputStream out = new FileOutputStream(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3281,file,3280,file.length());
//        out.write(-1);
//        out.close();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3283,file,3282,file.length());
//        long y2k = new GregorianCalendar(2000 , 0 , 1).getTime().getTime();
//        boolean res = file.setLastModified(y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3284,res);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3285,y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3287,file,3286,file.lastModified());
//        long now = System.currentTimeMillis();
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3289,file,3288,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3290,(y2k == (file.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3291,((file.lastModified()) >= (now - 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3292,((file.lastModified()) <= (now + 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testTouch_literalMutation3550() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTouch_literalMutation3550");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "touch.txt");
//        if (file.exists()) {
//            file.delete();
//        } 
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3277,!(file.exists()));
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3279,file,3278,file.exists());
//        FileOutputStream out = new FileOutputStream(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3281,file,3280,file.length());
//        out.write(0);
//        out.close();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3283,file,3282,file.length());
//        long y2k = new GregorianCalendar(2001 , 0 , 1).getTime().getTime();
//        boolean res = file.setLastModified(y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3284,res);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3285,y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3287,file,3286,file.lastModified());
//        long now = System.currentTimeMillis();
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3289,file,3288,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3290,(y2k == (file.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3291,((file.lastModified()) >= (now - 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3292,((file.lastModified()) <= (now + 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testTouch_literalMutation3551() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTouch_literalMutation3551");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "touch.txt");
//        if (file.exists()) {
//            file.delete();
//        } 
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3277,!(file.exists()));
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3279,file,3278,file.exists());
//        FileOutputStream out = new FileOutputStream(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3281,file,3280,file.length());
//        out.write(0);
//        out.close();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3283,file,3282,file.length());
//        long y2k = new GregorianCalendar(2000 , -1 , 1).getTime().getTime();
//        boolean res = file.setLastModified(y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3284,res);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3285,y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3287,file,3286,file.lastModified());
//        long now = System.currentTimeMillis();
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3289,file,3288,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3290,(y2k == (file.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3291,((file.lastModified()) >= (now - 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3292,((file.lastModified()) <= (now + 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testTouch_literalMutation3552() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTouch_literalMutation3552");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "touch.txt");
//        if (file.exists()) {
//            file.delete();
//        } 
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3277,!(file.exists()));
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3279,file,3278,file.exists());
//        FileOutputStream out = new FileOutputStream(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3281,file,3280,file.length());
//        out.write(0);
//        out.close();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3283,file,3282,file.length());
//        long y2k = new GregorianCalendar(2000 , 0 , 2).getTime().getTime();
//        boolean res = file.setLastModified(y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3284,res);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3285,y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3287,file,3286,file.lastModified());
//        long now = System.currentTimeMillis();
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3289,file,3288,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3290,(y2k == (file.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3291,((file.lastModified()) >= (now - 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3292,((file.lastModified()) <= (now + 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testTouch_remove1214() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTouch_remove1214");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "touch.txt");
//        if (file.exists()) {
//        } 
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3277,!(file.exists()));
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3279,file,3278,file.exists());
//        FileOutputStream out = new FileOutputStream(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3281,file,3280,file.length());
//        out.write(0);
//        out.close();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3283,file,3282,file.length());
//        long y2k = new GregorianCalendar(2000 , 0 , 1).getTime().getTime();
//        boolean res = file.setLastModified(y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3284,res);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3285,y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3287,file,3286,file.lastModified());
//        long now = System.currentTimeMillis();
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3289,file,3288,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3290,(y2k == (file.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3291,((file.lastModified()) >= (now - 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3292,((file.lastModified()) <= (now + 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testTouch_remove1215() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTouch_remove1215");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "touch.txt");
//        if (file.exists()) {
//            file.delete();
//        } 
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3277,!(file.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3279,file,3278,file.exists());
//        FileOutputStream out = new FileOutputStream(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3281,file,3280,file.length());
//        out.write(0);
//        out.close();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3283,file,3282,file.length());
//        long y2k = new GregorianCalendar(2000 , 0 , 1).getTime().getTime();
//        boolean res = file.setLastModified(y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3284,res);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3285,y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3287,file,3286,file.lastModified());
//        long now = System.currentTimeMillis();
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3289,file,3288,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3290,(y2k == (file.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3291,((file.lastModified()) >= (now - 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3292,((file.lastModified()) <= (now + 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testTouch_remove1216() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTouch_remove1216");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "touch.txt");
//        if (file.exists()) {
//            file.delete();
//        } 
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3277,!(file.exists()));
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3279,file,3278,file.exists());
//        FileOutputStream out = new FileOutputStream(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3281,file,3280,file.length());
//        out.close();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3283,file,3282,file.length());
//        long y2k = new GregorianCalendar(2000 , 0 , 1).getTime().getTime();
//        boolean res = file.setLastModified(y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3284,res);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3285,y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3287,file,3286,file.lastModified());
//        long now = System.currentTimeMillis();
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3289,file,3288,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3290,(y2k == (file.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3291,((file.lastModified()) >= (now - 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3292,((file.lastModified()) <= (now + 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testTouch_remove1217() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTouch_remove1217");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "touch.txt");
//        if (file.exists()) {
//            file.delete();
//        } 
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3277,!(file.exists()));
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3279,file,3278,file.exists());
//        FileOutputStream out = new FileOutputStream(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3281,file,3280,file.length());
//        out.write(0);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3283,file,3282,file.length());
//        long y2k = new GregorianCalendar(2000 , 0 , 1).getTime().getTime();
//        boolean res = file.setLastModified(y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3284,res);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3285,y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3287,file,3286,file.lastModified());
//        long now = System.currentTimeMillis();
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3289,file,3288,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3290,(y2k == (file.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3291,((file.lastModified()) >= (now - 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3292,((file.lastModified()) <= (now + 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testTouch_remove1218() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTouch_remove1218");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "touch.txt");
//        if (file.exists()) {
//            file.delete();
//        } 
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3277,!(file.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3279,file,3278,file.exists());
//        FileOutputStream out = new FileOutputStream(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3281,file,3280,file.length());
//        out.write(0);
//        out.close();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3283,file,3282,file.length());
//        long y2k = new GregorianCalendar(2000 , 0 , 1).getTime().getTime();
//        boolean res = file.setLastModified(y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3284,res);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3285,y2k);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3287,file,3286,file.lastModified());
//        long now = System.currentTimeMillis();
//        org.apache.commons.io.FileUtils.touch(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3289,file,3288,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3290,(y2k == (file.lastModified())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3291,((file.lastModified()) >= (now - 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3292,((file.lastModified()) <= (now + 3000)));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFiles_add1503() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_add1503");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFiles_add1504() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_add1504");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFiles_add1505() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_add1505");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFiles_add1506() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_add1506");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFiles_add1507() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_add1507");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3375() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3375");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "foo");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3376() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3376");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "foo");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3377() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3377");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "foo" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3378() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3378");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "foo" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3379() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3379");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "foo" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3380() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3380");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "foo" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3381() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3381");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "foo" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3382() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3382");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "foo" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3383() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3383");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 124 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3384() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3384");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 235 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3385() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3385");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 346 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3386() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3386");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 455 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3387() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3387");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 679 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3388() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3388");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 788 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3389() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3389");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 1 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3390() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3390");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("foo"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3391() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3391");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("foo"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3392() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3392");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 1 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3393() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3393");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3394() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3394");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 1 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFiles_literalMutation3395() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_literalMutation3395");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFiles_remove1143() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_remove1143");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFiles_remove1144() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_remove1144");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFiles_remove1145() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_remove1145");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFiles_remove1146() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_remove1146");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFiles_remove1147() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFiles_remove1147");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        File subDir2 = new File(subDir , "subdir");
//        subDir2.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        int count = files.size();
//        Object[] fileObjs = files.toArray();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3137,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3139,files,3138,files.size());
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        for (int i = 0 ; i < count ; ++i) {
//            boolean found = false;
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(((File)(fileObjs[i])).getName())) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3141,foundFileNames,3140,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3142,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFilesWithDirs_add1508() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs_add1508");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        subDir1.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFilesWithDirs_add1509() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs_add1509");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        subDir1.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFilesWithDirs_add1510() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs_add1510");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        subDir1.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFilesWithDirs_add1511() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs_add1511");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        subDir1.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFilesWithDirs_add1512() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs_add1512");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        subDir1.delete();
//        subDir1.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFilesWithDirs() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "foo");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        subDir1.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFilesWithDirs_literalMutation3397() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs_literalMutation3397");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "foo");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        subDir1.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFilesWithDirs_literalMutation3398() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs_literalMutation3398");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "foo");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        subDir1.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFilesWithDirs_literalMutation3399() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs_literalMutation3399");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 99);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        subDir1.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFilesWithDirs_literalMutation3400() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs_literalMutation3400");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "foo");
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        subDir1.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFilesWithDirs_literalMutation3401() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs_literalMutation3401");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("foo"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        subDir1.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testListFilesWithDirs_literalMutation3402() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs_literalMutation3402");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("foo"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        subDir1.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFilesWithDirs_remove1148() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs_remove1148");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        subDir1.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFilesWithDirs_remove1149() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs_remove1149");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        subDir1.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFilesWithDirs_remove1150() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs_remove1150");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        subDir1.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFilesWithDirs_remove1151() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs_remove1151");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        subDir1.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testListFilesWithDirs_remove1152() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testListFilesWithDirs_remove1152");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> files = org.apache.commons.io.FileUtils.listFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3144,files,3143,files.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3146,files,3145,files.contains(subDir1));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3148,files,3147,files.contains(subDir2));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3150,files,3149,files.contains(someFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3152,files,3151,files.contains(subDir3));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIterateFiles_add1495() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_add1495");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIterateFiles_add1496() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_add1496");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIterateFiles_add1497() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_add1497");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIterateFiles_add1498() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_add1498");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "foo");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3349() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3349");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "foo" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3350() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3350");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "foo" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3351() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3351");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "foo" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3352() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3352");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "foo" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3353() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3353");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "foo" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3354() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3354");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "foo" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3355() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3355");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 124 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3356() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3356");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 235 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3357() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3357");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 346 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3358() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3358");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 457 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3359() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3359");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 679 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3360() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3360");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 790 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3361() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3361");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 1 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3362() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3362");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("foo"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3363() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3363");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("foo"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3364() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3364");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = true;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3365() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3365");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 1 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFiles_literalMutation3366() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_literalMutation3366");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = false;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIterateFiles_remove1136() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_remove1136");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIterateFiles_remove1137() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_remove1137");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        subDir.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIterateFiles_remove1138() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFiles_remove1138");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir = new File(srcDir , "list_test");
//        subDir.mkdir();
//        String[] fileNames = new String[]{ "a.txt" , "b.txt" , "c.txt" , "d.txt" , "e.txt" , "f.txt" };
//        int[] fileSizes = new int[]{ 123 , 234 , 345 , 456 , 678 , 789 };
//        for (int i = 0 ; i < (fileNames.length) ; ++i) {
//            File theFile = new File(subDir , fileNames[i]);
//            createFile(theFile, fileSizes[i]);
//        }
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFiles(subDir, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        Map<java.lang.String, java.lang.String> foundFileNames = new HashMap<java.lang.String, java.lang.String>();
//        while (files.hasNext()) {
//            boolean found = false;
//            String fileName = files.next().getName();
//            for (int j = 0 ; (!found) && (j < (fileNames.length)) ; ++j) {
//                if (fileNames[j].equals(fileName)) {
//                    foundFileNames.put(fileNames[j], fileNames[j]);
//                    found = true;
//                } 
//            }
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3135,foundFileNames,3134,foundFileNames.size());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3136,fileNames.length);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIterateFilesAndDirs_add1499() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFilesAndDirs_add1499");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> filesAndDirs = java.util.Arrays.asList(subDir1, subDir2, someFile, subDir3);
//        int filesCount = 0;
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        while (files.hasNext()) {
//            filesCount++;
//            File file = files.next();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3130,filesAndDirs,3129,filesAndDirs.contains(file));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3131,filesCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3133,filesAndDirs,3132,filesAndDirs.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIterateFilesAndDirs_add1500() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFilesAndDirs_add1500");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> filesAndDirs = java.util.Arrays.asList(subDir1, subDir2, someFile, subDir3);
//        int filesCount = 0;
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        while (files.hasNext()) {
//            filesCount++;
//            File file = files.next();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3130,filesAndDirs,3129,filesAndDirs.contains(file));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3131,filesCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3133,filesAndDirs,3132,filesAndDirs.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIterateFilesAndDirs_add1501() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFilesAndDirs_add1501");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> filesAndDirs = java.util.Arrays.asList(subDir1, subDir2, someFile, subDir3);
//        int filesCount = 0;
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        while (files.hasNext()) {
//            filesCount++;
//            File file = files.next();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3130,filesAndDirs,3129,filesAndDirs.contains(file));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3131,filesCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3133,filesAndDirs,3132,filesAndDirs.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIterateFilesAndDirs_add1502() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFilesAndDirs_add1502");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        subDir3.mkdir();
//        Collection<java.io.File> filesAndDirs = java.util.Arrays.asList(subDir1, subDir2, someFile, subDir3);
//        int filesCount = 0;
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        while (files.hasNext()) {
//            filesCount++;
//            File file = files.next();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3130,filesAndDirs,3129,filesAndDirs.contains(file));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3131,filesCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3133,filesAndDirs,3132,filesAndDirs.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFilesAndDirs() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFilesAndDirs");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "foo");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> filesAndDirs = java.util.Arrays.asList(subDir1, subDir2, someFile, subDir3);
//        int filesCount = 0;
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        while (files.hasNext()) {
//            filesCount++;
//            File file = files.next();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3130,filesAndDirs,3129,filesAndDirs.contains(file));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3131,filesCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3133,filesAndDirs,3132,filesAndDirs.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFilesAndDirs_literalMutation3368() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFilesAndDirs_literalMutation3368");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "foo");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> filesAndDirs = java.util.Arrays.asList(subDir1, subDir2, someFile, subDir3);
//        int filesCount = 0;
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        while (files.hasNext()) {
//            filesCount++;
//            File file = files.next();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3130,filesAndDirs,3129,filesAndDirs.contains(file));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3131,filesCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3133,filesAndDirs,3132,filesAndDirs.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFilesAndDirs_literalMutation3369() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFilesAndDirs_literalMutation3369");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "foo");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> filesAndDirs = java.util.Arrays.asList(subDir1, subDir2, someFile, subDir3);
//        int filesCount = 0;
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        while (files.hasNext()) {
//            filesCount++;
//            File file = files.next();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3130,filesAndDirs,3129,filesAndDirs.contains(file));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3131,filesCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3133,filesAndDirs,3132,filesAndDirs.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFilesAndDirs_literalMutation3370() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFilesAndDirs_literalMutation3370");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 99);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> filesAndDirs = java.util.Arrays.asList(subDir1, subDir2, someFile, subDir3);
//        int filesCount = 0;
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        while (files.hasNext()) {
//            filesCount++;
//            File file = files.next();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3130,filesAndDirs,3129,filesAndDirs.contains(file));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3131,filesCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3133,filesAndDirs,3132,filesAndDirs.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFilesAndDirs_literalMutation3371() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFilesAndDirs_literalMutation3371");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "foo");
//        subDir3.mkdir();
//        Collection<java.io.File> filesAndDirs = java.util.Arrays.asList(subDir1, subDir2, someFile, subDir3);
//        int filesCount = 0;
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        while (files.hasNext()) {
//            filesCount++;
//            File file = files.next();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3130,filesAndDirs,3129,filesAndDirs.contains(file));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3131,filesCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3133,filesAndDirs,3132,filesAndDirs.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFilesAndDirs_literalMutation3372() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFilesAndDirs_literalMutation3372");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> filesAndDirs = java.util.Arrays.asList(subDir1, subDir2, someFile, subDir3);
//        int filesCount = -1;
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        while (files.hasNext()) {
//            filesCount++;
//            File file = files.next();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3130,filesAndDirs,3129,filesAndDirs.contains(file));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3131,filesCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3133,filesAndDirs,3132,filesAndDirs.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFilesAndDirs_literalMutation3373() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFilesAndDirs_literalMutation3373");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> filesAndDirs = java.util.Arrays.asList(subDir1, subDir2, someFile, subDir3);
//        int filesCount = 0;
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("foo"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        while (files.hasNext()) {
//            filesCount++;
//            File file = files.next();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3130,filesAndDirs,3129,filesAndDirs.contains(file));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3131,filesCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3133,filesAndDirs,3132,filesAndDirs.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIterateFilesAndDirs_literalMutation3374() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFilesAndDirs_literalMutation3374");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> filesAndDirs = java.util.Arrays.asList(subDir1, subDir2, someFile, subDir3);
//        int filesCount = 0;
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("foo"));
//        while (files.hasNext()) {
//            filesCount++;
//            File file = files.next();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3130,filesAndDirs,3129,filesAndDirs.contains(file));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3131,filesCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3133,filesAndDirs,3132,filesAndDirs.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIterateFilesAndDirs_remove1139() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFilesAndDirs_remove1139");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> filesAndDirs = java.util.Arrays.asList(subDir1, subDir2, someFile, subDir3);
//        int filesCount = 0;
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        while (files.hasNext()) {
//            filesCount++;
//            File file = files.next();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3130,filesAndDirs,3129,filesAndDirs.contains(file));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3131,filesCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3133,filesAndDirs,3132,filesAndDirs.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIterateFilesAndDirs_remove1140() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFilesAndDirs_remove1140");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> filesAndDirs = java.util.Arrays.asList(subDir1, subDir2, someFile, subDir3);
//        int filesCount = 0;
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        while (files.hasNext()) {
//            filesCount++;
//            File file = files.next();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3130,filesAndDirs,3129,filesAndDirs.contains(file));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3131,filesCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3133,filesAndDirs,3132,filesAndDirs.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIterateFilesAndDirs_remove1141() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFilesAndDirs_remove1141");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        subDir1.mkdir();
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> filesAndDirs = java.util.Arrays.asList(subDir1, subDir2, someFile, subDir3);
//        int filesCount = 0;
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        while (files.hasNext()) {
//            filesCount++;
//            File file = files.next();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3130,filesAndDirs,3129,filesAndDirs.contains(file));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3131,filesCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3133,filesAndDirs,3132,filesAndDirs.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIterateFilesAndDirs_remove1142() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIterateFilesAndDirs_remove1142");
//        File srcDir = FileBasedTestCase.getTestDirectory();
//        File subDir1 = new File(srcDir , "subdir");
//        File subDir2 = new File(subDir1 , "subdir2");
//        subDir2.mkdir();
//        File someFile = new File(subDir2 , "a.txt");
//        createFile(someFile, 100);
//        File subDir3 = new File(subDir2 , "subdir3");
//        subDir3.mkdir();
//        Collection<java.io.File> filesAndDirs = java.util.Arrays.asList(subDir1, subDir2, someFile, subDir3);
//        int filesCount = 0;
//        Iterator<java.io.File> files = org.apache.commons.io.FileUtils.iterateFilesAndDirs(subDir1, new org.apache.commons.io.filefilter.WildcardFileFilter("*.*"), new org.apache.commons.io.filefilter.WildcardFileFilter("*"));
//        while (files.hasNext()) {
//            filesCount++;
//            File file = files.next();
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3130,filesAndDirs,3129,filesAndDirs.contains(file));
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3131,filesCount);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3133,filesAndDirs,3132,filesAndDirs.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadFileToStringWithDefaultEncoding_add1570() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToStringWithDefaultEncoding_add1570");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.obj");
//        FileOutputStream out = new FileOutputStream(file);
//        byte[] text = "Hello /u1234".getBytes();
//        out.write(text);
//        out.write(text);
//        out.close();
//        String data = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3210,data);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadFileToStringWithDefaultEncoding_add1571() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToStringWithDefaultEncoding_add1571");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.obj");
//        FileOutputStream out = new FileOutputStream(file);
//        byte[] text = "Hello /u1234".getBytes();
//        out.write(text);
//        out.close();
//        out.close();
//        String data = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3210,data);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadFileToStringWithDefaultEncoding() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToStringWithDefaultEncoding");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        FileOutputStream out = new FileOutputStream(file);
//        byte[] text = "Hello /u1234".getBytes();
//        out.write(text);
//        out.close();
//        String data = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3210,data);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadFileToStringWithDefaultEncoding_literalMutation3496() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToStringWithDefaultEncoding_literalMutation3496");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.obj");
//        FileOutputStream out = new FileOutputStream(file);
//        byte[] text = "foo".getBytes();
//        out.write(text);
//        out.close();
//        String data = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3210,data);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadFileToStringWithDefaultEncoding_remove1188() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToStringWithDefaultEncoding_remove1188");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.obj");
//        FileOutputStream out = new FileOutputStream(file);
//        byte[] text = "Hello /u1234".getBytes();
//        out.close();
//        String data = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3210,data);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadFileToStringWithDefaultEncoding_remove1189() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToStringWithDefaultEncoding_remove1189");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.obj");
//        FileOutputStream out = new FileOutputStream(file);
//        byte[] text = "Hello /u1234".getBytes();
//        out.write(text);
//        String data = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3210,data);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadFileToStringWithEncoding_add1572() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToStringWithEncoding_add1572");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.obj");
//        FileOutputStream out = new FileOutputStream(file);
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        out.write(text);
//        out.write(text);
//        out.close();
//        String data = org.apache.commons.io.FileUtils.readFileToString(file, "UTF8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3211,data);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadFileToStringWithEncoding_add1573() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToStringWithEncoding_add1573");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.obj");
//        FileOutputStream out = new FileOutputStream(file);
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        out.write(text);
//        out.close();
//        out.close();
//        String data = org.apache.commons.io.FileUtils.readFileToString(file, "UTF8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3211,data);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadFileToStringWithEncoding() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToStringWithEncoding");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        FileOutputStream out = new FileOutputStream(file);
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        out.write(text);
//        out.close();
//        String data = org.apache.commons.io.FileUtils.readFileToString(file, "UTF8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3211,data);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadFileToStringWithEncoding_literalMutation3498() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToStringWithEncoding_literalMutation3498");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.obj");
//        FileOutputStream out = new FileOutputStream(file);
//        byte[] text = "foo".getBytes("UTF8");
//        out.write(text);
//        out.close();
//        String data = org.apache.commons.io.FileUtils.readFileToString(file, "UTF8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3211,data);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadFileToStringWithEncoding_literalMutation3499() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToStringWithEncoding_literalMutation3499");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.obj");
//        FileOutputStream out = new FileOutputStream(file);
//        byte[] text = "Hello /u1234".getBytes("foo");
//        out.write(text);
//        out.close();
//        String data = org.apache.commons.io.FileUtils.readFileToString(file, "UTF8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3211,data);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadFileToStringWithEncoding_literalMutation3500() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToStringWithEncoding_literalMutation3500");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.obj");
//        FileOutputStream out = new FileOutputStream(file);
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        out.write(text);
//        out.close();
//        String data = org.apache.commons.io.FileUtils.readFileToString(file, "foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3211,data);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadFileToStringWithEncoding_remove1190() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToStringWithEncoding_remove1190");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.obj");
//        FileOutputStream out = new FileOutputStream(file);
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        out.close();
//        String data = org.apache.commons.io.FileUtils.readFileToString(file, "UTF8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3211,data);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadFileToStringWithEncoding_remove1191() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToStringWithEncoding_remove1191");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.obj");
//        FileOutputStream out = new FileOutputStream(file);
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        out.write(text);
//        String data = org.apache.commons.io.FileUtils.readFileToString(file, "UTF8");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3211,data);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadFileToByteArray_add1566() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToByteArray_add1566");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.txt");
//        FileOutputStream out = new FileOutputStream(file);
//        out.write(11);
//        out.write(11);
//        out.write(21);
//        out.write(31);
//        out.close();
//        byte[] data = org.apache.commons.io.FileUtils.readFileToByteArray(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3206,data.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3207,data[0]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3208,data[1]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3209,data[2]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadFileToByteArray_add1567() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToByteArray_add1567");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.txt");
//        FileOutputStream out = new FileOutputStream(file);
//        out.write(11);
//        out.write(21);
//        out.write(21);
//        out.write(31);
//        out.close();
//        byte[] data = org.apache.commons.io.FileUtils.readFileToByteArray(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3206,data.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3207,data[0]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3208,data[1]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3209,data[2]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadFileToByteArray_add1568() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToByteArray_add1568");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.txt");
//        FileOutputStream out = new FileOutputStream(file);
//        out.write(11);
//        out.write(21);
//        out.write(31);
//        out.write(31);
//        out.close();
//        byte[] data = org.apache.commons.io.FileUtils.readFileToByteArray(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3206,data.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3207,data[0]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3208,data[1]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3209,data[2]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadFileToByteArray_add1569() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToByteArray_add1569");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.txt");
//        FileOutputStream out = new FileOutputStream(file);
//        out.write(11);
//        out.write(21);
//        out.write(31);
//        out.close();
//        out.close();
//        byte[] data = org.apache.commons.io.FileUtils.readFileToByteArray(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3206,data.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3207,data[0]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3208,data[1]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3209,data[2]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadFileToByteArray() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToByteArray");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        FileOutputStream out = new FileOutputStream(file);
//        out.write(11);
//        out.write(21);
//        out.write(31);
//        out.close();
//        byte[] data = org.apache.commons.io.FileUtils.readFileToByteArray(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3206,data.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3207,data[0]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3208,data[1]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3209,data[2]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadFileToByteArray_literalMutation3492() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToByteArray_literalMutation3492");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.txt");
//        FileOutputStream out = new FileOutputStream(file);
//        out.write(10);
//        out.write(21);
//        out.write(31);
//        out.close();
//        byte[] data = org.apache.commons.io.FileUtils.readFileToByteArray(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3206,data.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3207,data[0]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3208,data[1]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3209,data[2]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadFileToByteArray_literalMutation3493() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToByteArray_literalMutation3493");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.txt");
//        FileOutputStream out = new FileOutputStream(file);
//        out.write(11);
//        out.write(20);
//        out.write(31);
//        out.close();
//        byte[] data = org.apache.commons.io.FileUtils.readFileToByteArray(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3206,data.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3207,data[0]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3208,data[1]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3209,data[2]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadFileToByteArray_literalMutation3494() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToByteArray_literalMutation3494");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.txt");
//        FileOutputStream out = new FileOutputStream(file);
//        out.write(11);
//        out.write(21);
//        out.write(32);
//        out.close();
//        byte[] data = org.apache.commons.io.FileUtils.readFileToByteArray(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3206,data.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3207,data[0]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3208,data[1]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3209,data[2]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadFileToByteArray_remove1184() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToByteArray_remove1184");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.txt");
//        FileOutputStream out = new FileOutputStream(file);
//        out.write(21);
//        out.write(31);
//        out.close();
//        byte[] data = org.apache.commons.io.FileUtils.readFileToByteArray(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3206,data.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3207,data[0]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3208,data[1]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3209,data[2]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadFileToByteArray_remove1185() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToByteArray_remove1185");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.txt");
//        FileOutputStream out = new FileOutputStream(file);
//        out.write(21);
//        out.write(31);
//        out.close();
//        byte[] data = org.apache.commons.io.FileUtils.readFileToByteArray(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3206,data.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3207,data[0]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3208,data[1]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3209,data[2]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadFileToByteArray_remove1186() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToByteArray_remove1186");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.txt");
//        FileOutputStream out = new FileOutputStream(file);
//        out.write(21);
//        out.write(31);
//        out.close();
//        byte[] data = org.apache.commons.io.FileUtils.readFileToByteArray(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3206,data.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3207,data[0]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3208,data[1]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3209,data[2]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadFileToByteArray_remove1187() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadFileToByteArray_remove1187");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "read.txt");
//        FileOutputStream out = new FileOutputStream(file);
//        out.write(11);
//        out.write(21);
//        out.write(31);
//        byte[] data = org.apache.commons.io.FileUtils.readFileToByteArray(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3206,data.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3207,data[0]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3208,data[1]);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3209,data[2]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadLines_add1574() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadLines_add1574");
//        File file = newFile("lines.txt");
//        try {
//            String[] data = new String[]{ "hello" , "/u1234" , "" , "this is" , "some text" };
//            createLineBasedFile(file, data);
//            createLineBasedFile(file, data);
//            List<java.lang.String> lines = org.apache.commons.io.FileUtils.readLines(file, "UTF-8");
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3213,null,3212,java.util.Arrays.asList(data));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3214,lines);
//        } finally {
//            deleteFile(file);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testReadLines_add1575() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadLines_add1575");
//        File file = newFile("lines.txt");
//        try {
//            String[] data = new String[]{ "hello" , "/u1234" , "" , "this is" , "some text" };
//            createLineBasedFile(file, data);
//            List<java.lang.String> lines = org.apache.commons.io.FileUtils.readLines(file, "UTF-8");
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3213,null,3212,java.util.Arrays.asList(data));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3214,lines);
//        } finally {
//            deleteFile(file);
//            deleteFile(file);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadLines");
//        File file = newFile("foo");
//        try {
//            String[] data = new String[]{ "hello" , "/u1234" , "" , "this is" , "some text" };
//            createLineBasedFile(file, data);
//            List<java.lang.String> lines = org.apache.commons.io.FileUtils.readLines(file, "UTF-8");
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3213,null,3212,java.util.Arrays.asList(data));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3214,lines);
//        } finally {
//            deleteFile(file);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadLines_literalMutation3502() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadLines_literalMutation3502");
//        File file = newFile("lines.txt");
//        try {
//            String[] data = new String[]{ "foo" , "/u1234" , "" , "this is" , "some text" };
//            createLineBasedFile(file, data);
//            List<java.lang.String> lines = org.apache.commons.io.FileUtils.readLines(file, "UTF-8");
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3213,null,3212,java.util.Arrays.asList(data));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3214,lines);
//        } finally {
//            deleteFile(file);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadLines_literalMutation3503() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadLines_literalMutation3503");
//        File file = newFile("lines.txt");
//        try {
//            String[] data = new String[]{ "hello" , "foo" , "" , "this is" , "some text" };
//            createLineBasedFile(file, data);
//            List<java.lang.String> lines = org.apache.commons.io.FileUtils.readLines(file, "UTF-8");
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3213,null,3212,java.util.Arrays.asList(data));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3214,lines);
//        } finally {
//            deleteFile(file);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadLines_literalMutation3504() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadLines_literalMutation3504");
//        File file = newFile("lines.txt");
//        try {
//            String[] data = new String[]{ "hello" , "/u1234" , "foo" , "this is" , "some text" };
//            createLineBasedFile(file, data);
//            List<java.lang.String> lines = org.apache.commons.io.FileUtils.readLines(file, "UTF-8");
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3213,null,3212,java.util.Arrays.asList(data));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3214,lines);
//        } finally {
//            deleteFile(file);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadLines_literalMutation3505() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadLines_literalMutation3505");
//        File file = newFile("lines.txt");
//        try {
//            String[] data = new String[]{ "hello" , "/u1234" , "" , "foo" , "some text" };
//            createLineBasedFile(file, data);
//            List<java.lang.String> lines = org.apache.commons.io.FileUtils.readLines(file, "UTF-8");
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3213,null,3212,java.util.Arrays.asList(data));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3214,lines);
//        } finally {
//            deleteFile(file);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadLines_literalMutation3506() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadLines_literalMutation3506");
//        File file = newFile("lines.txt");
//        try {
//            String[] data = new String[]{ "hello" , "/u1234" , "" , "this is" , "foo" };
//            createLineBasedFile(file, data);
//            List<java.lang.String> lines = org.apache.commons.io.FileUtils.readLines(file, "UTF-8");
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3213,null,3212,java.util.Arrays.asList(data));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3214,lines);
//        } finally {
//            deleteFile(file);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testReadLines_literalMutation3507() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testReadLines_literalMutation3507");
//        File file = newFile("lines.txt");
//        try {
//            String[] data = new String[]{ "hello" , "/u1234" , "" , "this is" , "some text" };
//            createLineBasedFile(file, data);
//            List<java.lang.String> lines = org.apache.commons.io.FileUtils.readLines(file, "foo");
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3213,null,3212,java.util.Arrays.asList(data));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3214,lines);
//        } finally {
//            deleteFile(file);
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile1_add1642() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile1_add1642");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", "UTF8");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", "UTF8");
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile1_add1643() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile1_add1643");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", "UTF8");
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        assertEqualContent(text, file);
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile1() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile1");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", "UTF8");
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile1_literalMutation3688() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile1_literalMutation3688");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo", "UTF8");
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile1_literalMutation3689() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile1_literalMutation3689");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", "foo");
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile1_literalMutation3690() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile1_literalMutation3690");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", "UTF8");
//        byte[] text = "foo".getBytes("UTF8");
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile1_literalMutation3691() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile1_literalMutation3691");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", "UTF8");
//        byte[] text = "Hello /u1234".getBytes("foo");
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile1_remove1249() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile1_remove1249");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile1_remove1250() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile1_remove1250");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", "UTF8");
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile2_add1644() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile2_add1644");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", ((String)(null)));
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", ((String)(null)));
//        byte[] text = "Hello /u1234".getBytes();
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile2_add1645() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile2_add1645");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", ((String)(null)));
//        byte[] text = "Hello /u1234".getBytes();
//        assertEqualContent(text, file);
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile2() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile2");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", ((String)(null)));
//        byte[] text = "Hello /u1234".getBytes();
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile2_literalMutation3693() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile2_literalMutation3693");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo", ((String)(null)));
//        byte[] text = "Hello /u1234".getBytes();
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile2_literalMutation3695() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile2_literalMutation3695");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", ((String)(null)));
//        byte[] text = "foo".getBytes();
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile2_remove1251() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile2_remove1251");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        byte[] text = "Hello /u1234".getBytes();
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile2_remove1252() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile2_remove1252");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", ((String)(null)));
//        byte[] text = "Hello /u1234".getBytes();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile3_add1646() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile3_add1646");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", ((java.nio.charset.Charset)(null)));
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", ((java.nio.charset.Charset)(null)));
//        byte[] text = "Hello /u1234".getBytes();
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile3_add1647() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile3_add1647");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", ((java.nio.charset.Charset)(null)));
//        byte[] text = "Hello /u1234".getBytes();
//        assertEqualContent(text, file);
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile3() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile3");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", ((java.nio.charset.Charset)(null)));
//        byte[] text = "Hello /u1234".getBytes();
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile3_literalMutation3697() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile3_literalMutation3697");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo", ((java.nio.charset.Charset)(null)));
//        byte[] text = "Hello /u1234".getBytes();
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile3_literalMutation3699() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile3_literalMutation3699");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", ((java.nio.charset.Charset)(null)));
//        byte[] text = "foo".getBytes();
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile3_remove1253() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile3_remove1253");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        byte[] text = "Hello /u1234".getBytes();
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile3_remove1254() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile3_remove1254");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "Hello /u1234", ((java.nio.charset.Charset)(null)));
//        byte[] text = "Hello /u1234".getBytes();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteCharSequence1_add1618() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteCharSequence1_add1618");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.write(file, "Hello /u1234", "UTF8");
//        org.apache.commons.io.FileUtils.write(file, "Hello /u1234", "UTF8");
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteCharSequence1_add1619() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteCharSequence1_add1619");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.write(file, "Hello /u1234", "UTF8");
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        assertEqualContent(text, file);
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteCharSequence1() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteCharSequence1");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.write(file, "Hello /u1234", "UTF8");
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteCharSequence1_literalMutation3569() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteCharSequence1_literalMutation3569");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.write(file, "foo", "UTF8");
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteCharSequence1_literalMutation3570() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteCharSequence1_literalMutation3570");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.write(file, "Hello /u1234", "foo");
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteCharSequence1_literalMutation3571() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteCharSequence1_literalMutation3571");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.write(file, "Hello /u1234", "UTF8");
//        byte[] text = "foo".getBytes("UTF8");
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteCharSequence1_literalMutation3572() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteCharSequence1_literalMutation3572");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.write(file, "Hello /u1234", "UTF8");
//        byte[] text = "Hello /u1234".getBytes("foo");
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteCharSequence1_remove1225() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteCharSequence1_remove1225");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteCharSequence1_remove1226() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteCharSequence1_remove1226");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.write(file, "Hello /u1234", "UTF8");
//        byte[] text = "Hello /u1234".getBytes("UTF8");
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteCharSequence2_add1620() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteCharSequence2_add1620");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.write(file, "Hello /u1234", ((String)(null)));
//        org.apache.commons.io.FileUtils.write(file, "Hello /u1234", ((String)(null)));
//        byte[] text = "Hello /u1234".getBytes();
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteCharSequence2_add1621() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteCharSequence2_add1621");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.write(file, "Hello /u1234", ((String)(null)));
//        byte[] text = "Hello /u1234".getBytes();
//        assertEqualContent(text, file);
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteCharSequence2() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteCharSequence2");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.write(file, "Hello /u1234", ((String)(null)));
//        byte[] text = "Hello /u1234".getBytes();
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteCharSequence2_literalMutation3574() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteCharSequence2_literalMutation3574");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.write(file, "foo", ((String)(null)));
//        byte[] text = "Hello /u1234".getBytes();
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteCharSequence2_literalMutation3576() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteCharSequence2_literalMutation3576");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.write(file, "Hello /u1234", ((String)(null)));
//        byte[] text = "foo".getBytes();
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteCharSequence2_remove1227() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteCharSequence2_remove1227");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        byte[] text = "Hello /u1234".getBytes();
//        assertEqualContent(text, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteCharSequence2_remove1228() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteCharSequence2_remove1228");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.txt");
//        org.apache.commons.io.FileUtils.write(file, "Hello /u1234", ((String)(null)));
//        byte[] text = "Hello /u1234".getBytes();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteByteArrayToFile_add1612() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_add1612");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.obj");
//        byte[] data = new byte[]{ 11 , 21 , 31 };
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, data);
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, data);
//        assertEqualContent(data, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteByteArrayToFile_add1613() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_add1613");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.obj");
//        byte[] data = new byte[]{ 11 , 21 , 31 };
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, data);
//        assertEqualContent(data, file);
//        assertEqualContent(data, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteByteArrayToFile() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        byte[] data = new byte[]{ 11 , 21 , 31 };
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, data);
//        assertEqualContent(data, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteByteArrayToFile_literalMutation3554() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_literalMutation3554");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.obj");
//        byte[] data = new byte[]{ 12 , 21 , 31 };
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, data);
//        assertEqualContent(data, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteByteArrayToFile_literalMutation3555() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_literalMutation3555");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.obj");
//        byte[] data = new byte[]{ 11 , 20 , 31 };
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, data);
//        assertEqualContent(data, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteByteArrayToFile_literalMutation3556() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_literalMutation3556");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.obj");
//        byte[] data = new byte[]{ 11 , 21 , 32 };
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, data);
//        assertEqualContent(data, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteByteArrayToFile_remove1219() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_remove1219");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.obj");
//        byte[] data = new byte[]{ 11 , 21 , 31 };
//        assertEqualContent(data, file);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteByteArrayToFile_remove1220() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_remove1220");
//        File file = new File(FileBasedTestCase.getTestDirectory() , "write.obj");
//        byte[] data = new byte[]{ 11 , 21 , 31 };
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, data);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_4arg_add1631() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_add1631");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, "*");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, "*");
//        String expected = "hello*world**this is**some text*";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3309,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3310,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg");
//        Object[] data = new Object[]{ "foo" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, "*");
//        String expected = "hello*world**this is**some text*";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3309,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3310,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_literalMutation3623() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_literalMutation3623");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("foo") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, "*");
//        String expected = "hello*world**this is**some text*";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3309,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3310,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_literalMutation3624() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_literalMutation3624");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "foo" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, "*");
//        String expected = "hello*world**this is**some text*";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3309,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3310,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_literalMutation3625() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_literalMutation3625");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "foo" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, "*");
//        String expected = "hello*world**this is**some text*";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3309,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3310,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_literalMutation3627() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_literalMutation3627");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "foo" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, "*");
//        String expected = "hello*world**this is**some text*";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3309,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3310,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_literalMutation3628() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_literalMutation3628");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, "*");
//        String expected = "hello*world**this is**some text*";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3309,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3310,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_literalMutation3629() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_literalMutation3629");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "foo", list, "*");
//        String expected = "hello*world**this is**some text*";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3309,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3310,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_literalMutation3630() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_literalMutation3630");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, "foo");
//        String expected = "hello*world**this is**some text*";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3309,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3310,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_literalMutation3631() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_literalMutation3631");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, "*");
//        String expected = "foo";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3309,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3310,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_literalMutation3632() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_literalMutation3632");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, "*");
//        String expected = "hello*world**this is**some text*";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3309,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3310,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_4arg_remove1238() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_remove1238");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        String expected = "hello*world**this is**some text*";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3309,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3310,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_4arg_Writer_nullData_add1632() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_Writer_nullData_add1632");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", ((List<?>)(null)), "*");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", ((List<?>)(null)), "*");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3308,file,3307,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_Writer_nullData() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_Writer_nullData");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", ((List<?>)(null)), "*");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3308,file,3307,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_Writer_nullData_literalMutation3634() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_Writer_nullData_literalMutation3634");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "foo", ((List<?>)(null)), "*");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3308,file,3307,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_Writer_nullData_literalMutation3636() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_Writer_nullData_literalMutation3636");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", ((List<?>)(null)), "foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3308,file,3307,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_4arg_Writer_nullData_remove1239() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_Writer_nullData_remove1239");
//        File file = newFile("lines.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3308,file,3307,file.length());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_4arg_nullSeparator_add1633() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_nullSeparator_add1633");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, null);
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, null);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3311,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3312,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_nullSeparator() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_nullSeparator");
//        Object[] data = new Object[]{ "foo" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, null);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3311,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3312,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_nullSeparator_literalMutation3638() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_nullSeparator_literalMutation3638");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("foo") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, null);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3311,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3312,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_nullSeparator_literalMutation3639() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_nullSeparator_literalMutation3639");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "foo" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, null);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3311,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3312,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_nullSeparator_literalMutation3640() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_nullSeparator_literalMutation3640");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "foo" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, null);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3311,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3312,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_nullSeparator_literalMutation3642() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_nullSeparator_literalMutation3642");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "foo" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, null);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3311,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3312,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_nullSeparator_literalMutation3643() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_nullSeparator_literalMutation3643");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, null);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3311,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3312,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_nullSeparator_literalMutation3644() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_nullSeparator_literalMutation3644");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "foo", list, null);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3311,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3312,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_nullSeparator_literalMutation3646() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_nullSeparator_literalMutation3646");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, null);
//        String expected = (((((((("foo" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3311,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3312,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_nullSeparator_literalMutation3647() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_nullSeparator_literalMutation3647");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, null);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "foo") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3311,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3312,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_nullSeparator_literalMutation3648() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_nullSeparator_literalMutation3648");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, null);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "foo") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3311,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3312,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_nullSeparator_literalMutation3649() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_nullSeparator_literalMutation3649");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, null);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "foo") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3311,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3312,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4arg_nullSeparator_literalMutation3650() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_nullSeparator_literalMutation3650");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list, null);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3311,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3312,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_4arg_nullSeparator_remove1240() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4arg_nullSeparator_remove1240");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3311,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3312,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_3arg_nullSeparator_add1626() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3arg_nullSeparator_add1626");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list);
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3301,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3302,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3arg_nullSeparator() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3arg_nullSeparator");
//        Object[] data = new Object[]{ "foo" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3301,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3302,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3arg_nullSeparator_literalMutation3595() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3arg_nullSeparator_literalMutation3595");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("foo") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3301,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3302,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3arg_nullSeparator_literalMutation3596() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3arg_nullSeparator_literalMutation3596");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "foo" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3301,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3302,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3arg_nullSeparator_literalMutation3597() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3arg_nullSeparator_literalMutation3597");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "foo" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3301,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3302,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3arg_nullSeparator_literalMutation3599() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3arg_nullSeparator_literalMutation3599");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "foo" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3301,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3302,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3arg_nullSeparator_literalMutation3600() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3arg_nullSeparator_literalMutation3600");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3301,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3302,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3arg_nullSeparator_literalMutation3601() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3arg_nullSeparator_literalMutation3601");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "foo", list);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3301,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3302,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3arg_nullSeparator_literalMutation3602() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3arg_nullSeparator_literalMutation3602");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list);
//        String expected = (((((((("foo" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3301,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3302,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3arg_nullSeparator_literalMutation3603() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3arg_nullSeparator_literalMutation3603");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "foo") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3301,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3302,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3arg_nullSeparator_literalMutation3604() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3arg_nullSeparator_literalMutation3604");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "foo") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3301,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3302,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3arg_nullSeparator_literalMutation3605() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3arg_nullSeparator_literalMutation3605");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "foo") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3301,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3302,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3arg_nullSeparator_literalMutation3606() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3arg_nullSeparator_literalMutation3606");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeLines(file, "US-ASCII", list);
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3301,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3302,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_3arg_nullSeparator_remove1233() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3arg_nullSeparator_remove1233");
//        Object[] data = new Object[]{ "hello" , new StringBuffer("world") , "" , "this is" , null , "some text" };
//        List<java.lang.Object> list = java.util.Arrays.asList(data);
//        File file = newFile("lines.txt");
//        String expected = (((((((("hello" + (IOUtils.LINE_SEPARATOR)) + "world") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "this is") + (IOUtils.LINE_SEPARATOR)) + (IOUtils.LINE_SEPARATOR)) + "some text") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file, "US-ASCII");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3301,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3302,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1640() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1640");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3319,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3320,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1641() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1641");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, true);
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3319,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3320,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3319,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3320,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3678() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3678");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3319,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3320,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3679() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3679");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "foo" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3319,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3320,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3680() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3680");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "foo" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3319,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3320,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3683() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3683");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3319,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3320,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3684() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3684");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, true);
//        String expected = ((("foo" + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3319,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3320,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3685() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3685");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "foo") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3319,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3320,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3686() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3686");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "foo") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3319,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3320,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1247() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1247");
//        File file = newFile("lines.txt");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3319,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3320,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1248() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1248");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3319,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3320,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_add1638() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_add1638");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3317,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3318,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_add1639() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_add1639");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, false);
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3317,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3318,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3317,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3318,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3669() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3669");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3317,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3318,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3670() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3670");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "foo" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3317,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3318,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3671() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3671");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "foo" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3317,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3318,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3674() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3674");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, true);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3317,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3318,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3675() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3675");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, false);
//        String expected = (("foo" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3317,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3318,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3676() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3676");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "foo") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3317,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3318,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1245() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1245");
//        File file = newFile("lines.txt");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, null, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3317,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3318,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1246() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1246");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3317,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3318,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1636() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1636");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3315,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3316,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1637() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1637");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, true);
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3315,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3316,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3315,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3316,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3660() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3660");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3315,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3316,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3661() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3661");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "foo" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3315,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3316,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3662() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3662");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "foo" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3315,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3316,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3664() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3664");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3315,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3316,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3665() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3665");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, true);
//        String expected = ((("foo" + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3315,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3316,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3666() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3666");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "foo") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3315,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3316,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3667() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3667");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "foo") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3315,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3316,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1243() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1243");
//        File file = newFile("lines.txt");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3315,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3316,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1244() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1244");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3315,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3316,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_add1634() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_add1634");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3313,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3314,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_add1635() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_add1635");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, false);
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3313,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3314,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3313,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3314,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3652() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3652");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3313,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3314,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3653() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3653");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "foo" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3313,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3314,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3654() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3654");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "foo" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3313,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3314,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3656() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3656");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, true);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3313,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3314,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3657() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3657");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, false);
//        String expected = (("foo" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3313,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3314,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3658() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3658");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "foo") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3313,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3314,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1241() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1241");
//        File file = newFile("lines.txt");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, null, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3313,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3314,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1242() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1242");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3313,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3314,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1624() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1624");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3299,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3300,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1625() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1625");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, true);
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3299,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3300,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3299,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3300,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3586() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3586");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3299,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3300,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3587() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3587");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "foo" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3299,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3300,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3588() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3588");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "foo" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3299,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3300,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3590() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3590");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3299,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3300,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3591() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3591");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, true);
//        String expected = ((("foo" + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3299,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3300,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3592() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3592");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "foo") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3299,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3300,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3593() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3593");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "foo") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3299,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3300,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1231() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1231");
//        File file = newFile("lines.txt");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3299,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3300,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1232() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1232");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3299,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3300,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1622() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1622");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3297,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3298,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1623() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1623");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, false);
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3297,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3298,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3297,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3298,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3578() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3578");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3297,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3298,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3579() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3579");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "foo" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3297,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3298,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3580() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3580");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "foo" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3297,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3298,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3582() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3582");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, true);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3297,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3298,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3583() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3583");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, false);
//        String expected = (("foo" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3297,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3298,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3584() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3584");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "foo") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3297,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3298,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1229() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1229");
//        File file = newFile("lines.txt");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, null, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3297,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3298,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1230() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1230");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3297,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3298,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1629() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1629");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3305,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3306,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1630() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1630");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, true);
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3305,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3306,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3305,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3306,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3615() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3615");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3305,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3306,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3616() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3616");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "foo" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3305,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3306,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3617() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3617");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "foo" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3305,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3306,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3618() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3618");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, false);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3305,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3306,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3619() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3619");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, true);
//        String expected = ((("foo" + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3305,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3306,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3620() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3620");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "foo") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3305,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3306,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3621() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3621");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "foo") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3305,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3306,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1236() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1236");
//        File file = newFile("lines.txt");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, true);
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3305,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3306,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1237() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1237");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        String expected = ((("This line was there before you..." + "my first line") + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3305,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3306,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_add1627() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_add1627");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3303,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3304,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_add1628() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_add1628");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, false);
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3303,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3304,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3303,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3304,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3608() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3608");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3303,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3304,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3609() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3609");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "foo" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3303,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3304,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3610() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3610");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "foo" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3303,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3304,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3611() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3611");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3303,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3304,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3612() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3612");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, false);
//        String expected = (("foo" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3303,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3304,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3613() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3613");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "foo") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3303,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3304,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1234() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1234");
//        File file = newFile("lines.txt");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        org.apache.commons.io.FileUtils.writeLines(file, linesToAppend, false);
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3303,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3304,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1235() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1235");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        List<java.lang.String> linesToAppend = java.util.Arrays.asList(new String[]{ "my first line" , "The second Line" });
//        String expected = (("my first line" + (IOUtils.LINE_SEPARATOR)) + "The second Line") + (IOUtils.LINE_SEPARATOR);
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3303,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3304,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1650() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1650");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3323,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3324,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1651() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1651");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), true);
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3323,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3324,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3323,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3324,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3707() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3707");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3323,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3324,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3708() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3708");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo", ((String)(null)), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3323,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3324,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3710() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3710");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3323,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3324,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3711() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3711");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), true);
//        String expected = "foo" + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3323,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3324,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3712() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3712");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), true);
//        String expected = "This line was there before you..." + "foo";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3323,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3324,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1257() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1257");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3323,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3324,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1258() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1258");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3323,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3324,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1648() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1648");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3321,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3322,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1649() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1649");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), false);
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3321,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3322,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3321,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3322,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3701() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3701");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3321,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3322,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3702() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3702");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo", ((String)(null)), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3321,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3322,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3704() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3704");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), true);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3321,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3322,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3705() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3705");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), false);
//        String expected = "foo";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3321,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3322,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1255() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1255");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3321,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3322,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1256() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1256");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", ((String)(null)), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3321,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3322,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1654() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1654");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3327,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3328,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1655() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1655");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", true);
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3327,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3328,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3327,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3328,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3719() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3719");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3327,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3328,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3720() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3720");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo", true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3327,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3328,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3721() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3721");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", false);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3327,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3328,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3722() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3722");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", true);
//        String expected = "foo" + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3327,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3328,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3723() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3723");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", true);
//        String expected = "This line was there before you..." + "foo";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3327,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3328,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1261() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1261");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3327,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3328,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1262() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1262");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3327,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3328,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1652() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1652");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3325,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3326,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1653() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1653");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", false);
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3325,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3326,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3325,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3326,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3714() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3714");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3325,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3326,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3715() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3715");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo", false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3325,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3326,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3716() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3716");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", true);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3325,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3326,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3717() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3717");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", false);
//        String expected = "foo";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3325,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3326,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1259() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1259");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3325,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3326,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1260() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1260");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "this is brand new data", false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3325,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3326,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1658() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1658");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3331,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3332,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1659() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1659");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), true);
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3331,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3332,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3331,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3332,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3731() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3731");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3331,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3332,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3732() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3732");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "foo", ((String)(null)), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3331,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3332,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3734() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3734");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), false);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3331,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3332,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3735() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3735");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), true);
//        String expected = "foo" + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3331,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3332,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3736() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3736");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), true);
//        String expected = "This line was there before you..." + "foo";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3331,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3332,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1265() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1265");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3331,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3332,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1266() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1266");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3331,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3332,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1656() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1656");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3329,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3330,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1657() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1657");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), false);
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3329,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3330,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3329,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3330,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3725() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3725");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3329,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3330,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3726() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3726");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "foo", ((String)(null)), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3329,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3330,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3728() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3728");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), true);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3329,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3330,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3729() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3729");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), false);
//        String expected = "foo";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3329,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3330,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1263() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1263");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", ((String)(null)), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3329,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3330,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1264() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1264");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3329,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3330,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1662() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1662");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3335,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3336,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1663() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1663");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", true);
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3335,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3336,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3335,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3336,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3743() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3743");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3335,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3336,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3744() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3744");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "foo", true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3335,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3336,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3745() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3745");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3335,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3336,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3746() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3746");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", true);
//        String expected = "foo" + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3335,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3336,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3747() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3747");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", true);
//        String expected = "This line was there before you..." + "foo";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3335,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3336,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1269() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1269");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3335,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3336,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1270() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1270");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3335,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3336,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1660() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1660");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3333,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3334,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1661() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1661");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", false);
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3333,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3334,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3333,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3334,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3738() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3738");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3333,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3334,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3739() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3739");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "foo", false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3333,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3334,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3740() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3740");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3333,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3334,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3741() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3741");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", false);
//        String expected = "foo";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3333,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3334,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1267() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1267");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.write(file, "this is brand new data", false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3333,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3334,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1268() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1268");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3333,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3334,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1616() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1616");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3295,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3296,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1617() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_add1617");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), true);
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3295,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3296,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3295,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3296,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3563() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3563");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3295,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3296,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3564() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3564");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "foo".getBytes(), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3295,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3296,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3565() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3565");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), false);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3295,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3296,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3566() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3566");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), true);
//        String expected = "foo" + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3295,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3296,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3567() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_literalMutation3567");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), true);
//        String expected = "This line was there before you..." + "foo";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3295,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3296,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1223() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1223");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), true);
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3295,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3296,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1224() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines_remove1224");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        String expected = "This line was there before you..." + "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3295,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3296,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1614() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1614");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3293,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3294,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1615() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_add1615");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), false);
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3293,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3294,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines");
//        File file = newFile("foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3293,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3294,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3558() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3558");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "foo");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3293,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3294,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3559() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3559");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "foo".getBytes(), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3293,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3294,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3560() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3560");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3293,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3294,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3561() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_literalMutation3561");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), false);
//        String expected = "foo";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3293,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3294,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1221() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1221");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), false);
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3293,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3294,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1222() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines_remove1222");
//        File file = newFile("lines.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, "This line was there before you...");
//        String expected = "this is brand new data";
//        String actual = org.apache.commons.io.FileUtils.readFileToString(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3293,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3294,actual);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumCRC32_add1354() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumCRC32_add1354");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
//        long expectedValue = expectedChecksum.getValue();
//        long resultValue = org.apache.commons.io.FileUtils.checksumCRC32(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2791,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2792,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumCRC32_add1355() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumCRC32_add1355");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
//        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
//        long expectedValue = expectedChecksum.getValue();
//        long resultValue = org.apache.commons.io.FileUtils.checksumCRC32(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2791,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2792,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumCRC32() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumCRC32");
//        String text = "foo";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
//        long expectedValue = expectedChecksum.getValue();
//        long resultValue = org.apache.commons.io.FileUtils.checksumCRC32(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2791,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2792,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumCRC32_literalMutation3183() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumCRC32_literalMutation3183");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
//        long expectedValue = expectedChecksum.getValue();
//        long resultValue = org.apache.commons.io.FileUtils.checksumCRC32(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2791,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2792,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumCRC32_literalMutation3184() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumCRC32_literalMutation3184");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "foo");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
//        long expectedValue = expectedChecksum.getValue();
//        long resultValue = org.apache.commons.io.FileUtils.checksumCRC32(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2791,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2792,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumCRC32_literalMutation3185() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumCRC32_literalMutation3185");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text.getBytes("foo"), 0, text.length());
//        long expectedValue = expectedChecksum.getValue();
//        long resultValue = org.apache.commons.io.FileUtils.checksumCRC32(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2791,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2792,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumCRC32_literalMutation3186() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumCRC32_literalMutation3186");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text.getBytes("US-ASCII"), 1, text.length());
//        long expectedValue = expectedChecksum.getValue();
//        long resultValue = org.apache.commons.io.FileUtils.checksumCRC32(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2791,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2792,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumCRC32_remove1033() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumCRC32_remove1033");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
//        long expectedValue = expectedChecksum.getValue();
//        long resultValue = org.apache.commons.io.FileUtils.checksumCRC32(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2791,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2792,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumCRC32_remove1034() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumCRC32_remove1034");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        long expectedValue = expectedChecksum.getValue();
//        long resultValue = org.apache.commons.io.FileUtils.checksumCRC32(file);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2791,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2792,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksum_add1352() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksum_add1352");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        Checksum resultChecksum = org.apache.commons.io.FileUtils.checksum(file, testChecksum);
//        long resultValue = resultChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2795,testChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2796,resultChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2797,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2798,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksum_add1353() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksum_add1353");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
//        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        Checksum resultChecksum = org.apache.commons.io.FileUtils.checksum(file, testChecksum);
//        long resultValue = resultChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2795,testChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2796,resultChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2797,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2798,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksum() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksum");
//        String text = "foo";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        Checksum resultChecksum = org.apache.commons.io.FileUtils.checksum(file, testChecksum);
//        long resultValue = resultChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2795,testChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2796,resultChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2797,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2798,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksum_literalMutation3178() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksum_literalMutation3178");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        Checksum resultChecksum = org.apache.commons.io.FileUtils.checksum(file, testChecksum);
//        long resultValue = resultChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2795,testChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2796,resultChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2797,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2798,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksum_literalMutation3179() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksum_literalMutation3179");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "foo");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        Checksum resultChecksum = org.apache.commons.io.FileUtils.checksum(file, testChecksum);
//        long resultValue = resultChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2795,testChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2796,resultChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2797,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2798,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksum_literalMutation3180() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksum_literalMutation3180");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text.getBytes("foo"), 0, text.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        Checksum resultChecksum = org.apache.commons.io.FileUtils.checksum(file, testChecksum);
//        long resultValue = resultChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2795,testChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2796,resultChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2797,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2798,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksum_literalMutation3181() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksum_literalMutation3181");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text.getBytes("US-ASCII"), -1, text.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        Checksum resultChecksum = org.apache.commons.io.FileUtils.checksum(file, testChecksum);
//        long resultValue = resultChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2795,testChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2796,resultChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2797,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2798,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksum_remove1031() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksum_remove1031");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        Checksum resultChecksum = org.apache.commons.io.FileUtils.checksum(file, testChecksum);
//        long resultValue = resultChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2795,testChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2796,resultChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2797,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2798,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksum_remove1032() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksum_remove1032");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        Checksum resultChecksum = org.apache.commons.io.FileUtils.checksum(file, testChecksum);
//        long resultValue = resultChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2795,testChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2796,resultChecksum);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2797,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2798,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumOnNullFile() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumOnNullFile");
//        try {
//            org.apache.commons.io.FileUtils.checksum(((File)(null)), new CRC32());
//            org.apache.commons.io.FileUtils.checksum(((File)(null)), new CRC32());
//        } catch (NullPointerException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumOnNullChecksum_add1363() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumOnNullChecksum_add1363");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        try {
//            org.apache.commons.io.FileUtils.checksum(file, ((Checksum)(null)));
//        } catch (NullPointerException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumOnNullChecksum_add1364() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumOnNullChecksum_add1364");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        try {
//            org.apache.commons.io.FileUtils.checksum(file, ((Checksum)(null)));
//            org.apache.commons.io.FileUtils.checksum(file, ((Checksum)(null)));
//        } catch (NullPointerException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumOnNullChecksum() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumOnNullChecksum");
//        String text = "foo";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        try {
//            org.apache.commons.io.FileUtils.checksum(file, ((Checksum)(null)));
//        } catch (NullPointerException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumOnNullChecksum_literalMutation3199() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumOnNullChecksum_literalMutation3199");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "US-ASCII");
//        try {
//            org.apache.commons.io.FileUtils.checksum(file, ((Checksum)(null)));
//        } catch (NullPointerException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumOnNullChecksum_literalMutation3200() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumOnNullChecksum_literalMutation3200");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file, text, "foo");
//        try {
//            org.apache.commons.io.FileUtils.checksum(file, ((Checksum)(null)));
//        } catch (NullPointerException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumOnNullChecksum_remove1041() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumOnNullChecksum_remove1041");
//        String text = "Imagination is more important than knowledge - Einstein";
//        File file = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        try {
//            org.apache.commons.io.FileUtils.checksum(file, ((Checksum)(null)));
//        } catch (NullPointerException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumOnDirectory_add1362() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumOnDirectory_add1362");
//        try {
//            org.apache.commons.io.FileUtils.checksum(new File("."), new CRC32());
//            org.apache.commons.io.FileUtils.checksum(new File("."), new CRC32());
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumOnDirectory() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumOnDirectory");
//        try {
//            org.apache.commons.io.FileUtils.checksum(new File("foo"), new CRC32());
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumDouble_add1356() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_add1356");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumDouble_add1357() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_add1357");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumDouble_add1358() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_add1358");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumDouble_add1359() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_add1359");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumDouble_add1360() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_add1360");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumDouble_add1361() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_add1361");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumDouble() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble");
//        String text1 = "foo";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumDouble_literalMutation3188() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_literalMutation3188");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumDouble_literalMutation3189() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_literalMutation3189");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "foo");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumDouble_literalMutation3190() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_literalMutation3190");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "foo";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumDouble_literalMutation3191() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_literalMutation3191");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumDouble_literalMutation3192() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_literalMutation3192");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "foo");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumDouble_literalMutation3193() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_literalMutation3193");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("foo"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumDouble_literalMutation3194() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_literalMutation3194");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), -1, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumDouble_literalMutation3195() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_literalMutation3195");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("foo"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testChecksumDouble_literalMutation3196() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_literalMutation3196");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 1, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumDouble_remove1035() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_remove1035");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumDouble_remove1036() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_remove1036");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumDouble_remove1037() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_remove1037");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumDouble_remove1038() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_remove1038");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file1, testChecksum);
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumDouble_remove1039() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_remove1039");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testChecksumDouble_remove1040() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testChecksumDouble_remove1040");
//        String text1 = "Imagination is more important than knowledge - Einstein";
//        File file1 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file1, text1, "US-ASCII");
//        String text2 = "To be or not to be - Shakespeare";
//        File file2 = new File(FileBasedTestCase.getTestDirectory() , "checksum-test2.txt");
//        org.apache.commons.io.FileUtils.writeStringToFile(file2, text2, "US-ASCII");
//        Checksum expectedChecksum = new CRC32();
//        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
//        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
//        long expectedValue = expectedChecksum.getValue();
//        Checksum testChecksum = new CRC32();
//        org.apache.commons.io.FileUtils.checksum(file2, testChecksum);
//        long resultValue = testChecksum.getValue();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2793,expectedValue);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),2794,resultValue);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDeleteQuietlyForNull() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyForNull");
//        try {
//            org.apache.commons.io.FileUtils.deleteQuietly(null);
//            org.apache.commons.io.FileUtils.deleteQuietly(null);
//        } catch (Exception ex) {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3026,ex,3025,ex.getMessage());
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDeleteQuietlyDir_add1453() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyDir_add1453");
//        File testDirectory = new File(FileBasedTestCase.getTestDirectory() , "testDeleteQuietlyDir");
//        File testFile = new File(testDirectory , "testDeleteQuietlyFile");
//        testDirectory.mkdirs();
//        testDirectory.mkdirs();
//        createFile(testFile, 0);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3014,testDirectory,3013,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3016,testFile,3015,testFile.exists());
//        org.apache.commons.io.FileUtils.deleteQuietly(testDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3018,testDirectory,3017,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3020,testFile,3019,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDeleteQuietlyDir_add1454() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyDir_add1454");
//        File testDirectory = new File(FileBasedTestCase.getTestDirectory() , "testDeleteQuietlyDir");
//        File testFile = new File(testDirectory , "testDeleteQuietlyFile");
//        testDirectory.mkdirs();
//        createFile(testFile, 0);
//        createFile(testFile, 0);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3014,testDirectory,3013,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3016,testFile,3015,testFile.exists());
//        org.apache.commons.io.FileUtils.deleteQuietly(testDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3018,testDirectory,3017,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3020,testFile,3019,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDeleteQuietlyDir_add1455() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyDir_add1455");
//        File testDirectory = new File(FileBasedTestCase.getTestDirectory() , "testDeleteQuietlyDir");
//        File testFile = new File(testDirectory , "testDeleteQuietlyFile");
//        testDirectory.mkdirs();
//        createFile(testFile, 0);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3014,testDirectory,3013,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3016,testFile,3015,testFile.exists());
//        org.apache.commons.io.FileUtils.deleteQuietly(testDirectory);
//        org.apache.commons.io.FileUtils.deleteQuietly(testDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3018,testDirectory,3017,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3020,testFile,3019,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDeleteQuietlyDir() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyDir");
//        File testDirectory = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File testFile = new File(testDirectory , "testDeleteQuietlyFile");
//        testDirectory.mkdirs();
//        createFile(testFile, 0);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3014,testDirectory,3013,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3016,testFile,3015,testFile.exists());
//        org.apache.commons.io.FileUtils.deleteQuietly(testDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3018,testDirectory,3017,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3020,testFile,3019,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDeleteQuietlyDir_literalMutation3298() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyDir_literalMutation3298");
//        File testDirectory = new File(FileBasedTestCase.getTestDirectory() , "testDeleteQuietlyDir");
//        File testFile = new File(testDirectory , "foo");
//        testDirectory.mkdirs();
//        createFile(testFile, 0);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3014,testDirectory,3013,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3016,testFile,3015,testFile.exists());
//        org.apache.commons.io.FileUtils.deleteQuietly(testDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3018,testDirectory,3017,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3020,testFile,3019,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDeleteQuietlyDir_literalMutation3299() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyDir_literalMutation3299");
//        File testDirectory = new File(FileBasedTestCase.getTestDirectory() , "testDeleteQuietlyDir");
//        File testFile = new File(testDirectory , "testDeleteQuietlyFile");
//        testDirectory.mkdirs();
//        createFile(testFile, -1);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3014,testDirectory,3013,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3016,testFile,3015,testFile.exists());
//        org.apache.commons.io.FileUtils.deleteQuietly(testDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3018,testDirectory,3017,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3020,testFile,3019,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDeleteQuietlyDir_remove1116() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyDir_remove1116");
//        File testDirectory = new File(FileBasedTestCase.getTestDirectory() , "testDeleteQuietlyDir");
//        File testFile = new File(testDirectory , "testDeleteQuietlyFile");
//        createFile(testFile, 0);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3014,testDirectory,3013,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3016,testFile,3015,testFile.exists());
//        org.apache.commons.io.FileUtils.deleteQuietly(testDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3018,testDirectory,3017,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3020,testFile,3019,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDeleteQuietlyDir_remove1117() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyDir_remove1117");
//        File testDirectory = new File(FileBasedTestCase.getTestDirectory() , "testDeleteQuietlyDir");
//        File testFile = new File(testDirectory , "testDeleteQuietlyFile");
//        testDirectory.mkdirs();
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3014,testDirectory,3013,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3016,testFile,3015,testFile.exists());
//        org.apache.commons.io.FileUtils.deleteQuietly(testDirectory);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3018,testDirectory,3017,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3020,testFile,3019,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDeleteQuietlyDir_remove1118() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyDir_remove1118");
//        File testDirectory = new File(FileBasedTestCase.getTestDirectory() , "testDeleteQuietlyDir");
//        File testFile = new File(testDirectory , "testDeleteQuietlyFile");
//        testDirectory.mkdirs();
//        createFile(testFile, 0);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3014,testDirectory,3013,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3016,testFile,3015,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3018,testDirectory,3017,testDirectory.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3020,testFile,3019,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDeleteQuietlyFile_add1456() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyFile_add1456");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testDeleteQuietlyFile");
//        createFile(testFile, 0);
//        createFile(testFile, 0);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3022,testFile,3021,testFile.exists());
//        org.apache.commons.io.FileUtils.deleteQuietly(testFile);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3024,testFile,3023,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDeleteQuietlyFile_add1457() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyFile_add1457");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testDeleteQuietlyFile");
//        createFile(testFile, 0);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3022,testFile,3021,testFile.exists());
//        org.apache.commons.io.FileUtils.deleteQuietly(testFile);
//        org.apache.commons.io.FileUtils.deleteQuietly(testFile);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3024,testFile,3023,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDeleteQuietlyFile() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyFile");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createFile(testFile, 0);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3022,testFile,3021,testFile.exists());
//        org.apache.commons.io.FileUtils.deleteQuietly(testFile);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3024,testFile,3023,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDeleteQuietlyFile_literalMutation3301() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyFile_literalMutation3301");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testDeleteQuietlyFile");
//        createFile(testFile, 1);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3022,testFile,3021,testFile.exists());
//        org.apache.commons.io.FileUtils.deleteQuietly(testFile);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3024,testFile,3023,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDeleteQuietlyFile_remove1119() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyFile_remove1119");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testDeleteQuietlyFile");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3022,testFile,3021,testFile.exists());
//        org.apache.commons.io.FileUtils.deleteQuietly(testFile);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3024,testFile,3023,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDeleteQuietlyFile_remove1120() throws IOException {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyFile_remove1120");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testDeleteQuietlyFile");
//        createFile(testFile, 0);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3022,testFile,3021,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3024,testFile,3023,testFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDeleteQuietlyNonExistent_add1459() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyNonExistent_add1459");
//        File testFile = new File("testDeleteQuietlyNonExistent");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3028,testFile,3027,testFile.exists());
//        try {
//            org.apache.commons.io.FileUtils.deleteQuietly(testFile);
//            org.apache.commons.io.FileUtils.deleteQuietly(testFile);
//        } catch (Exception ex) {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3030,ex,3029,ex.getMessage());
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDeleteQuietlyNonExistent() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeleteQuietlyNonExistent");
//        File testFile = new File("foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3028,testFile,3027,testFile.exists());
//        try {
//            org.apache.commons.io.FileUtils.deleteQuietly(testFile);
//        } catch (Exception ex) {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3030,ex,3029,ex.getMessage());
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_Rename_add1558() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Rename_add1558");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "move1.txt");
//        org.apache.commons.io.FileUtils.moveFile(testFile1, destination);
//        org.apache.commons.io.FileUtils.moveFile(testFile1, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3192,destination,3191,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3193,!(testFile1.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFile_Rename() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Rename");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        org.apache.commons.io.FileUtils.moveFile(testFile1, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3192,destination,3191,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3193,!(testFile1.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_Rename_remove1179() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Rename_remove1179");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "move1.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3192,destination,3191,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3193,!(testFile1.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_CopyDelete_add1547() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_CopyDelete_add1547");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "move2.txt");
//        File src = new File(testFile1.getAbsolutePath()) {
//            @Override
//            public boolean renameTo(File f) {
//                return false;
//            }
//        };
//        org.apache.commons.io.FileUtils.moveFile(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3189,destination,3188,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3190,!(src.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_CopyDelete_add1548() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_CopyDelete_add1548");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "move2.txt");
//        File src = new File(testFile1.getAbsolutePath()) {
//            @Override
//            public boolean renameTo(File f) {
//                return false;
//            }
//        };
//        org.apache.commons.io.FileUtils.moveFile(src, destination);
//        org.apache.commons.io.FileUtils.moveFile(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3189,destination,3188,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3190,!(src.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFile_CopyDelete() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_CopyDelete");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File src = new File(testFile1.getAbsolutePath()) {
//            @Override
//            public boolean renameTo(File f) {
//                return false;
//            }
//        };
//        org.apache.commons.io.FileUtils.moveFile(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3189,destination,3188,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3190,!(src.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFile_CopyDelete_literalMutation3460() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_CopyDelete_literalMutation3460");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "move2.txt");
//        File src = new File(testFile1.getAbsolutePath()) {
//            @Override
//            public boolean renameTo(File f) {
//                return false;
//            }
//        };
//        org.apache.commons.io.FileUtils.moveFile(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3189,destination,3188,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3190,!(src.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_CopyDelete_remove1174() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_CopyDelete_remove1174");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "move2.txt");
//        File src = new File(testFile1.getAbsolutePath()) {
//            @Override
//            public boolean renameTo(File f) {
//                return false;
//            }
//        };
//        org.apache.commons.io.FileUtils.moveFile(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3189,destination,3188,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3190,!(src.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_CopyDelete_remove1175() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_CopyDelete_remove1175");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "move2.txt");
//        File src = new File(testFile1.getAbsolutePath()) {
//            @Override
//            public boolean renameTo(File f) {
//                return false;
//            }
//        };
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3189,destination,3188,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3190,!(src.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_CopyDelete_Failed_add1549() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_CopyDelete_Failed_add1549");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "move3.txt");
//        File src = new File(testFile1.getAbsolutePath()) {
//            @Override
//            public boolean renameTo(File f) {
//                return false;
//            }
//
//            @Override
//            public boolean delete() {
//                return false;
//            }
//        };
//        try {
//            org.apache.commons.io.FileUtils.moveFile(src, destination);
//        } catch (IOException e) {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3185,!(destination.exists()));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3187,src,3186,src.exists());
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_CopyDelete_Failed_add1550() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_CopyDelete_Failed_add1550");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "move3.txt");
//        File src = new File(testFile1.getAbsolutePath()) {
//            @Override
//            public boolean renameTo(File f) {
//                return false;
//            }
//
//            @Override
//            public boolean delete() {
//                return false;
//            }
//        };
//        try {
//            org.apache.commons.io.FileUtils.moveFile(src, destination);
//            org.apache.commons.io.FileUtils.moveFile(src, destination);
//        } catch (IOException e) {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3185,!(destination.exists()));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3187,src,3186,src.exists());
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFile_CopyDelete_Failed() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_CopyDelete_Failed");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File src = new File(testFile1.getAbsolutePath()) {
//            @Override
//            public boolean renameTo(File f) {
//                return false;
//            }
//
//            @Override
//            public boolean delete() {
//                return false;
//            }
//        };
//        try {
//            org.apache.commons.io.FileUtils.moveFile(src, destination);
//        } catch (IOException e) {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3185,!(destination.exists()));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3187,src,3186,src.exists());
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFile_CopyDelete_Failed_literalMutation3462() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_CopyDelete_Failed_literalMutation3462");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "move3.txt");
//        File src = new File(testFile1.getAbsolutePath()) {
//            @Override
//            public boolean renameTo(File f) {
//                return false;
//            }
//
//            @Override
//            public boolean delete() {
//                return true;
//            }
//        };
//        try {
//            org.apache.commons.io.FileUtils.moveFile(src, destination);
//        } catch (IOException e) {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3185,!(destination.exists()));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3187,src,3186,src.exists());
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFile_CopyDelete_Failed_literalMutation3463() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_CopyDelete_Failed_literalMutation3463");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "move3.txt");
//        File src = new File(testFile1.getAbsolutePath()) {
//            @Override
//            public boolean renameTo(File f) {
//                return true;
//            }
//
//            @Override
//            public boolean delete() {
//                return false;
//            }
//        };
//        try {
//            org.apache.commons.io.FileUtils.moveFile(src, destination);
//        } catch (IOException e) {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3185,!(destination.exists()));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3187,src,3186,src.exists());
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_CopyDelete_Failed_remove1176() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_CopyDelete_Failed_remove1176");
//        File destination = new File(FileBasedTestCase.getTestDirectory() , "move3.txt");
//        File src = new File(testFile1.getAbsolutePath()) {
//            @Override
//            public boolean renameTo(File f) {
//                return false;
//            }
//
//            @Override
//            public boolean delete() {
//                return false;
//            }
//        };
//        try {
//            org.apache.commons.io.FileUtils.moveFile(src, destination);
//        } catch (IOException e) {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3185,!(destination.exists()));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3187,src,3186,src.exists());
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_Errors_add1551() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_add1551");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testSourceFile, 0);
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_Errors_add1552() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_add1552");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testSourceFile, 0);
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_Errors_add1553() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_add1553");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testSourceFile, 0);
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_Errors_add1554() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_add1554");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testSourceFile, 0);
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_Errors_add1555() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_add1555");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testSourceFile, 0);
//        createFile(testSourceFile, 0);
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_Errors_add1556() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_add1556");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testSourceFile, 0);
//        createFile(testDestFile, 0);
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_Errors_add1557() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_add1557");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testSourceFile, 0);
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFile_Errors() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testSourceFile, 0);
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFile_Errors_literalMutation3466() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_literalMutation3466");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testSourceFile, 0);
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFile_Errors_literalMutation3468() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_literalMutation3468");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testSourceFile, 0);
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFile_Errors_literalMutation3469() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_literalMutation3469");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testSourceFile, 0);
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFile_Errors_literalMutation3470() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_literalMutation3470");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testSourceFile, 0);
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFile_Errors_literalMutation3471() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_literalMutation3471");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testSourceFile, 0);
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFile_Errors_literalMutation3472() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_literalMutation3472");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createFile(testSourceFile, 0);
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFile_Errors_literalMutation3473() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_literalMutation3473");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testSourceFile, 1);
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFile_Errors_literalMutation3474() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_literalMutation3474");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testSourceFile, 0);
//        createFile(testDestFile, 1);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_Errors_remove1177() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_remove1177");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFile_Errors_remove1178() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFile_Errors_remove1178");
//        try {
//            org.apache.commons.io.FileUtils.moveFile(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFile(FileBasedTestCase.getTestDirectory(), new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSourceFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileSource");
//        createFile(testDestFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFile(testSourceFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFileToDirectory_add1540() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_add1540");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "moveFileDestDir");
//        File movedFile = new File(destDir , testFile1.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3179,destDir,3178,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3181,movedFile,3180,movedFile.exists());
//        org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, destDir, true);
//        org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3183,movedFile,3182,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3184,!(testFile1.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFileToDirectory() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File movedFile = new File(destDir , testFile1.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3179,destDir,3178,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3181,movedFile,3180,movedFile.exists());
//        org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3183,movedFile,3182,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3184,!(testFile1.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFileToDirectory_literalMutation3445() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_literalMutation3445");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "moveFileDestDir");
//        File movedFile = new File(destDir , testFile1.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3179,destDir,3178,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3181,movedFile,3180,movedFile.exists());
//        org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, destDir, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3183,movedFile,3182,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3184,!(testFile1.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFileToDirectory_remove1171() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_remove1171");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "moveFileDestDir");
//        File movedFile = new File(destDir , testFile1.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3179,destDir,3178,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3181,movedFile,3180,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3183,movedFile,3182,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3184,!(testFile1.exists()));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFileToDirectory_Errors_add1541() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_add1541");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFileToDirectory_Errors_add1542() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_add1542");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFileToDirectory_Errors_add1543() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_add1543");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFileToDirectory_Errors_add1544() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_add1544");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFileToDirectory_Errors_add1545() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_add1545");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFileToDirectory_Errors_add1546() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_add1546");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFileToDirectory_Errors() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFileToDirectory_Errors_literalMutation3448() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_literalMutation3448");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), false);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFileToDirectory_Errors_literalMutation3449() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_literalMutation3449");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFileToDirectory_Errors_literalMutation3451() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_literalMutation3451");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFileToDirectory_Errors_literalMutation3452() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_literalMutation3452");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFileToDirectory_Errors_literalMutation3453() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_literalMutation3453");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFileToDirectory_Errors_literalMutation3454() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_literalMutation3454");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, -1);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFileToDirectory_Errors_literalMutation3455() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_literalMutation3455");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, -1);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFileToDirectory_Errors_literalMutation3456() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_literalMutation3456");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFileToDirectory_Errors_literalMutation3457() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_literalMutation3457");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveFileToDirectory_Errors_literalMutation3458() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_literalMutation3458");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, true);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFileToDirectory_Errors_remove1172() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_remove1172");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveFileToDirectory_Errors_remove1173() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveFileToDirectory_Errors_remove1173");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Rename_add1536() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Rename_add1536");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3172,destination,3171,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3173,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3175,movedDir,3174,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3177,movedFile,3176,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Rename_add1537() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Rename_add1537");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3172,destination,3171,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3173,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3175,movedDir,3174,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3177,movedFile,3176,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Rename_add1538() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Rename_add1538");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3172,destination,3171,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3173,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3175,movedDir,3174,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3177,movedFile,3176,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Rename_add1539() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Rename_add1539");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3172,destination,3171,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3173,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3175,movedDir,3174,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3177,movedFile,3176,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_Rename() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Rename");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "foo");
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3172,destination,3171,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3173,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3175,movedDir,3174,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3177,movedFile,3176,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_Rename_literalMutation3440() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Rename_literalMutation3440");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3172,destination,3171,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3173,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3175,movedDir,3174,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3177,movedFile,3176,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_Rename_literalMutation3441() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Rename_literalMutation3441");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "foo");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3172,destination,3171,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3173,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3175,movedDir,3174,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3177,movedFile,3176,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_Rename_literalMutation3442() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Rename_literalMutation3442");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 1);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3172,destination,3171,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3173,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3175,movedDir,3174,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3177,movedFile,3176,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_Rename_literalMutation3443() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Rename_literalMutation3443");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "foo");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3172,destination,3171,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3173,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3175,movedDir,3174,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3177,movedFile,3176,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Rename_remove1167() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Rename_remove1167");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3172,destination,3171,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3173,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3175,movedDir,3174,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3177,movedFile,3176,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Rename_remove1168() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Rename_remove1168");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3172,destination,3171,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3173,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3175,movedDir,3174,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3177,movedFile,3176,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Rename_remove1169() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Rename_remove1169");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3172,destination,3171,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3173,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3175,movedDir,3174,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3177,movedFile,3176,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Rename_remove1170() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Rename_remove1170");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3172,destination,3171,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3173,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3175,movedDir,3174,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3177,movedFile,3176,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_CopyDelete_add1523() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_CopyDelete_add1523");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir, "testMoveDirectory2Source") {
//            @Override
//            public boolean renameTo(File dest) {
//                return false;
//            }
//        };
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3165,destination,3164,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3166,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3168,movedDir,3167,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3170,movedFile,3169,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_CopyDelete_add1524() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_CopyDelete_add1524");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir, "testMoveDirectory2Source") {
//            @Override
//            public boolean renameTo(File dest) {
//                return false;
//            }
//        };
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3165,destination,3164,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3166,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3168,movedDir,3167,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3170,movedFile,3169,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_CopyDelete_add1525() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_CopyDelete_add1525");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir, "testMoveDirectory2Source") {
//            @Override
//            public boolean renameTo(File dest) {
//                return false;
//            }
//        };
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3165,destination,3164,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3166,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3168,movedDir,3167,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3170,movedFile,3169,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_CopyDelete_add1526() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_CopyDelete_add1526");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir, "testMoveDirectory2Source") {
//            @Override
//            public boolean renameTo(File dest) {
//                return false;
//            }
//        };
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3165,destination,3164,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3166,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3168,movedDir,3167,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3170,movedFile,3169,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_CopyDelete_add1527() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_CopyDelete_add1527");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir, "testMoveDirectory2Source") {
//            @Override
//            public boolean renameTo(File dest) {
//                return false;
//            }
//        };
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3165,destination,3164,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3166,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3168,movedDir,3167,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3170,movedFile,3169,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_CopyDelete() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_CopyDelete");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir, "foo") {
//            @Override
//            public boolean renameTo(File dest) {
//                return false;
//            }
//        };
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3165,destination,3164,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3166,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3168,movedDir,3167,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3170,movedFile,3169,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_CopyDelete_literalMutation3423() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_CopyDelete_literalMutation3423");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir, "testMoveDirectory2Source") {
//            @Override
//            public boolean renameTo(File dest) {
//                return false;
//            }
//        };
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3165,destination,3164,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3166,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3168,movedDir,3167,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3170,movedFile,3169,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_CopyDelete_literalMutation3424() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_CopyDelete_literalMutation3424");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir, "testMoveDirectory2Source") {
//            @Override
//            public boolean renameTo(File dest) {
//                return false;
//            }
//        };
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3165,destination,3164,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3166,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3168,movedDir,3167,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3170,movedFile,3169,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_CopyDelete_literalMutation3425() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_CopyDelete_literalMutation3425");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir, "testMoveDirectory2Source") {
//            @Override
//            public boolean renameTo(File dest) {
//                return false;
//            }
//        };
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "foo");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3165,destination,3164,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3166,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3168,movedDir,3167,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3170,movedFile,3169,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_CopyDelete_literalMutation3426() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_CopyDelete_literalMutation3426");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir, "testMoveDirectory2Source") {
//            @Override
//            public boolean renameTo(File dest) {
//                return false;
//            }
//        };
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, -1);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3165,destination,3164,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3166,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3168,movedDir,3167,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3170,movedFile,3169,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_CopyDelete_literalMutation3427() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_CopyDelete_literalMutation3427");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir, "testMoveDirectory2Source") {
//            @Override
//            public boolean renameTo(File dest) {
//                return false;
//            }
//        };
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "foo");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3165,destination,3164,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3166,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3168,movedDir,3167,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3170,movedFile,3169,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_CopyDelete_remove1159() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_CopyDelete_remove1159");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir, "testMoveDirectory2Source") {
//            @Override
//            public boolean renameTo(File dest) {
//                return false;
//            }
//        };
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3165,destination,3164,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3166,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3168,movedDir,3167,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3170,movedFile,3169,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_CopyDelete_remove1160() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_CopyDelete_remove1160");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir, "testMoveDirectory2Source") {
//            @Override
//            public boolean renameTo(File dest) {
//                return false;
//            }
//        };
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3165,destination,3164,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3166,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3168,movedDir,3167,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3170,movedFile,3169,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_CopyDelete_remove1161() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_CopyDelete_remove1161");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir, "testMoveDirectory2Source") {
//            @Override
//            public boolean renameTo(File dest) {
//                return false;
//            }
//        };
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3165,destination,3164,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3166,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3168,movedDir,3167,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3170,movedFile,3169,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_CopyDelete_remove1162() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_CopyDelete_remove1162");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir, "testMoveDirectory2Source") {
//            @Override
//            public boolean renameTo(File dest) {
//                return false;
//            }
//        };
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.moveDirectory(src, destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3165,destination,3164,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3166,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3168,movedDir,3167,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3170,movedFile,3169,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_CopyDelete_remove1163() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_CopyDelete_remove1163");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir, "testMoveDirectory2Source") {
//            @Override
//            public boolean renameTo(File dest) {
//                return false;
//            }
//        };
//        File testDir = new File(src , "foo");
//        File testFile = new File(testDir , "bar");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File destination = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destination);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3165,destination,3164,destination.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3166,!(src.exists()));
//        File movedDir = new File(destination , testDir.getName());
//        File movedFile = new File(movedDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3168,movedDir,3167,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3170,movedFile,3169,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Errors_add1528() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_add1528");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Errors_add1529() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_add1529");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Errors_add1530() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_add1530");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Errors_add1531() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_add1531");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Errors_add1532() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_add1532");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Errors_add1533() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_add1533");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Errors_add1534() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_add1534");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Errors_add1535() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_add1535");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_Errors() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_Errors_literalMutation3430() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_literalMutation3430");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_Errors_literalMutation3432() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_literalMutation3432");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_Errors_literalMutation3433() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_literalMutation3433");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_Errors_literalMutation3434() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_literalMutation3434");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_Errors_literalMutation3435() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_literalMutation3435");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 1);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_Errors_literalMutation3436() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_literalMutation3436");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_Errors_literalMutation3437() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_literalMutation3437");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectory_Errors_literalMutation3438() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_literalMutation3438");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Errors_remove1164() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_remove1164");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testSrcFile.mkdir();
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Errors_remove1165() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_remove1165");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectory_Errors_remove1166() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectory_Errors_remove1166");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(null, new File("foo"));
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("foo"), null);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
//        } catch (FileNotFoundException e) {
//        }
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryFile");
//        createFile(testFile, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testFile, new File("foo"));
//        } catch (IOException e) {
//        }
//        File testSrcFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectorySource");
//        File testDestFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveDirectoryDest");
//        testDestFile.mkdir();
//        try {
//            org.apache.commons.io.FileUtils.moveDirectory(testSrcFile, testDestFile);
//        } catch (FileExistsException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectoryToDirectory_add1513() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_add1513");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testChildDir = new File(src , "foo");
//        File testFile = new File(testChildDir , "bar");
//        testChildDir.mkdirs();
//        testChildDir.mkdirs();
//        createFile(testFile, 0);
//        File destDir = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3154,destDir,3153,destDir.exists());
//        org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3156,destDir,3155,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3157,!(src.exists()));
//        File movedDir = new File(destDir , src.getName());
//        File movedChildDir = new File(movedDir , testChildDir.getName());
//        File movedFile = new File(movedChildDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3159,movedDir,3158,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3161,movedChildDir,3160,movedChildDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3163,movedFile,3162,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectoryToDirectory_add1514() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_add1514");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testChildDir = new File(src , "foo");
//        File testFile = new File(testChildDir , "bar");
//        testChildDir.mkdirs();
//        createFile(testFile, 0);
//        createFile(testFile, 0);
//        File destDir = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3154,destDir,3153,destDir.exists());
//        org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3156,destDir,3155,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3157,!(src.exists()));
//        File movedDir = new File(destDir , src.getName());
//        File movedChildDir = new File(movedDir , testChildDir.getName());
//        File movedFile = new File(movedChildDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3159,movedDir,3158,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3161,movedChildDir,3160,movedChildDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3163,movedFile,3162,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectoryToDirectory_add1515() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_add1515");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testChildDir = new File(src , "foo");
//        File testFile = new File(testChildDir , "bar");
//        testChildDir.mkdirs();
//        createFile(testFile, 0);
//        File destDir = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3154,destDir,3153,destDir.exists());
//        org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3156,destDir,3155,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3157,!(src.exists()));
//        File movedDir = new File(destDir , src.getName());
//        File movedChildDir = new File(movedDir , testChildDir.getName());
//        File movedFile = new File(movedChildDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3159,movedDir,3158,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3161,movedChildDir,3160,movedChildDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3163,movedFile,3162,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectoryToDirectory_add1516() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_add1516");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testChildDir = new File(src , "foo");
//        File testFile = new File(testChildDir , "bar");
//        testChildDir.mkdirs();
//        createFile(testFile, 0);
//        File destDir = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3154,destDir,3153,destDir.exists());
//        org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, destDir, true);
//        org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3156,destDir,3155,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3157,!(src.exists()));
//        File movedDir = new File(destDir , src.getName());
//        File movedChildDir = new File(movedDir , testChildDir.getName());
//        File movedFile = new File(movedChildDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3159,movedDir,3158,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3161,movedChildDir,3160,movedChildDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3163,movedFile,3162,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "foo");
//        File testChildDir = new File(src , "foo");
//        File testFile = new File(testChildDir , "bar");
//        testChildDir.mkdirs();
//        createFile(testFile, 0);
//        File destDir = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3154,destDir,3153,destDir.exists());
//        org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3156,destDir,3155,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3157,!(src.exists()));
//        File movedDir = new File(destDir , src.getName());
//        File movedChildDir = new File(movedDir , testChildDir.getName());
//        File movedFile = new File(movedChildDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3159,movedDir,3158,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3161,movedChildDir,3160,movedChildDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3163,movedFile,3162,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_literalMutation3404() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_literalMutation3404");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testChildDir = new File(src , "foo");
//        File testFile = new File(testChildDir , "bar");
//        testChildDir.mkdirs();
//        createFile(testFile, 0);
//        File destDir = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3154,destDir,3153,destDir.exists());
//        org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3156,destDir,3155,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3157,!(src.exists()));
//        File movedDir = new File(destDir , src.getName());
//        File movedChildDir = new File(movedDir , testChildDir.getName());
//        File movedFile = new File(movedChildDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3159,movedDir,3158,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3161,movedChildDir,3160,movedChildDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3163,movedFile,3162,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_literalMutation3405() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_literalMutation3405");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testChildDir = new File(src , "foo");
//        File testFile = new File(testChildDir , "foo");
//        testChildDir.mkdirs();
//        createFile(testFile, 0);
//        File destDir = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3154,destDir,3153,destDir.exists());
//        org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3156,destDir,3155,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3157,!(src.exists()));
//        File movedDir = new File(destDir , src.getName());
//        File movedChildDir = new File(movedDir , testChildDir.getName());
//        File movedFile = new File(movedChildDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3159,movedDir,3158,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3161,movedChildDir,3160,movedChildDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3163,movedFile,3162,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_literalMutation3406() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_literalMutation3406");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testChildDir = new File(src , "foo");
//        File testFile = new File(testChildDir , "bar");
//        testChildDir.mkdirs();
//        createFile(testFile, 1);
//        File destDir = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3154,destDir,3153,destDir.exists());
//        org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3156,destDir,3155,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3157,!(src.exists()));
//        File movedDir = new File(destDir , src.getName());
//        File movedChildDir = new File(movedDir , testChildDir.getName());
//        File movedFile = new File(movedChildDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3159,movedDir,3158,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3161,movedChildDir,3160,movedChildDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3163,movedFile,3162,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_literalMutation3407() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_literalMutation3407");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testChildDir = new File(src , "foo");
//        File testFile = new File(testChildDir , "bar");
//        testChildDir.mkdirs();
//        createFile(testFile, 0);
//        File destDir = new File(dir , "foo");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3154,destDir,3153,destDir.exists());
//        org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3156,destDir,3155,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3157,!(src.exists()));
//        File movedDir = new File(destDir , src.getName());
//        File movedChildDir = new File(movedDir , testChildDir.getName());
//        File movedFile = new File(movedChildDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3159,movedDir,3158,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3161,movedChildDir,3160,movedChildDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3163,movedFile,3162,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_literalMutation3408() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_literalMutation3408");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testChildDir = new File(src , "foo");
//        File testFile = new File(testChildDir , "bar");
//        testChildDir.mkdirs();
//        createFile(testFile, 0);
//        File destDir = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3154,destDir,3153,destDir.exists());
//        org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, destDir, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3156,destDir,3155,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3157,!(src.exists()));
//        File movedDir = new File(destDir , src.getName());
//        File movedChildDir = new File(movedDir , testChildDir.getName());
//        File movedFile = new File(movedChildDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3159,movedDir,3158,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3161,movedChildDir,3160,movedChildDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3163,movedFile,3162,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectoryToDirectory_remove1153() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_remove1153");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testChildDir = new File(src , "foo");
//        File testFile = new File(testChildDir , "bar");
//        createFile(testFile, 0);
//        File destDir = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3154,destDir,3153,destDir.exists());
//        org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3156,destDir,3155,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3157,!(src.exists()));
//        File movedDir = new File(destDir , src.getName());
//        File movedChildDir = new File(movedDir , testChildDir.getName());
//        File movedFile = new File(movedChildDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3159,movedDir,3158,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3161,movedChildDir,3160,movedChildDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3163,movedFile,3162,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectoryToDirectory_remove1154() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_remove1154");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testChildDir = new File(src , "foo");
//        File testFile = new File(testChildDir , "bar");
//        testChildDir.mkdirs();
//        File destDir = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3154,destDir,3153,destDir.exists());
//        org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3156,destDir,3155,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3157,!(src.exists()));
//        File movedDir = new File(destDir , src.getName());
//        File movedChildDir = new File(movedDir , testChildDir.getName());
//        File movedFile = new File(movedChildDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3159,movedDir,3158,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3161,movedChildDir,3160,movedChildDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3163,movedFile,3162,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectoryToDirectory_remove1155() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_remove1155");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testChildDir = new File(src , "foo");
//        File testFile = new File(testChildDir , "bar");
//        testChildDir.mkdirs();
//        createFile(testFile, 0);
//        File destDir = new File(dir , "testMoveDirectory1Dest");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3154,destDir,3153,destDir.exists());
//        org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3156,destDir,3155,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3157,!(src.exists()));
//        File movedDir = new File(destDir , src.getName());
//        File movedChildDir = new File(movedDir , testChildDir.getName());
//        File movedFile = new File(movedChildDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3159,movedDir,3158,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3161,movedChildDir,3160,movedChildDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3163,movedFile,3162,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectoryToDirectory_remove1156() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_remove1156");
//        File dir = FileBasedTestCase.getTestDirectory();
//        File src = new File(dir , "testMoveDirectory1Source");
//        File testChildDir = new File(src , "foo");
//        File testFile = new File(testChildDir , "bar");
//        testChildDir.mkdirs();
//        createFile(testFile, 0);
//        File destDir = new File(dir , "testMoveDirectory1Dest");
//        org.apache.commons.io.FileUtils.deleteDirectory(destDir);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3154,destDir,3153,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3156,destDir,3155,destDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3157,!(src.exists()));
//        File movedDir = new File(destDir , src.getName());
//        File movedChildDir = new File(movedDir , testChildDir.getName());
//        File movedFile = new File(movedChildDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3159,movedDir,3158,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3161,movedChildDir,3160,movedChildDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3163,movedFile,3162,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_Errors() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectoryToDirectory_Errors_add1517() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_add1517");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectoryToDirectory_Errors_add1518() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_add1518");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectoryToDirectory_Errors_add1519() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_add1519");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectoryToDirectory_Errors_add1520() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_add1520");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectoryToDirectory_Errors_add1521() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_add1521");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectoryToDirectory_Errors_add1522() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_add1522");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_Errors_literalMutation3410() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_literalMutation3410");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_Errors_literalMutation3411() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_literalMutation3411");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_Errors_literalMutation3412() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_literalMutation3412");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_Errors_literalMutation3414() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_literalMutation3414");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, false);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_Errors_literalMutation3415() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_literalMutation3415");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_Errors_literalMutation3416() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_literalMutation3416");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_Errors_literalMutation3417() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_literalMutation3417");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, -1);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_Errors_literalMutation3418() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_literalMutation3418");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, -1);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_Errors_literalMutation3419() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_literalMutation3419");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, false);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_Errors_literalMutation3420() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_literalMutation3420");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveDirectoryToDirectory_Errors_literalMutation3421() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_literalMutation3421");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile1, 0);
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectoryToDirectory_Errors_remove1157() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_remove1157");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveDirectoryToDirectory_Errors_remove1158() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveDirectoryToDirectory_Errors_remove1158");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File testFile1 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile1");
//        File testFile2 = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileFile2");
//        createFile(testFile2, 0);
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
//        } catch (IOException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "testMoveFileNonExistant");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveToDirectory_add1559() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_add1559");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryDestDir");
//        File testDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestDir");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestFile");
//        testDir.mkdirs();
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File movedFile = new File(destDir , testFile.getName());
//        File movedDir = new File(destDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3195,movedFile,3194,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3197,movedDir,3196,movedDir.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testFile, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3199,movedFile,3198,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3201,testFile,3200,testFile.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testDir, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3203,movedDir,3202,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3205,testDir,3204,testDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveToDirectory_add1560() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_add1560");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryDestDir");
//        File testDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestDir");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestFile");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        createFile(testFile, 0);
//        File movedFile = new File(destDir , testFile.getName());
//        File movedDir = new File(destDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3195,movedFile,3194,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3197,movedDir,3196,movedDir.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testFile, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3199,movedFile,3198,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3201,testFile,3200,testFile.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testDir, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3203,movedDir,3202,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3205,testDir,3204,testDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveToDirectory_add1561() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_add1561");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryDestDir");
//        File testDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestDir");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestFile");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File movedFile = new File(destDir , testFile.getName());
//        File movedDir = new File(destDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3195,movedFile,3194,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3197,movedDir,3196,movedDir.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testFile, destDir, true);
//        org.apache.commons.io.FileUtils.moveToDirectory(testFile, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3199,movedFile,3198,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3201,testFile,3200,testFile.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testDir, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3203,movedDir,3202,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3205,testDir,3204,testDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveToDirectory_add1562() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_add1562");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryDestDir");
//        File testDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestDir");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestFile");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File movedFile = new File(destDir , testFile.getName());
//        File movedDir = new File(destDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3195,movedFile,3194,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3197,movedDir,3196,movedDir.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testFile, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3199,movedFile,3198,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3201,testFile,3200,testFile.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testDir, destDir, true);
//        org.apache.commons.io.FileUtils.moveToDirectory(testDir, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3203,movedDir,3202,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3205,testDir,3204,testDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveToDirectory() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File testDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestDir");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestFile");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File movedFile = new File(destDir , testFile.getName());
//        File movedDir = new File(destDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3195,movedFile,3194,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3197,movedDir,3196,movedDir.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testFile, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3199,movedFile,3198,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3201,testFile,3200,testFile.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testDir, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3203,movedDir,3202,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3205,testDir,3204,testDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveToDirectory_literalMutation3477() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_literalMutation3477");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryDestDir");
//        File testDir = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestFile");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File movedFile = new File(destDir , testFile.getName());
//        File movedDir = new File(destDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3195,movedFile,3194,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3197,movedDir,3196,movedDir.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testFile, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3199,movedFile,3198,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3201,testFile,3200,testFile.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testDir, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3203,movedDir,3202,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3205,testDir,3204,testDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveToDirectory_literalMutation3478() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_literalMutation3478");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryDestDir");
//        File testDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestDir");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File movedFile = new File(destDir , testFile.getName());
//        File movedDir = new File(destDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3195,movedFile,3194,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3197,movedDir,3196,movedDir.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testFile, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3199,movedFile,3198,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3201,testFile,3200,testFile.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testDir, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3203,movedDir,3202,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3205,testDir,3204,testDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveToDirectory_literalMutation3479() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_literalMutation3479");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryDestDir");
//        File testDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestDir");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestFile");
//        testDir.mkdirs();
//        createFile(testFile, -1);
//        File movedFile = new File(destDir , testFile.getName());
//        File movedDir = new File(destDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3195,movedFile,3194,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3197,movedDir,3196,movedDir.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testFile, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3199,movedFile,3198,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3201,testFile,3200,testFile.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testDir, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3203,movedDir,3202,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3205,testDir,3204,testDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveToDirectory_literalMutation3480() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_literalMutation3480");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryDestDir");
//        File testDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestDir");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestFile");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File movedFile = new File(destDir , testFile.getName());
//        File movedDir = new File(destDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3195,movedFile,3194,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3197,movedDir,3196,movedDir.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testFile, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3199,movedFile,3198,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3201,testFile,3200,testFile.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testDir, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3203,movedDir,3202,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3205,testDir,3204,testDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveToDirectory_literalMutation3481() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_literalMutation3481");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryDestDir");
//        File testDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestDir");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestFile");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File movedFile = new File(destDir , testFile.getName());
//        File movedDir = new File(destDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3195,movedFile,3194,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3197,movedDir,3196,movedDir.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testFile, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3199,movedFile,3198,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3201,testFile,3200,testFile.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testDir, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3203,movedDir,3202,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3205,testDir,3204,testDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveToDirectory_remove1180() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_remove1180");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryDestDir");
//        File testDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestDir");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestFile");
//        createFile(testFile, 0);
//        File movedFile = new File(destDir , testFile.getName());
//        File movedDir = new File(destDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3195,movedFile,3194,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3197,movedDir,3196,movedDir.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testFile, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3199,movedFile,3198,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3201,testFile,3200,testFile.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testDir, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3203,movedDir,3202,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3205,testDir,3204,testDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveToDirectory_remove1181() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_remove1181");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryDestDir");
//        File testDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestDir");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestFile");
//        testDir.mkdirs();
//        File movedFile = new File(destDir , testFile.getName());
//        File movedDir = new File(destDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3195,movedFile,3194,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3197,movedDir,3196,movedDir.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testFile, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3199,movedFile,3198,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3201,testFile,3200,testFile.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testDir, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3203,movedDir,3202,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3205,testDir,3204,testDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveToDirectory_remove1182() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_remove1182");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryDestDir");
//        File testDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestDir");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestFile");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File movedFile = new File(destDir , testFile.getName());
//        File movedDir = new File(destDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3195,movedFile,3194,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3197,movedDir,3196,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3199,movedFile,3198,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3201,testFile,3200,testFile.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testDir, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3203,movedDir,3202,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3205,testDir,3204,testDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveToDirectory_remove1183() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_remove1183");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryDestDir");
//        File testDir = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestDir");
//        File testFile = new File(FileBasedTestCase.getTestDirectory() , "testMoveToDirectoryTestFile");
//        testDir.mkdirs();
//        createFile(testFile, 0);
//        File movedFile = new File(destDir , testFile.getName());
//        File movedDir = new File(destDir , testFile.getName());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3195,movedFile,3194,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3197,movedDir,3196,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3199,movedFile,3198,movedFile.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3201,testFile,3200,testFile.exists());
//        org.apache.commons.io.FileUtils.moveToDirectory(testDir, destDir, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3203,movedDir,3202,movedDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3205,testDir,3204,testDir.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveToDirectory_Errors_add1563() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_Errors_add1563");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "nonexistant");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "MoveToDirectoryDestDir");
//        try {
//            org.apache.commons.io.FileUtils.moveToDirectory(nonexistant, destDir, true);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveToDirectory_Errors_add1564() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_Errors_add1564");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "nonexistant");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "MoveToDirectoryDestDir");
//        try {
//            org.apache.commons.io.FileUtils.moveToDirectory(nonexistant, destDir, true);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMoveToDirectory_Errors_add1565() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_Errors_add1565");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "nonexistant");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "MoveToDirectoryDestDir");
//        try {
//            org.apache.commons.io.FileUtils.moveToDirectory(nonexistant, destDir, true);
//            org.apache.commons.io.FileUtils.moveToDirectory(nonexistant, destDir, true);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveToDirectory_Errors() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_Errors");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "nonexistant");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "MoveToDirectoryDestDir");
//        try {
//            org.apache.commons.io.FileUtils.moveToDirectory(nonexistant, destDir, true);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveToDirectory_Errors_literalMutation3484() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_Errors_literalMutation3484");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), false);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "nonexistant");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "MoveToDirectoryDestDir");
//        try {
//            org.apache.commons.io.FileUtils.moveToDirectory(nonexistant, destDir, true);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveToDirectory_Errors_literalMutation3485() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_Errors_literalMutation3485");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "nonexistant");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "MoveToDirectoryDestDir");
//        try {
//            org.apache.commons.io.FileUtils.moveToDirectory(nonexistant, destDir, true);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveToDirectory_Errors_literalMutation3487() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_Errors_literalMutation3487");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, false);
//        } catch (NullPointerException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "nonexistant");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "MoveToDirectoryDestDir");
//        try {
//            org.apache.commons.io.FileUtils.moveToDirectory(nonexistant, destDir, true);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveToDirectory_Errors_literalMutation3488() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_Errors_literalMutation3488");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "MoveToDirectoryDestDir");
//        try {
//            org.apache.commons.io.FileUtils.moveToDirectory(nonexistant, destDir, true);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveToDirectory_Errors_literalMutation3489() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_Errors_literalMutation3489");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "nonexistant");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        try {
//            org.apache.commons.io.FileUtils.moveToDirectory(nonexistant, destDir, true);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMoveToDirectory_Errors_literalMutation3490() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMoveToDirectory_Errors_literalMutation3490");
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
//        } catch (NullPointerException e) {
//        }
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
//        } catch (NullPointerException e) {
//        }
//        File nonexistant = new File(FileBasedTestCase.getTestDirectory() , "nonexistant");
//        File destDir = new File(FileBasedTestCase.getTestDirectory() , "MoveToDirectoryDestDir");
//        try {
//            org.apache.commons.io.FileUtils.moveToDirectory(nonexistant, destDir, true);
//        } catch (IOException e) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIO300_add1479() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIO300_add1479");
//        final File testDirectory = FileBasedTestCase.getTestDirectory();
//        File src = new File(testDirectory , "dir1");
//        File dest = new File(src , "dir2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3090,dest,3089,dest.mkdirs());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3092,src,3091,src.exists());
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, dest, false);
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, dest, false);
//        } catch (IOException ioe) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3094,src,3093,src.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIO300() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIO300");
//        final File testDirectory = FileBasedTestCase.getTestDirectory();
//        File src = new File(testDirectory , "foo");
//        File dest = new File(src , "dir2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3090,dest,3089,dest.mkdirs());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3092,src,3091,src.exists());
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, dest, false);
//        } catch (IOException ioe) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3094,src,3093,src.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIO300_literalMutation3331() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIO300_literalMutation3331");
//        final File testDirectory = FileBasedTestCase.getTestDirectory();
//        File src = new File(testDirectory , "dir1");
//        File dest = new File(src , "foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3090,dest,3089,dest.mkdirs());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3092,src,3091,src.exists());
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, dest, false);
//        } catch (IOException ioe) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3094,src,3093,src.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIO300_literalMutation3332() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIO300_literalMutation3332");
//        final File testDirectory = FileBasedTestCase.getTestDirectory();
//        File src = new File(testDirectory , "dir1");
//        File dest = new File(src , "dir2");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3090,dest,3089,dest.mkdirs());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3092,src,3091,src.exists());
//        try {
//            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, dest, false);
//        } catch (IOException ioe) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3094,src,3093,src.exists());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIO276_add1478() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIO276_add1478");
//        File dir = new File("target" , "IO276");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3083,(dir + " should not be present"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3085,dir,3084,dir.mkdirs());
//        File file = new File(dir , "IO276.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3086,(file + " should not be present"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3088,file,3087,file.createNewFile());
//        org.apache.commons.io.FileUtils.forceDeleteOnExit(dir);
//        org.apache.commons.io.FileUtils.forceDeleteOnExit(dir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIO276() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIO276");
//        File dir = new File("foo" , "IO276");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3083,(dir + " should not be present"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3085,dir,3084,dir.mkdirs());
//        File file = new File(dir , "IO276.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3086,(file + " should not be present"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3088,file,3087,file.createNewFile());
//        org.apache.commons.io.FileUtils.forceDeleteOnExit(dir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIO276_literalMutation3328() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIO276_literalMutation3328");
//        File dir = new File("target" , "foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3083,(dir + " should not be present"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3085,dir,3084,dir.mkdirs());
//        File file = new File(dir , "IO276.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3086,(file + " should not be present"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3088,file,3087,file.createNewFile());
//        org.apache.commons.io.FileUtils.forceDeleteOnExit(dir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testIO276_literalMutation3329() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIO276_literalMutation3329");
//        File dir = new File("target" , "IO276");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3083,(dir + " should not be present"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3085,dir,3084,dir.mkdirs());
//        File file = new File(dir , "foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3086,(file + " should not be present"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3088,file,3087,file.createNewFile());
//        org.apache.commons.io.FileUtils.forceDeleteOnExit(dir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testIO276_remove1132() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testIO276_remove1132");
//        File dir = new File("target" , "IO276");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3083,(dir + " should not be present"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3085,dir,3084,dir.mkdirs());
//        File file = new File(dir , "IO276.txt");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3086,(file + " should not be present"));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),3088,file,3087,file.createNewFile());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * DirectoryWalker implementation that recursively lists all files and directories.
//     */
//static class ListDirectoryWalker extends DirectoryWalker<java.io.File> {
//        ListDirectoryWalker() {
//            super();
//        }
//
//        List<java.io.File> list(File startDirectory) throws IOException {
//            ArrayList<java.io.File> files = new ArrayList<java.io.File>();
//            walk(startDirectory, files);
//            return files;
//        }
//
//        @Override
//        protected void handleDirectoryStart(File directory, int depth, Collection<java.io.File> results) throws IOException {
//            if (depth > 0) {
//                results.add(directory);
//            } 
//        }
//
//        @Override
//        protected void handleFile(File file, int depth, Collection<java.io.File> results) throws IOException {
//            results.add(file);
//        }
//    }
//}
//
